{
  "version": 3,
  "sources": ["../../src/templates/main.html.js", "../../src/domain/math-provider.ts", "../../src/dal/data-provider.ts", "../../src/ui/panel-fill.ts", "../../src/ui/labels.ts", "../../src/domain/events-provider.ts", "../../src/ui/styles.ts", "../../src/dal/storage-provider.ts", "../../src/ui/pointer.ts", "../../src/domain/common-provider.ts", "../../src/ui/slider.ts", "../../src/domain/attributes-provider.ts", "../../src/app/range-slider.ts", "../../src/index.ts"],
  "sourcesContent": ["export default (styles) => { return ` <style> ${styles} </style> <div class=\"range-slider-box\"> <div class=\"labels-row\"> <slot name=\"value-label\"></slot> <slot name=\"value2-label\"></slot> </div> <div class=\"row\"> <slot name=\"min-label\"></slot> <div id=\"range-slider\" class=\"range-slider\"> <div class=\"container\"> <div class=\"panel\"></div> <div class=\"panel-fill\"></div> <div class=\"container\"> <div class=\"pointer\" tabindex=\"0\" role=\"slider\"> <div class=\"pointer-shape\"></div> </div> </div> </div> </div> <slot name=\"max-label\"></slot> </div> </div>`; }; ", "/**\n * scale a range [min,max] to [a,b]\n * f(x) = (b - a) * (x - min) / (max - min) + a\n */\nexport const convertRange = (min: number, max: number, a: number, b: number, x: number) => {\n  const temp = (max - min);\n  if(temp === 0) return a;\n  return ((b - a) * (x - min)) / temp + a;\n};\n\n// eslint-disable-next-line\nexport const isNumber = (input: any) => {\n  return !isNaN(parseFloat(input)) && isFinite(input);\n};\n\n// the below function should receive any\n// eslint-disable-next-line\nexport const getNumber = (input: any, defaultValue: any) : number => {\n  return isNumber(input) ? Number(input) : defaultValue;\n};\n\n/**\n * Round up to the next multiple of X,\n * where X is the step provided by the user.\n */\nexport const roundToStep = (num: number, step: number) => {\n  return step === 0 ? 0 : Math.round(num / step) * step;\n};\n\n/**\n * round to decimal places\n * https://stackoverflow.com/questions/11832914/how-to-round-to-at-most-2-decimal-places-if-necessary\n */\nexport const setDecimalPlaces = (num: number, decimalPlaces = Infinity) => {\n  if (decimalPlaces === Infinity) return num;\n\n  const coeff = 10 ** decimalPlaces;\n  return Math.round(num * coeff) / coeff;\n};\n\nexport const getBoolean = (val: string | null | undefined | boolean) => {\n  if(val === null || val === undefined) return false;\n  if(typeof val === 'boolean') return val;\n  return val.trim().toLowerCase() === 'true';\n};\n", "import { isNumber } from '../domain/math-provider';\n\nexport const parseData = (dataString: string | undefined | null): (string | number)[] | undefined => {\n  if (dataString === undefined || dataString === null) return undefined;\n\n  if(Array.isArray(dataString)) return dataString as (string | number)[];\n\n  const result = dataString.trim();\n  if (result === '') return undefined;\n\n  const parts = dataString.split(',');\n  const list: string[] = [];\n  let allValuesAreNumbers = true;\n\n  for (let i = 0; i < parts.length; i++) {\n    const part = parts[i].trim();\n    if (part === '') continue;\n\n    list.push(part);\n\n    if (!isNumber(part)) {\n      allValuesAreNumbers = false;\n    }\n  }\n\n  if (!allValuesAreNumbers) return list;\n\n  return list.map((item) => Number(item));\n};\n\nexport const findValueIndexInData = (val: string | number, data: (string | number)[] | undefined) => {\n  return data ? data.findIndex((item) => item === val || item.toString().trim() === val.toString().trim()) : -1;\n};", "import { TypeEnum } from '../enums/type-enum';\n\nexport interface IPanelFill {\n  updatePosition: (type: TypeEnum, percent1: number, percent2: number | undefined, rightToLeft: boolean, bottomToTop: boolean) => void;\n}\n\nexport const PanelFill = ($fill: HTMLElement) : IPanelFill => {\n\n  const updatePosition = (type: TypeEnum, percent1: number, percent2: number | undefined, rightToLeft: boolean, bottomToTop: boolean) => {\n\n    if (type === TypeEnum.Vertical) {\n      $fill.style.removeProperty('width');\n      $fill.style.removeProperty('right');\n      $fill.style.removeProperty('left');\n\n      if (percent2 !== undefined) {\n        $fill.style.height = `${Math.abs(percent1 - percent2)}%`;\n      }\n      else{\n        $fill.style.height = `${ percent1 }%`;\n      }\n\n      if (bottomToTop) {\n        $fill.style.bottom = '0%';\n\n        if (percent2 !== undefined) {\n          $fill.style.top = `${Math.min(100 - percent2, 100 - percent1)}%`;\n        }\n        else{\n          $fill.style.top = 'auto';\n        }\n      }\n      else {\n        $fill.style.bottom = 'auto';\n\n        if (percent2 !== undefined) {\n          $fill.style.top = `${Math.min(percent1, percent2)}%`;\n        }\n        else{\n          $fill.style.top = '0%';\n        }\n      }\n    }\n    else {\n      $fill.style.removeProperty('height');\n      $fill.style.removeProperty('top');\n      $fill.style.removeProperty('bottom');\n\n      if (percent2 !== undefined) {\n        $fill.style.width = `${ Math.abs(percent1 - percent2) }%`;\n      }\n      else{\n        $fill.style.width = `${ percent1 }%`;\n      }\n\n      if (rightToLeft) {\n        $fill.style.right = '0%';\n\n        if (percent2 !== undefined) {\n          $fill.style.left = `${ Math.min(100 - percent2, 100 - percent1) }%`;\n        }\n        else{\n          $fill.style.left = 'auto';\n        }\n      }\n      else {\n        $fill.style.right = 'auto';\n\n        if (percent2 !== undefined) {\n          $fill.style.left = `${ Math.min(percent1, percent2) }%`;\n        }\n        else{\n          $fill.style.left = '0%';\n        }\n      }\n    }\n  };\n\n  return {\n    updatePosition,\n  };\n};", "export interface ILabels {\n  readonly genLabelsEnabled: boolean;\n  setGenLabelsEnabled: (\n    enabled: boolean,\n    textValue1: string | number | undefined,\n    textValue2: string | number | undefined,\n    rtlOrBtt: boolean,\n    min: number | string | undefined,\n    max: number | string | undefined) => void;\n\n  updateValues: (\n    textValue1: string | number | undefined,\n    textValue2: string | number | undefined,\n    min: number | string | undefined,\n    max: number | string | undefined) => void;\n\n  setLabelsOrder: (rtlOrBtt: boolean) => void;\n\n  referenceLabel1: string | null;\n  referenceLabel2: string | null;\n}\n\nconst VALUE_LABEL1_CODE_NAME = 'value-label';\nconst VALUE_LABEL2_CODE_NAME = 'value2-label';\nconst MIN_LABEL_CODE_NAME = 'min-label';\nconst MAX_LABEL_CODE_NAME = 'max-label';\n\nexport const Labels = ($component: HTMLElement, $slider: HTMLElement, requestUpdateValues: () => void) : ILabels => {\n\n  let $labelsRow: HTMLElement | null;\n  let generatedLabelsEnabled = false;\n\n  let $genValue1Label: HTMLElement | null = null;\n  let $genValue2Label: HTMLElement | null = null;\n  let $genMinLabel: HTMLElement | null = null;\n  let $genMaxLabel: HTMLElement | null = null;\n\n  let referenceLabel1: string | null = null;\n  let referenceLabel2: string | null = null;\n  let $referenceLabel1: HTMLElement | null = null;\n  let $referenceLabel2: HTMLElement | null = null;\n\n  // ---------- HELPERS ------------------------------\n\n  const createLabel = (codeName: string) => {\n    const $label = document.createElement('label');\n    $label.classList.add(codeName);\n    $label.setAttribute('for', 'range-slider');\n    return $label;\n  };\n\n  const getOuterSlot = (codeName: string) => {\n    return $component.querySelector(`[slot=\"${ codeName }\"]`);\n  };\n\n  const getInnerSlot = (codeName: string) => {\n    return $component.shadowRoot?.querySelector(`slot[name=\"${ codeName }\"]`);\n  };\n\n  const getLabelFromSlot = (codeName: string) => {\n    const $slot = getOuterSlot(codeName);\n\n    if(!$slot) return null;\n    return $slot.querySelector(`.${ codeName }`) as HTMLElement;\n  };\n\n  const createGenerateLabels = (\n    textValue1: string | number | undefined,\n    textValue2: string | number | undefined,\n    rtlOrBtt: boolean,\n    min: number | string | undefined,\n    max: number | string | undefined\n  ) => {\n\n    // create first generated label ---------------------\n    $genValue1Label = getLabelFromSlot(VALUE_LABEL1_CODE_NAME);\n    if(!$genValue1Label){\n      $genValue1Label = createLabel(VALUE_LABEL1_CODE_NAME);\n      $labelsRow?.append($genValue1Label);\n    }\n\n    // create second generated label --------------------\n    if(textValue2 !== undefined){\n      $genValue2Label = getLabelFromSlot(VALUE_LABEL2_CODE_NAME);\n      if(!$genValue2Label){\n        $genValue2Label = createLabel(VALUE_LABEL2_CODE_NAME);\n        $labelsRow?.append($genValue2Label);\n      }\n    }\n\n    $genMinLabel = getLabelFromSlot(MIN_LABEL_CODE_NAME);\n    if(!$genMinLabel){\n      $genMinLabel = createLabel(MIN_LABEL_CODE_NAME);\n      $slider?.after($genMinLabel);\n    }\n\n    $genMaxLabel = getLabelFromSlot(MAX_LABEL_CODE_NAME);\n    if(!$genMaxLabel){\n      $genMaxLabel = createLabel(MAX_LABEL_CODE_NAME);\n      $slider?.after($genMaxLabel);\n    }\n\n    setLabelsOrder(rtlOrBtt);\n    updateValues(textValue1, textValue2, min, max);\n  };\n\n  const removeGeneratedLabels = () => {\n    if($genValue1Label){\n      $genValue1Label.remove();\n      $genValue1Label = null;\n    }\n\n    if($genValue2Label){\n      $genValue2Label.remove();\n      $genValue2Label = null;\n    }\n\n    if($genMaxLabel){\n      $genMaxLabel.remove();\n      $genMaxLabel = null;\n    }\n\n    if($genMinLabel){\n      $genMinLabel.remove();\n      $genMinLabel = null;\n    }\n  };\n\n  // -------- APIs -------------------------\n\n  const setGenLabelsEnabled = (\n    enabled: boolean,\n    textValue1: string | number | undefined,\n    textValue2: string | number | undefined,\n    rtlOrBtt: boolean,\n    min: number | string | undefined,\n    max: number | string | undefined) => {\n\n    generatedLabelsEnabled = enabled;\n\n    if(enabled){\n      createGenerateLabels(textValue1, textValue2, rtlOrBtt, min, max);\n    }\n    else{\n      removeGeneratedLabels();\n    }\n  };\n\n  const setLabelsOrder = (rtlOrBtt: boolean) => {\n\n    const label1hasSlot = getOuterSlot(VALUE_LABEL1_CODE_NAME) !== null;\n    const label2hasSlot = getOuterSlot(VALUE_LABEL2_CODE_NAME) !== null;\n    const minHasSlot = getOuterSlot(MIN_LABEL_CODE_NAME) !== null;\n    const maxHasSlot = getOuterSlot(MAX_LABEL_CODE_NAME) !== null;\n\n    const $label1Slot = getInnerSlot(VALUE_LABEL1_CODE_NAME);\n    const $label2Slot = getInnerSlot(VALUE_LABEL2_CODE_NAME);\n    const $minSlot = getInnerSlot(MIN_LABEL_CODE_NAME);\n    const $maxSlot = getInnerSlot(MAX_LABEL_CODE_NAME);\n\n    if(rtlOrBtt){\n\n      if($genValue1Label && $genValue2Label && !label1hasSlot && !label2hasSlot){\n        $genValue2Label.after($genValue1Label);\n      }\n      else{\n        if($label1Slot && $label2Slot){\n          $label2Slot.after($label1Slot);\n        }\n      }\n\n      if($genMinLabel){\n        if(minHasSlot && $minSlot){\n          $slider.after($minSlot);\n        }\n        else{\n          $slider.after($genMinLabel);\n        }\n      }\n\n      if($genMaxLabel){\n        if(maxHasSlot && $maxSlot){\n          $slider.before($maxSlot);\n        }\n        else{\n          $slider.before($genMaxLabel);\n        }\n      }\n    }\n    else{\n\n      if($genMinLabel){\n        if(minHasSlot && $minSlot){\n          $slider.before($minSlot);\n        }\n        else{\n          $slider.before($genMinLabel);\n        }\n      }\n\n      if($genMaxLabel){\n        if(maxHasSlot && $maxSlot){\n          $slider.after($maxSlot);\n        }\n        else{\n          $slider.after($genMaxLabel);\n        }\n      }\n\n      if($genValue1Label && $genValue2Label && !label1hasSlot && !label2hasSlot){\n        $genValue1Label.after($genValue2Label);\n      }\n      else{\n        if($label1Slot && $label2Slot){\n          $label1Slot.after($label2Slot);\n        }\n      }\n    }\n  };\n\n  const updateValues = (\n    textValue1: string | number | undefined,\n    textValue2: string | number | undefined,\n    min: number | string | undefined,\n    max: number | string | undefined) => {\n\n    if($genValue1Label && textValue1 !== undefined){\n      $genValue1Label.textContent = textValue1.toString();\n    }\n\n    if($genValue2Label && textValue2 !== undefined){\n      $genValue2Label.textContent = textValue2.toString();\n    }\n\n    if($genMinLabel){\n      $genMinLabel.textContent = min === undefined ? '' : min.toString();\n    }\n\n    if($genMaxLabel){\n      $genMaxLabel.textContent = max === undefined ? '' : max.toString();\n    }\n\n    if($referenceLabel1 && textValue1 !== undefined){\n      $referenceLabel1.textContent = textValue1.toString();\n    }\n\n    if($referenceLabel2 && textValue2 !== undefined){\n      $referenceLabel2.textContent = textValue2.toString();\n    }\n  };\n\n  const setReferenceLabel1 = (_referenceLabel1: string | null) => {\n    referenceLabel1 = _referenceLabel1;\n    $referenceLabel1 = _referenceLabel1 ? document.querySelector(_referenceLabel1) : null;\n    requestUpdateValues();\n  };\n\n  const setReferenceLabel2 = (_referenceLabel2: string | null) => {\n    referenceLabel2 = _referenceLabel2;\n    $referenceLabel2 = _referenceLabel2 ? document.querySelector(_referenceLabel2) : null;\n    requestUpdateValues();\n  };\n\n  // initialization -------------------------\n  (() => {\n    $labelsRow = $component.shadowRoot?.querySelector('.labels-row') as HTMLElement;\n  })();\n\n  return {\n    get genLabelsEnabled() {\n      return generatedLabelsEnabled;\n    },\n\n    setGenLabelsEnabled,\n    updateValues,\n    setLabelsOrder,\n\n    get referenceLabel1() {\n      return referenceLabel1;\n    },\n\n    set referenceLabel1(_referenceLabel1) {\n      setReferenceLabel1(_referenceLabel1);\n    },\n\n    get referenceLabel2() {\n      return referenceLabel2;\n    },\n\n    set referenceLabel2(_referenceLabel2) {\n      setReferenceLabel2(_referenceLabel2);\n    },\n  };\n};", "import { getNumber, isNumber } from './math-provider';\n\nexport const sendPointerClickedEvent = ($component: HTMLElement, $pointer: HTMLElement) => {\n  $component.dispatchEvent(\n    new CustomEvent('onPointerClicked', {\n      detail: {\n        $pointer: $pointer,\n      },\n    })\n  );\n};\n\nexport const sendMouseDownEvent = ($component: HTMLElement, evt: MouseEvent) => {\n  $component.dispatchEvent(\n    new CustomEvent('onMouseDown', {\n      detail: {\n        nativeEvent: evt,\n      },\n    })\n  );\n};\n\nexport const sendMouseUpEvent = ($component: HTMLElement, evt: MouseEvent) => {\n  $component.dispatchEvent(\n    new CustomEvent('onMouseUp', {\n      detail: {\n        nativeEvent: evt,\n      },\n    })\n  );\n};\n\nexport const sendOnKeyDownEvent = ($component: HTMLElement, evt: KeyboardEvent) => {\n  $component.dispatchEvent(\n    new CustomEvent('onKeyDown', {\n      detail: {\n        nativeEvent: evt,\n      },\n    })\n  );\n};\n\nexport interface IChangeEventDetail {\n  value?: number | string | undefined,\n  value2?: number | string | undefined,\n}\n\nexport const sendChangeEvent = ($component: HTMLElement, value1: string | number | undefined, value2: string | number | undefined) => {\n  const detail: IChangeEventDetail = {\n    value: isNumber(value1) ? getNumber(value1, value1) : value1,\n    value2: isNumber(value2) ? getNumber(value2, value2) : value2,\n  };\n\n  $component.dispatchEvent(\n    new CustomEvent('change', {\n      detail,\n    })\n  );\n};", "import { AttributesEnum } from '../enums/attributes-enum';\nimport { CSSVariables } from '../enums/css-vars-enum';\n\nexport interface IStyles {\n\n  setStyle: (key: string, value: string | null | undefined) => void;\n  getStyle: (key: string) => string | undefined;\n\n  theme: string | null;\n  pointerShape: string | null;\n}\n\nexport const Styles = ($component: HTMLElement, $slider: HTMLElement) : IStyles => {\n\n  let theme: string | null = null;\n  let pointerShape: string | null = null;\n  const stylesMap: Map<string, string> = new Map();\n\n  // ----- SETTERS ---------------------------\n\n  const removeClassesStartWith = (prefix: string) => {\n    const classList = [...$slider.classList];\n    for(const className of classList){\n      if(className.startsWith(prefix)){\n        $slider.classList.remove(className);\n      }\n    }\n  };\n\n  const setTheme = (val: string | null) => {\n    theme = val;\n    if(typeof val === 'string'){\n      $slider.classList.add(`theme-${ val }`);\n    }\n    else{\n      removeClassesStartWith('theme-');\n    }\n  };\n\n  const setPointerShape = (val: string | null) => {\n    pointerShape = val;\n    if(typeof val === 'string'){\n      $slider.classList.add('shape', `shape-${ val }`);\n    }\n    else{\n      removeClassesStartWith('shape-');\n    }\n  };\n\n  const setStyle = (key: string, value: string | null | undefined) => {\n    if(value === null || value === undefined){\n      if(stylesMap.has(key)){\n        stylesMap.delete(key);\n      }\n\n      $slider.style.removeProperty(key);\n      return;\n    }\n\n    stylesMap.set(key, value);\n    $slider.style.setProperty(key, value);\n  };\n\n  const getStyle = (key: string) => {\n    return stylesMap.get(key);\n  };\n\n  // ---- initialization ---------------------\n  (() => {\n\n    const list = [\n      [CSSVariables.SliderWidth, $component.getAttribute(AttributesEnum.SliderWidth)],\n      [CSSVariables.SliderHeight, $component.getAttribute(AttributesEnum.SliderHeight)],\n      [CSSVariables.SliderRadius, $component.getAttribute(AttributesEnum.SliderRadius)],\n\n      [CSSVariables.SliderBg, $component.getAttribute(AttributesEnum.SliderBg)],\n      [CSSVariables.SliderBgHover, $component.getAttribute(AttributesEnum.SliderBgHover)],\n      [CSSVariables.SliderBgFill, $component.getAttribute(AttributesEnum.SliderBgFill)],\n\n      [CSSVariables.PointerWidth, $component.getAttribute(AttributesEnum.PointerWidth)],\n      [CSSVariables.PointerHeight, $component.getAttribute(AttributesEnum.PointerHeight)],\n      [CSSVariables.PointerRadius, $component.getAttribute(AttributesEnum.PointerRadius)],\n\n      [CSSVariables.PointerBg, $component.getAttribute(AttributesEnum.PointerBg)],\n      [CSSVariables.PointerBgHover, $component.getAttribute(AttributesEnum.PointerBgHover)],\n      [CSSVariables.PointerBgFocus, $component.getAttribute(AttributesEnum.PointerBgFocus)],\n\n      [CSSVariables.PointerShadow, $component.getAttribute(AttributesEnum.PointerShadow)],\n      [CSSVariables.PointerShadowHover, $component.getAttribute(AttributesEnum.PointerShadowHover)],\n      [CSSVariables.PointerShadowFocus, $component.getAttribute(AttributesEnum.PointerShadowFocus)],\n\n      [CSSVariables.PointerBorder, $component.getAttribute(AttributesEnum.PointerBorder)],\n      [CSSVariables.PointerBorderHover, $component.getAttribute(AttributesEnum.PointerBorderHover)],\n      [CSSVariables.PointerBorderFocus, $component.getAttribute(AttributesEnum.PointerBorderFocus)],\n    ];\n\n    for(const item of list){\n      const cssVariableName = item[0] as string;\n      const cssVariableValue = item[1];\n      setStyle(cssVariableName, cssVariableValue);\n    }\n\n    setTheme($component.getAttribute(AttributesEnum.Theme));\n    setPointerShape($component.getAttribute(AttributesEnum.PointerShape));\n  })();\n\n  return {\n    setStyle,\n    getStyle,\n\n    get theme() {\n      return theme;\n    },\n\n    set theme(val){\n      setTheme(val);\n    },\n\n    get pointerShape() {\n      return pointerShape;\n    },\n\n    set pointerShape(val){\n      setPointerShape(val);\n    },\n\n  };\n};", "import { StorageTypeEnum } from '../enums/storage-type-enum';\n\nexport const STORAGE_KEY = 'tc-range-slider';\n\nexport const isStorageEnabled = (storageType: StorageTypeEnum) => {\n  if (storageType === StorageTypeEnum.localStorage) {\n    const temp = 'test';\n\n    try {\n      window.localStorage.setItem(temp, temp);\n      window.localStorage.removeItem(temp);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  if (storageType === StorageTypeEnum.sessionStorage) {\n    const temp = 'test';\n\n    try {\n      window.sessionStorage.setItem(temp, temp);\n      window.sessionStorage.removeItem(temp);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  return false;\n};\n\n// eslint-disable-next-line  @typescript-eslint/no-explicit-any\nexport const setLocalStorageItem = (storageName: string, value: any) => {\n  const escapedValue = encodeURIComponent(typeof value === 'object' ? JSON.stringify(value) : value);\n  window.localStorage.setItem(storageName, escapedValue);\n};\n\nexport const getLocalStorageItem = (storageName: string) => {\n  const value = window.localStorage.getItem(storageName);\n  return value === null ? null : decodeURIComponent(value);\n};\n\n// eslint-disable-next-line  @typescript-eslint/no-explicit-any\nexport const setSessionStorageItem = (storageName: string, value: any) => {\n  const escapedValue = encodeURIComponent(typeof value === 'object' ? JSON.stringify(value) : value);\n  window.sessionStorage.setItem(storageName, escapedValue);\n};\n\nexport const getSessionStorageItem = (storageName: string) => {\n  const value = window.sessionStorage.getItem(storageName);\n  return value === null ? null : decodeURIComponent(value);\n};\n\n// eslint-disable-next-line  @typescript-eslint/no-explicit-any\nexport const saveToStorage = (storageType: StorageTypeEnum, storageName: string, value: any) => {\n  // if this storage type is not supported -> do nothing\n  if (!isStorageEnabled(storageType)) return;\n\n  switch (storageType) {\n    case StorageTypeEnum.localStorage: {\n      setLocalStorageItem(storageName, value);\n      break;\n    }\n\n    case StorageTypeEnum.sessionStorage: {\n      setSessionStorageItem(storageName, value);\n      break;\n    }\n  }\n};\n\nexport const getFromStorage = (storageType: StorageTypeEnum, storageName: string) => {\n  // if this storage type is not supported -> do nothing\n  if (!isStorageEnabled(storageType)) return null;\n\n  if (storageType === StorageTypeEnum.localStorage) {\n    return getLocalStorageItem(storageName);\n  }\n\n  if (storageType === StorageTypeEnum.sessionStorage) {\n    return getSessionStorageItem(storageName);\n  }\n\n  return null;\n};\n\nexport const getStorageKey2 = (storageKey: string) => {\n  return `${ storageKey }-2`;\n};\n\n/**\n * try to restore values from session or local storage\n * when component is initialized\n */\nexport const restoreFromStorage = (\n  storage: StorageTypeEnum | undefined,\n  storageKey: string,\n  setInitialPointersValues: (_value: string | null, _value1: string | null, _value2: string | null) => void\n) => {\n  if (!storage) return;\n\n  let val1: string | null = null;\n  let val2: string | null = null;\n\n  const restoredValue1 = getFromStorage(storage, storageKey);\n  const restoredValue2 = getFromStorage(storage, getStorageKey2(storageKey));\n\n  if(restoredValue1 !== null && restoredValue1 !== undefined){\n    val1 = restoredValue1;\n  }\n\n  if(restoredValue2 !== null && restoredValue2 !== undefined){\n    val2 = restoredValue2;\n  }\n\n  if(val1 === null && val2 === null) return;\n\n  setInitialPointersValues(val1, val1, val2);\n};\n", "import { TypeEnum } from '../enums/type-enum';\nimport { sendOnKeyDownEvent, sendPointerClickedEvent } from '../domain/events-provider';\n\nexport interface IPointer {\n  readonly percent: number;\n  readonly $pointer: HTMLElement;\n\n  updatePosition: (percent: number, leftWall: number | undefined, rightWall: number | undefined, type: TypeEnum, rightToLeft: boolean, bottomToTop: boolean) => void;\n\n  disabled: boolean;\n\n  isClicked: ($target: HTMLElement) => boolean;\n  setCallbacks: (\n    arrowLeft: (pointerIndex: number) => void,\n    arrowRight: (pointerIndex: number) => void,\n    arrowUp: (pointerIndex: number) => void,\n    arrowDown: (pointerIndex: number) => void\n  ) => void;\n\n  setAttr: (key: string, value: string | null | undefined) => void;\n  getAttr: (key: string) => string | null;\n\n  destroy: () => void;\n}\n\nexport const Pointer = ($component: HTMLElement, $pointer: HTMLElement, index: number) : IPointer => {\n\n  // the pointer value in % in the range [0, 100] -\n  // used to render the pointer position\n  let percent = 0;\n\n  let arrowLeft: (pointerIndex: number) => void;\n  let arrowRight: (pointerIndex: number) => void;\n  let arrowUp: (pointerIndex: number) => void;\n  let arrowDown: (pointerIndex: number) => void;\n\n  let disabled = false;\n\n  // -------------- APIs -------------------------\n  const updatePosition = (_percent: number, _leftWall: number | undefined, _rightWall: number | undefined, _type: TypeEnum, _rightToLeft: boolean, _bottomToTop: boolean) => {\n    if(_rightWall !== undefined && _percent > _rightWall){\n      _percent = _rightWall;\n    }\n\n    if(_leftWall !== undefined && _percent < _leftWall){\n      _percent = _leftWall;\n    }\n\n    percent = _percent;\n    $pointer.focus();\n\n    // the below code should not change the global pointer percent,\n    // only its position on the panel\n    let percentPos = percent;\n    if((_type === TypeEnum.Vertical && _bottomToTop) ||\n      (_type === TypeEnum.Horizontal && _rightToLeft)) {\n      percentPos = 100 - percentPos;\n    }\n\n    if (_type === TypeEnum.Vertical) {\n      $pointer.style.top = `${ percentPos }%`;\n    }\n    else {\n      $pointer.style.left = `${ percentPos }%`;\n    }\n  };\n\n  const isClicked = ($target: HTMLElement) => {\n    return $target === $pointer || $pointer.contains($target);\n  };\n\n  const setCallbacks = (\n    _arrowLeft: (pointerIndex: number) => void,\n    _arrowRight: (pointerIndex: number) => void,\n    _arrowUp: (pointerIndex: number) => void,\n    _arrowDown: (pointerIndex: number) => void\n  ) => {\n    arrowLeft = _arrowLeft;\n    arrowRight = _arrowRight;\n    arrowUp = _arrowUp;\n    arrowDown = _arrowDown;\n  };\n\n  const setDisabled = (_disabled: boolean) => {\n    disabled = _disabled;\n    $pointer.classList.toggle('disabled', disabled);\n\n    if(disabled){\n      $pointer.setAttribute('aria-disabled', 'true');\n    }\n    else{\n      if ($pointer.hasAttribute('aria-disabled')) {\n        $pointer.removeAttribute('aria-disabled');\n      }\n    }\n  };\n\n  const setAttr = (key: string, value: string | null | undefined) => {\n    if(value === null || value === undefined){\n      $pointer.removeAttribute(key);\n    }\n    else{\n      $pointer.setAttribute(key, value);\n    }\n  };\n\n  const getAttr = (key: string) => {\n    return $pointer.getAttribute(key);\n  };\n\n  // -------------- Events ------------------------\n\n  const pointerKeyDown = (evt: KeyboardEvent) => {\n    if(disabled) return;\n\n    switch (evt.key) {\n      case 'ArrowLeft': {\n        evt.preventDefault();\n        if(typeof arrowLeft === 'function'){\n          arrowLeft(index);\n        }\n        break;\n      }\n\n      case 'ArrowRight': {\n        evt.preventDefault();\n        if(typeof arrowRight === 'function'){\n          arrowRight(index);\n        }\n        break;\n      }\n\n      case 'ArrowUp': {\n        evt.preventDefault();\n        if(typeof arrowUp === 'function'){\n          arrowUp(index);\n        }\n        break;\n      }\n\n      case 'ArrowDown': {\n        evt.preventDefault();\n        if(typeof arrowDown === 'function'){\n          arrowDown(index);\n        }\n        break;\n      }\n    }\n\n    sendOnKeyDownEvent($component, evt);\n  };\n\n  const pointerClicked = () => {\n    if(disabled) return;\n    sendPointerClickedEvent($component, $pointer);\n  };\n\n  // ---------- Lifecycle ------------------------\n\n  (() => {\n    $pointer.className = `pointer pointer-${ index }`;\n\n    $pointer.addEventListener('keydown', pointerKeyDown);\n    $pointer.addEventListener('click', pointerClicked);\n  })();\n\n  const destroy = () => {\n    $pointer.removeEventListener('keydown', pointerKeyDown);\n    $pointer.removeEventListener('click', pointerClicked);\n    $pointer.remove();\n  };\n\n  return {\n    $pointer,\n\n    get percent() {\n      return percent;\n    },\n\n    get disabled() {\n      return disabled;\n    },\n\n    set disabled(_disabled) {\n      setDisabled(_disabled);\n    },\n\n    updatePosition,\n\n    isClicked,\n    setCallbacks,\n    setAttr,\n    getAttr,\n\n    destroy,\n  };\n};\n\n", "import { Pointer } from '../ui/pointer';\n\nexport const createPointer2 = ($component: HTMLElement, $pointer1: HTMLElement) => {\n  const $pointer2 = $pointer1.cloneNode(true) as HTMLElement;\n  $pointer1.after($pointer2);\n  return Pointer($component, $pointer2, 2);\n}", "import { IPointer } from './pointer';\nimport { convertRange, getBoolean, getNumber, isNumber, roundToStep, setDecimalPlaces } from '../domain/math-provider';\nimport { AttributesEnum } from '../enums/attributes-enum';\nimport { TData, TStep } from '../types';\nimport { findValueIndexInData, parseData } from '../dal/data-provider';\nimport { TypeEnum } from '../enums/type-enum';\nimport { IPanelFill, PanelFill } from './panel-fill';\nimport { ILabels, Labels } from './labels';\nimport { sendChangeEvent, sendMouseDownEvent, sendMouseUpEvent } from '../domain/events-provider';\nimport { IStyles, Styles } from './styles';\nimport { StorageTypeEnum } from '../enums/storage-type-enum';\nimport { getStorageKey2, restoreFromStorage, saveToStorage, STORAGE_KEY } from '../dal/storage-provider';\nimport { CSSVariables } from '../enums/css-vars-enum';\nimport { CssClasses } from '../enums/css-classes-enum';\nimport { createPointer2 } from '../domain/common-provider';\n\nexport interface ISlider {\n  readonly pointer1: IPointer;\n  readonly pointer2: IPointer | null;\n  readonly labels: ILabels | null;\n  readonly styles: IStyles | null;\n\n  pointersOverlap: boolean;\n  pointersMinDistance: number;\n  pointersMaxDistance: number;\n  rangeDragging: boolean;\n\n  readonly min: number | string;\n  readonly max: number | string;\n  readonly step: TStep;\n  readonly data: TData;\n\n  type: TypeEnum;\n  rightToLeft: boolean;\n  bottomToTop: boolean;\n  disabled: boolean;\n  keyboardDisabled: boolean;\n  generateLabels: boolean;\n  round: number;\n  animateOnClick: string | undefined;\n  ariaLabel1: string | undefined;\n  ariaLabel2: string | undefined;\n\n  storage: StorageTypeEnum | undefined;\n  storageKey: string;\n  readonly storageKey2: string;\n\n  setMin: (value: number | string | undefined | null) => void;\n  setMax: (value: number | string | undefined | null) => void;\n  setValue: (value: number | string | undefined | null, index: number) => void;\n  setStep: (value: TStep) => void;\n  setData: (value: TData | string | null | number) => void;\n  getTextValue: (_percent: number | undefined) => undefined | string | number;\n\n  destroy: () => void;\n}\n\nexport const MIN_DEFAULT = 0;\nexport const MAX_DEFAULT = 100;\nexport const ROUND_DEFAULT = 2;\n\nexport const Slider = ($component: HTMLElement, $slider: HTMLElement, pointer1: IPointer, pointer2: IPointer | null) : ISlider => {\n\n  let selectedPointer: IPointer | null = null;\n  let panelFill: IPanelFill | null = null;\n  let labels: ILabels | null = null;\n  let styles: IStyles | null = null;\n\n  let min = MIN_DEFAULT;\n  let max = MAX_DEFAULT;\n  let step: TStep = undefined;\n  let data: TData = undefined;\n  let type: TypeEnum = TypeEnum.Horizontal;\n  let round: number = ROUND_DEFAULT;\n  let rightToLeft = false;\n  let bottomToTop = false;\n\n  let pointersOverlap = false;\n  let pointersMinDistance = 0;\n  let pointersMaxDistance = Infinity;\n\n  let rangeDragging = false;\n\n  let rangeDraggingStart: number | undefined = undefined;\n  let rangeDraggingDiff: number | undefined = undefined;\n\n  let disabled = false;\n  let keyboardDisabled = false;\n  let generateLabels = false;\n  let animateOnClick: string | undefined = undefined;\n\n  let storage: StorageTypeEnum | undefined = undefined;\n  let storageKey = STORAGE_KEY;\n  let storageInitialized = false;\n\n  let ariaLabel1: string | undefined = undefined;\n  let ariaLabel2: string | undefined = undefined;\n\n  // -------------- EVENTS --------------------\n\n  const onMouseDown = (evt: MouseEvent) => {\n    if(disabled) return;\n\n    if (evt.preventDefault) {\n      evt.preventDefault();\n    }\n\n    onValueChange(evt);\n\n    window.addEventListener('mousemove', onValueChange);\n    window.addEventListener('mouseup', onMouseUp);\n\n    sendMouseDownEvent($component, evt);\n  };\n\n  const onMouseUp = (evt: MouseEvent) => {\n    if(disabled) return;\n\n    rangeDraggingStart = undefined;\n    rangeDraggingDiff = undefined;\n\n    window.removeEventListener('mousemove', onValueChange);\n    window.removeEventListener('mouseup', onValueChange);\n\n    if(animateOnClick){\n      $slider.classList.add(CssClasses.AnimateOnClick);\n    }\n\n    sendMouseUpEvent($component, evt);\n  };\n\n  const getActivePointer = ($target: HTMLElement, percent: number) => {\n    // if only 1 pointer exists --> return it\n    if(!pointer2){\n      if(pointer1.isClicked($target) && animateOnClick){\n        $slider.classList.remove(CssClasses.AnimateOnClick);\n      }\n\n      return pointer1;\n    }\n\n    const panelFillClicked = isPanelFillClicked($target);\n\n    if(rangeDragging){\n      if(panelFillClicked){\n        rangeDraggingStart = percent;\n        rangeDraggingDiff = 0;\n      }\n      else{\n        if(rangeDraggingStart !== undefined){\n          rangeDraggingDiff = percent - rangeDraggingStart;\n          rangeDraggingStart = percent;\n        }\n      }\n    }\n\n    if(!isPanelClicked($target) && !panelFillClicked){\n      // if clicked directly on 1 of the pointers ---> return it\n      if(pointer1.isClicked($target)){\n\n        if(animateOnClick){\n          $slider.classList.remove(CssClasses.AnimateOnClick);\n        }\n\n        return pointer1;\n      }\n\n      const isPointer2Clicked = pointer2?.isClicked($target) ?? false;\n      if(isPointer2Clicked){\n\n        if(animateOnClick){\n          $slider.classList.remove(CssClasses.AnimateOnClick);\n        }\n\n        return pointer2;\n      }\n\n      // if already selected pointer ---> return it\n      if(selectedPointer === pointer1) return pointer1;\n      if(selectedPointer === pointer2) return pointer2;\n    }\n\n    // find the closest pointer and return it\n    const distance1 = Math.abs(percent - pointer1.percent);\n    const distance2 = Math.abs(percent - pointer2.percent);\n    return distance1 <= distance2 ? pointer1 : pointer2;\n  };\n\n  const onValueChange = (evt: MouseEvent | TouchEvent) => {\n\n    // find the percent [0, 100] of the current mouse position in vertical or horizontal slider\n    let percent;\n\n    if(type === TypeEnum.Vertical){\n      const { height: boxHeight, top: boxTop } = $slider.getBoundingClientRect();\n      const mouseY = evt.type.indexOf('mouse') !== -1 ? (evt as MouseEvent).clientY : (evt as TouchEvent).touches[0].clientY;\n      const top = Math.min(Math.max(0, mouseY - boxTop), boxHeight);\n      percent = (top * 100) / boxHeight;\n    }\n    else{\n      const { width: boxWidth, left: boxLeft } = $slider.getBoundingClientRect();\n      const mouseX = evt.type.indexOf('mouse') !== -1 ? (evt as MouseEvent).clientX : (evt as TouchEvent).touches[0].clientX;\n      const left = Math.min(Math.max(0, mouseX - boxLeft), boxWidth);\n      percent = (left * 100) / boxWidth;\n    }\n\n    if(rightToLeft || bottomToTop){\n      percent = 100 - percent;\n    }\n\n    selectedPointer = getActivePointer(evt.target as HTMLElement, percent);\n\n    if(rangeDragging && pointer2 && rangeDraggingDiff !== undefined){\n      // handle range dragging\n      setPositions(1, pointer1.percent + rangeDraggingDiff);\n      setPositions(2, pointer2.percent + rangeDraggingDiff);\n      return;\n    }\n\n    if(selectedPointer === pointer1 && !pointer1.disabled){\n      // update the pointer percent, focus, and update its position\n      setPositions(1, percent);\n    }\n\n    if(selectedPointer === pointer2 && !pointer2?.disabled){\n      // update the pointer percent, focus, and update its position\n      setPositions(2, percent);\n    }\n  };\n\n  const pointerMouseWheel = (evt: WheelEvent) => {\n    if (disabled || document.activeElement !== $component) return;\n\n    if((selectedPointer === pointer1 && pointer1.disabled) ||\n       (selectedPointer === pointer2 && pointer2?.disabled)) return;\n\n    evt.stopPropagation();\n    evt.preventDefault();\n\n    const scrollTop = evt.deltaY < 0;\n    const rightOrBottom = rightToLeft || bottomToTop;\n    const shouldGoPrev = scrollTop ? !rightOrBottom : rightOrBottom;\n\n    if(shouldGoPrev){\n      if(selectedPointer === pointer1){\n        goPrev(1, pointer1.percent);\n      }\n\n      if(selectedPointer === pointer2){\n        goPrev(2, pointer2?.percent);\n      }\n    }\n    else{\n      if(selectedPointer === pointer1){\n        goNext(1, pointer1.percent);\n      }\n\n      if(selectedPointer === pointer2){\n        goNext(2, pointer2?.percent);\n      }\n    }\n  };\n\n  // -------------- Arrows --------------------\n\n  const arrowLeft = (pointerIndex: number) => {\n    if(disabled || keyboardDisabled) return;\n\n    if(type === TypeEnum.Vertical){\n      if(bottomToTop){\n        // jump to the max value\n        setPositions(pointerIndex, 100);\n      }\n      else{\n        // jump to the min value\n        setPositions(pointerIndex, 0);\n      }\n    }\n    else{\n      if(rightToLeft){\n        // go forward\n        if(pointerIndex < 2){\n          goNext(1, pointer1.percent);\n        }\n        else{\n          goNext(2, pointer2?.percent);\n        }\n      }\n      else{\n        // go backwards\n        if(pointerIndex < 2){\n          goPrev(1, pointer1.percent);\n        }\n        else{\n          goPrev(2, pointer2?.percent);\n        }\n      }\n    }\n  };\n\n  const arrowRight = (pointerIndex: number) => {\n    if(disabled || keyboardDisabled) return;\n\n    if(type === TypeEnum.Vertical){\n      if(bottomToTop){\n        // jump to the min value\n        setPositions(pointerIndex, 0);\n      }\n      else{\n        // jump to the max value\n        setPositions(pointerIndex, 100);\n      }\n    }\n    else{\n      if(rightToLeft){\n        // go backward\n        if(pointerIndex < 2){\n          goPrev(1, pointer1.percent);\n        }\n        else{\n          goPrev(2, pointer2?.percent);\n        }\n      }\n      else{\n        // go forward\n        if(pointerIndex < 2){\n          goNext(1, pointer1.percent);\n        }\n        else{\n          goNext(2, pointer2?.percent);\n        }\n      }\n    }\n  };\n\n  const arrowUp = (pointerIndex: number) => {\n    if(disabled || keyboardDisabled) return;\n\n    if(type === TypeEnum.Vertical){\n      if(bottomToTop){\n        // go forwards\n        if(pointerIndex < 2){\n          goNext(1, pointer1.percent);\n        }\n        else{\n          goNext(2, pointer2?.percent);\n        }\n      }\n      else{\n        // go backwards\n        if(pointerIndex < 2){\n          goPrev(1, pointer1.percent);\n        }\n        else{\n          goPrev(2, pointer2?.percent);\n        }\n      }\n    }\n    else{\n      if(rightToLeft){\n        // jump to the max value\n        setPositions(pointerIndex, 100);\n      }\n      else{\n        // jump to the min value\n        setPositions(pointerIndex, 0);\n      }\n    }\n  };\n\n  const arrowDown = (pointerIndex: number) => {\n    if(disabled || keyboardDisabled) return;\n\n    if(type === TypeEnum.Vertical){\n      if(bottomToTop){\n        // go backward\n        if(pointerIndex < 2){\n          goPrev(1, pointer1.percent);\n        }\n        else{\n          goPrev(2, pointer2?.percent);\n        }\n      }\n      else{\n        // go forward\n        if(pointerIndex < 2){\n          goNext(1, pointer1.percent);\n        }\n        else{\n          goNext(2, pointer2?.percent);\n        }\n      }\n    }\n    else{\n      if(rightToLeft){\n        // jump to the min value\n        setPositions(pointerIndex, 0);\n      }\n      else{\n        // jump to the max value\n        setPositions(pointerIndex, 100);\n      }\n    }\n  };\n\n  // -------------- Helpers ------------------------\n\n  const isPanelClicked = ($target: HTMLElement) => {\n    return $target.classList.contains('panel');\n  };\n\n  const isPanelFillClicked = ($target: HTMLElement) => {\n    return $target.classList.contains('panel-fill');\n  };\n\n  const goPrev = (index: number, _percent: number | undefined) => {\n    if(_percent === undefined) return;\n\n    let step = getRelativeStep(_percent);\n    if(step == undefined){\n      step = 1;\n    }\n\n    _percent -= step;\n\n    if(_percent < 0){\n      _percent = 0;\n    }\n\n    setPositions(index, _percent);\n  };\n\n  const goNext = (index: number, _percent: number | undefined) => {\n    if(_percent === undefined) return;\n\n    let step = getRelativeStep(_percent);\n    if(step == undefined){\n      step = 1;\n    }\n\n    _percent += step;\n\n    if(_percent > 100){\n      _percent = 100;\n    }\n\n    setPositions(index, _percent);\n  };\n\n  const addSecondPointer = () => {\n    pointer2 = createPointer2($component, pointer1.$pointer);\n    pointer2?.setCallbacks(arrowLeft, arrowRight, arrowUp, arrowDown);\n    pointer2.disabled = getBoolean($component.getAttribute(AttributesEnum.Pointer2Disabled));\n\n    const ariaLabel2 = $component.getAttribute(AttributesEnum.AriaLabel2);\n    if(ariaLabel2){\n      setAriaLabel(ariaLabel2, 2);\n    }\n\n    setGenerateLabels(false);\n    setGenerateLabels(getBoolean($component.getAttribute(AttributesEnum.GenerateLabels)));\n  };\n\n  const removeSecondPointer = () => {\n    pointer2?.destroy();\n    pointer2 = null;\n    setGenerateLabels(false);\n    setGenerateLabels(getBoolean($component.getAttribute(AttributesEnum.GenerateLabels)));\n  };\n\n  const updateLabels = () => {\n    labels?.updateValues(getTextValue(pointer1.percent), getTextValue(pointer2?.percent), getTextMinMax(min), getTextMinMax(max));\n  };\n\n  // -------------- Getters --------------------\n\n  const getPointer1LeftWall = () => {\n    if(pointersOverlap || !pointer2 || max === min) return undefined;\n    const converted = pointersMaxDistance * 100 / (max - min);\n    return Math.max(0, pointer2.percent - converted);\n  };\n\n  const getPointer1RightWall = () => {\n    if(pointersOverlap || !pointer2 || max === min) return undefined;\n    const converted = 100 * pointersMinDistance / (max - min);\n    return Math.max(0, pointer2.percent - converted);\n  };\n\n  const getPointer2LeftWall = () => {\n    if(pointersOverlap || max === min) return undefined;\n    const converted = pointersMinDistance * 100 / (max - min);\n    return Math.min(pointer1.percent + converted, 100);\n  };\n\n  const getPointer2RightWall = () => {\n    if(pointersOverlap || max === min) return undefined;\n    const converted = pointersMaxDistance * 100 / (max - min);\n    return Math.min(pointer1.percent + converted, 100);\n  };\n\n  const getRelativeStep = (_percent: number) => {\n\n    // round percent to step\n    let _step = typeof step === 'function' ? step(convertRange(0, 100, min, max, _percent), _percent) : step;\n    if(_step !== undefined){\n      _step = convertRange(min, max, 0, 100, _step as number);\n      return _step;\n    }\n\n    return undefined;\n  };\n\n  const getTextValue = (_percent: number | undefined) => {\n    if(_percent === undefined) return undefined;\n\n    const val = convertRange(0, 100, min, max, _percent);\n\n    if(data !== undefined){\n      return data[val];\n    }\n\n    return setDecimalPlaces(val, round);\n  };\n\n  const getMin = () => {\n\n    if(data !== undefined){\n      return data[min];\n    }\n\n    return min;\n  };\n\n  const getMax = () => {\n\n    if(data !== undefined){\n      return data[max];\n    }\n\n    return max;\n  };\n\n  const getTextMinMax = (minOrMax: number) => {\n    if(data !== undefined) return data[minOrMax];\n    return minOrMax;\n  };\n\n  const getPointerMin = (index: number) => {\n    if(index < 2 || pointersOverlap) return getMin();\n    return getTextValue(pointer1.percent) ?? '';\n  };\n\n  const getPointerMax = (index: number) => {\n    if(index >= 2 || pointersOverlap) return getMax();\n\n    if(pointer2){\n      return getTextValue(pointer2?.percent) ?? '';\n    }\n    else{\n      return getMax();\n    }\n  };\n\n  // -------------- Setters --------------------\n\n  const setPositions = (index: number, _percent: number | undefined) => {\n\n    if(_percent === undefined) return;\n\n    // round percent to step\n    const _step = getRelativeStep(_percent);\n    if(_step !== undefined){\n      _percent = roundToStep(_percent, _step);\n    }\n\n    if(index < 2){\n      pointer1.updatePosition(_percent, getPointer1LeftWall(), getPointer1RightWall(), type, rightToLeft, bottomToTop);\n    }\n    else{\n      pointer2?.updatePosition(_percent, getPointer2LeftWall(), getPointer2RightWall(), type, rightToLeft, bottomToTop);\n    }\n\n    panelFill?.updatePosition(type, pointer1.percent, pointer2?.percent, rightToLeft, bottomToTop);\n\n    const value1text = getTextValue(pointer1.percent);\n    const value2text = getTextValue(pointer2?.percent);\n\n    updateLabels();\n\n    if(value1text !== undefined){\n      pointer1.setAttr('aria-valuenow', value1text.toString());\n      pointer1.setAttr('aria-valuetext', value1text.toString());\n    }\n\n    if(value2text !== undefined && pointer2){\n      pointer2.setAttr('aria-valuenow', value2text.toString());\n      pointer2.setAttr('aria-valuetext', value2text.toString());\n    }\n\n    if (storage && storageInitialized) {\n      saveToStorage(storage, storageKey, value1text);\n      if(pointer2){\n        saveToStorage(storage, getStorageKey2(storageKey), value2text);\n      }\n    }\n\n    setAriaMinMax();\n\n    sendChangeEvent($component, getTextValue(pointer1.percent), getTextValue(pointer2?.percent));\n  };\n\n  /**\n   * on component init, min and max should be initialized together\n   * because their validations depend on each other;\n   */\n  const setMinMax = (_min: number | string | undefined | null, _max: number | string | undefined | null) => {\n\n    min = data !== undefined ? 0 : getNumber(_min, MIN_DEFAULT);\n    max = data !== undefined ? data.length - 1 : getNumber(_max, MAX_DEFAULT);\n\n    // perform validations\n    setMin(min);\n    setMax(max);\n  };\n\n  const setAriaMinMax = () => {\n    if(pointer1){\n      pointer1.setAttr('aria-valuemin', (getPointerMin(1) ?? '').toString());\n      pointer1.setAttr('aria-valuemax', (getPointerMax(1) ?? '').toString());\n    }\n\n    if(pointer2){\n      pointer2.setAttr('aria-valuemin', (getPointerMin(2) ?? '').toString());\n      pointer2.setAttr('aria-valuemax', (getPointerMax(2) ?? '').toString());\n    }\n  };\n\n  const setMin = (_min: number | string | undefined | null) => {\n    min = getNumber(_min, MIN_DEFAULT);\n\n    if(min > max){\n      max = min + MAX_DEFAULT;\n    }\n\n    setPositions(1, pointer1.percent);\n    setPositions(2, pointer2?.percent);\n  };\n\n  const setMax = (_max: number | string | undefined | null) => {\n\n    max = getNumber(_max, MAX_DEFAULT);\n\n    if(max < min){\n      max = min + MAX_DEFAULT;\n    }\n\n    setPositions(1, pointer1.percent);\n    setPositions(2, pointer2?.percent);\n  };\n\n  /**\n   * on component init, value, value1, and value2 should be initialized together\n   * because their validations may depend on each other;\n   */\n  const setInitialPointersValues = (_value: string | null, _value1: string | null, _value2: string | null) => {\n\n    // init initial values with pointers overlap ----------\n    pointersOverlap = true;\n    const val1str = _value1 !== null ? _value1 : _value;\n\n    setValue(val1str, 1);\n    setValue(_value2, 2);\n    pointersOverlap = false;\n\n    // add all required validations ------------------------\n    setValue(val1str, 1);\n    setValue(_value2, 2);\n  };\n\n  const setValue = (_val: number | string | undefined | null, index: number) => {\n\n    let val: number;\n\n    // handle the case when we set value2 and pointer2 doesn't exist,\n    // or the case when we remove the existing second pointer\n    if(index === 2){\n      if(_val !== undefined && _val !== null && !pointer2){\n        addSecondPointer();\n      }\n\n      if((_val === undefined || _val === null) && !!pointer2){\n        removeSecondPointer();\n        setRangeDragging(false);\n      }\n    }\n\n    if(data !== undefined){\n\n      val = (_val === undefined || _val === null) ? 0 : findValueIndexInData(_val, data);\n      if(val === -1){\n        val = 0;\n      }\n    }\n    else{\n      val = getNumber(_val, min);\n\n      if(val < min){\n        val = min;\n      }\n\n      if(val > max){\n        val = max;\n      }\n    }\n\n    // scale a range [min,max] to [a,b]\n    const percent = convertRange(min, max, 0, 100, val);\n\n    setPositions(index, percent);\n  };\n\n  const setStep = (_step: TStep) => {\n    if(_step === null || _step === undefined){\n      step = undefined;\n      return;\n    }\n\n    if (typeof _step === 'function') {\n      step = _step;\n      return;\n    }\n\n    if(isNumber(_step)){\n      step = getNumber(_step, 1);\n\n      const diff = Math.abs(max - min);\n      if (step > diff) {\n        step = undefined;\n      }\n      return;\n    }\n\n    step = undefined;\n  };\n\n  const setPointersOverlap = (_pointersOverlap: boolean) => {\n    pointersOverlap = _pointersOverlap;\n    setPositions(1, pointer1.percent);\n  };\n\n  const setPointersMinDistance = (_pointersMinDistance: number) => {\n    if(!isNumber(_pointersMinDistance) || _pointersMinDistance < 0){\n      _pointersMinDistance = 0;\n    }\n    pointersMinDistance = _pointersMinDistance;\n  };\n\n  const setPointersMaxDistance = (_pointersMaxDistance: number) => {\n    if(!isNumber(_pointersMaxDistance) || _pointersMaxDistance < 0){\n      _pointersMaxDistance = Infinity;\n    }\n    pointersMaxDistance = _pointersMaxDistance;\n  };\n\n  const setDisabled = (_disabled: boolean) => {\n    disabled = _disabled;\n    $slider.classList.toggle('disabled', disabled);\n\n    if(disabled){\n      $slider.setAttribute('aria-disabled', 'true');\n    }\n    else{\n      if ($slider.hasAttribute('aria-disabled')) {\n        $slider.removeAttribute('aria-disabled');\n      }\n    }\n  };\n\n  const setData = (_data: TData | string | number | null) => {\n\n    if(_data === null || _data === undefined){\n      data = undefined;\n      return;\n    }\n\n    data = parseData(_data as string);\n    if(data === undefined || data.length <= 0){\n      data = undefined;\n      return;\n    }\n\n    setMin(0);\n    setMax(data.length - 1);\n\n    if(step === undefined){\n      setStep(1);\n    }\n  };\n\n  const setType = (_type: string | null | undefined) => {\n\n    if(typeof _type === 'string'){\n      type = _type.trim().toLowerCase() === TypeEnum.Vertical ? TypeEnum.Vertical : TypeEnum.Horizontal;\n    }\n    else{\n      type = TypeEnum.Horizontal;\n    }\n\n    const $box = $component.shadowRoot?.querySelector('.range-slider-box');\n    if(!$box) return;\n    $box.className = `range-slider-box type-${ type }`;\n\n    // update fill position and pointers positions\n    setPositions(1, pointer1.percent);\n\n    if(pointer2){\n      setPositions(2, pointer2.percent);\n    }\n\n    // update accessibility properties\n    const aria = type === TypeEnum.Vertical ?  'vertical' : 'horizontal';\n    pointer1.setAttr('aria-orientation', aria);\n    pointer2?.setAttr('aria-orientation', aria);\n  };\n\n  const setRightToLeft = (_rightToLeft: boolean) => {\n    rightToLeft = _rightToLeft;\n\n    if(pointer2){\n      // change pointers order\n      if(rightToLeft){\n        // pointer1 should be after pointer2\n        pointer2.$pointer.after(pointer1.$pointer);\n      }\n      else{\n        // pointer2 should be after pointer1\n        pointer1.$pointer.after(pointer2.$pointer);\n      }\n    }\n\n    setPositions(1, pointer1.percent);\n    setPositions(2, pointer2?.percent);\n\n    labels?.setLabelsOrder(rightToLeft || bottomToTop);\n  };\n\n  const setBottomToTop = (_bottomToTop: boolean) => {\n    bottomToTop = _bottomToTop;\n\n    if(pointer2){\n      // change pointers order\n      if(bottomToTop){\n        // pointer1 should be after pointer2\n        pointer2.$pointer.after(pointer1.$pointer);\n      }\n      else{\n        // pointer2 should be after pointer1\n        pointer1.$pointer.after(pointer2.$pointer);\n      }\n    }\n\n    setPositions(1, pointer1.percent);\n    setPositions(2, pointer2?.percent);\n\n    labels?.setLabelsOrder(rightToLeft || bottomToTop);\n  };\n\n  const setGenerateLabels = (_enabled: boolean) => {\n\n    if(!labels) return;\n\n    generateLabels = _enabled;\n\n    labels.setGenLabelsEnabled(\n      _enabled,\n      getTextValue(pointer1.percent),\n      getTextValue(pointer2?.percent),\n      rightToLeft || bottomToTop,\n      getTextMinMax(min),\n      getTextMinMax(max));\n  };\n\n  const setRound = (_round: number) => {\n    round = getNumber(_round, ROUND_DEFAULT);\n\n    if(round < 0){\n      round = ROUND_DEFAULT;\n    }\n\n    updateLabels();\n  };\n\n  const setAnimateOnClick = (_animateOnClick: string | null | undefined) => {\n    if(_animateOnClick === null || _animateOnClick === undefined){\n      animateOnClick = undefined;\n      $slider.style.removeProperty(CSSVariables.AnimateOnClick);\n      $slider.classList.remove(CssClasses.AnimateOnClick);\n    }\n    else{\n      animateOnClick = _animateOnClick;\n      $slider.style.setProperty(CSSVariables.AnimateOnClick, animateOnClick);\n      $slider.classList.add(CssClasses.AnimateOnClick);\n    }\n  };\n\n  const setAriaLabel = (_ariaLabel: string | undefined, index: number) => {\n\n    if(index < 2){\n      ariaLabel1 = _ariaLabel;\n      pointer1.setAttr('aria-label', _ariaLabel);\n    }\n    else{\n      ariaLabel2 = _ariaLabel;\n      pointer2?.setAttr('aria-label', _ariaLabel);\n    }\n  };\n\n  const setRangeDragging = (_rangeDragging: boolean) => {\n    rangeDraggingStart = undefined;\n\n    if(!pointer2){\n      rangeDragging = false;\n      return;\n    }\n\n    rangeDragging = _rangeDragging;\n  };\n\n  // initialization ....\n  (() => {\n\n    // init pointers\n    pointer1.setCallbacks(arrowLeft, arrowRight, arrowUp, arrowDown);\n    pointer2?.setCallbacks(arrowLeft, arrowRight, arrowUp, arrowDown);\n\n    // init panel fill\n    const $fill = $component.shadowRoot?.querySelector('.panel-fill') as HTMLElement;\n    if($fill){\n      panelFill = PanelFill($fill);\n    }\n\n    // init generated and reference labels\n    labels = Labels($component, $slider, updateLabels);\n\n    // init main properties from HTML attributes\n    setType($component.getAttribute(AttributesEnum.Type));\n    setRightToLeft(getBoolean($component.getAttribute(AttributesEnum.RightToLeft)));\n    setBottomToTop(getBoolean($component.getAttribute(AttributesEnum.BottomToTop)));\n\n    setMinMax($component.getAttribute(AttributesEnum.Min), $component.getAttribute(AttributesEnum.Max));\n    setStep($component.getAttribute(AttributesEnum.Step));\n    setData($component.getAttribute(AttributesEnum.Data));\n\n    // set value and render the pointers ----------------------\n    setInitialPointersValues(\n      $component.getAttribute(AttributesEnum.Value),\n      $component.getAttribute(AttributesEnum.Value1),\n      $component.getAttribute(AttributesEnum.Value2)\n    );\n\n    // overlaps MUST be defined after the pointer values\n    setPointersOverlap(getBoolean($component.getAttribute(AttributesEnum.PointersOverlap)));\n    setPointersMinDistance(getNumber($component.getAttribute(AttributesEnum.PointersMinDistance), 0));\n    setPointersMaxDistance(getNumber($component.getAttribute(AttributesEnum.PointersMaxDistance), Infinity));\n    setRangeDragging(getBoolean($component.getAttribute(AttributesEnum.RangeDragging)));\n\n    // additional properties -----------------------------\n    setDisabled(getBoolean($component.getAttribute(AttributesEnum.Disabled)));\n    keyboardDisabled = getBoolean($component.getAttribute(AttributesEnum.KeyboardDisabled))\n    pointer1.disabled = getBoolean($component.getAttribute(AttributesEnum.Pointer1Disabled));\n\n    if(pointer2){\n      pointer2.disabled = getBoolean($component.getAttribute(AttributesEnum.Pointer2Disabled));\n    }\n\n    setGenerateLabels(getBoolean($component.getAttribute(AttributesEnum.GenerateLabels)));\n    labels.referenceLabel1 = $component.getAttribute(AttributesEnum.ValueLabel);\n    labels.referenceLabel2 = $component.getAttribute(AttributesEnum.Value2Label);\n\n    setRound(getNumber($component.getAttribute(AttributesEnum.Round), ROUND_DEFAULT));\n\n    const ariaLabel1 = $component.getAttribute(AttributesEnum.AriaLabel1);\n    if(ariaLabel1 !== null){\n      setAriaLabel(ariaLabel1, 1);\n    }\n\n    const ariaLabel2 = $component.getAttribute(AttributesEnum.AriaLabel2);\n    if(ariaLabel2 !== null && pointer2){\n      setAriaLabel(ariaLabel2, 2);\n    }\n\n    // init styles ---------\n    styles = Styles($component, $slider);\n    setAnimateOnClick($component.getAttribute(AttributesEnum.AnimateOnClick));\n\n    // if the storage is enabled ---> try to restore the values\n    storage = ($component.getAttribute(AttributesEnum.Storage) as StorageTypeEnum) || undefined;\n    storageKey = $component.getAttribute(AttributesEnum.StorageKey) || STORAGE_KEY;\n\n    if (storage){\n      restoreFromStorage(storage, storageKey, setInitialPointersValues);\n      storageInitialized = true;\n    }\n\n    // init slider events -------------------------------------\n    $slider.addEventListener('mousedown', onMouseDown);\n    $slider.addEventListener('mouseup', onMouseUp);\n    $slider.addEventListener('touchmove', onValueChange);\n    $slider.addEventListener('touchstart', onValueChange);\n    document.addEventListener('wheel', pointerMouseWheel, { passive: false });\n  })();\n\n  const destroy = () => {\n    $slider.removeEventListener('mousedown', onMouseDown);\n    $slider.removeEventListener('mouseup', onMouseUp);\n    $slider.removeEventListener('touchmove', onValueChange);\n    $slider.removeEventListener('touchstart', onValueChange);\n    document.removeEventListener('wheel', pointerMouseWheel);\n\n    pointer1.destroy();\n    pointer2?.destroy();\n  };\n\n  return {\n    get pointer1() {\n      return pointer1;\n    },\n\n    get pointer2() {\n      return pointer2;\n    },\n\n    get labels() {\n      return labels;\n    },\n\n    get styles() {\n      return styles;\n    },\n\n    get min() {\n      return getMin();\n    },\n\n    get max() {\n      return getMax();\n    },\n\n    get step() {\n      return step;\n    },\n\n    get pointersOverlap() {\n      return pointersOverlap;\n    },\n\n    set pointersOverlap(_pointersOverlap) {\n      setPointersOverlap(_pointersOverlap);\n    },\n\n    get pointersMinDistance() {\n      return pointersMinDistance;\n    },\n\n    set pointersMinDistance(_pointersMinDistance) {\n      setPointersMinDistance(_pointersMinDistance);\n    },\n\n    get pointersMaxDistance() {\n      return pointersMaxDistance;\n    },\n\n    set pointersMaxDistance(_pointersMaxDistance) {\n      setPointersMaxDistance(_pointersMaxDistance);\n    },\n\n    get disabled() {\n      return disabled;\n    },\n\n    set disabled(_disabled) {\n      setDisabled(_disabled);\n    },\n\n    get data() {\n      return data;\n    },\n\n    get type() {\n      return type;\n    },\n\n    set type(_type) {\n      setType(_type);\n    },\n\n    get rightToLeft() {\n      return rightToLeft;\n    },\n\n    set rightToLeft(_rightToLeft) {\n      setRightToLeft(_rightToLeft);\n    },\n\n    get bottomToTop() {\n      return bottomToTop;\n    },\n\n    set bottomToTop(_bottomToTop) {\n      setBottomToTop(_bottomToTop);\n    },\n\n    get generateLabels() {\n      return generateLabels;\n    },\n\n    set generateLabels(_enabled) {\n      setGenerateLabels(_enabled);\n    },\n\n    get round() {\n      return round;\n    },\n\n    set round(_round) {\n      setRound(_round);\n    },\n\n    get storage(){\n      return storage;\n    },\n\n    set storage(_storage){\n      storage = _storage;\n    },\n\n    get storageKey(){\n      return storageKey;\n    },\n\n    get storageKey2(){\n      return getStorageKey2(storageKey);\n    },\n\n    set storageKey(_storageKey){\n      storageKey = _storageKey;\n    },\n\n    get animateOnClick() {\n      return animateOnClick;\n    },\n\n    set animateOnClick(_animateOnClick) {\n      setAnimateOnClick(_animateOnClick);\n    },\n\n    get keyboardDisabled() {\n      return keyboardDisabled;\n    },\n\n    set keyboardDisabled(_keyboardDisabled){\n      keyboardDisabled = _keyboardDisabled;\n    },\n\n    get ariaLabel1(){\n      return ariaLabel1;\n    },\n\n    set ariaLabel1(_ariaLabel1){\n      setAriaLabel(_ariaLabel1, 1);\n    },\n\n    get ariaLabel2(){\n      return ariaLabel2;\n    },\n\n    set ariaLabel2(_ariaLabel2){\n      setAriaLabel(_ariaLabel2, 2);\n    },\n\n    get rangeDragging() {\n      return rangeDragging;\n    },\n\n    set rangeDragging(_rangeDragging) {\n      setRangeDragging(_rangeDragging);\n    },\n\n    setMin,\n    setMax,\n    setValue,\n    setStep,\n    setData,\n    getTextValue,\n    destroy,\n  };\n};\n\n", "import { AttributesEnum } from '../enums/attributes-enum';\nimport { ISlider, ROUND_DEFAULT } from '../ui/slider';\nimport { getBoolean, getNumber } from './math-provider';\nimport { TypeEnum } from '../enums/type-enum';\nimport { CSSVariables } from '../enums/css-vars-enum';\nimport { StorageTypeEnum } from '../enums/storage-type-enum';\n\nexport const observedAttributes = [\n  AttributesEnum.Value,\n  AttributesEnum.Value1,\n  AttributesEnum.Value2,\n\n  AttributesEnum.PointersOverlap,\n  AttributesEnum.PointersMinDistance,\n  AttributesEnum.PointersMaxDistance,\n\n  AttributesEnum.Data,\n  AttributesEnum.Min,\n  AttributesEnum.Max,\n  AttributesEnum.Step,\n  AttributesEnum.Round,\n  AttributesEnum.Type,\n  AttributesEnum.Theme,\n  AttributesEnum.RightToLeft,\n  AttributesEnum.BottomToTop,\n\n  AttributesEnum.Disabled,\n  AttributesEnum.KeyboardDisabled,\n  AttributesEnum.Pointer1Disabled,\n  AttributesEnum.Pointer2Disabled,\n  AttributesEnum.RangeDragging,\n\n  AttributesEnum.Storage,\n  AttributesEnum.StorageKey,\n\n  AttributesEnum.SliderWidth,\n  AttributesEnum.SliderHeight,\n  AttributesEnum.SliderRadius,\n\n  AttributesEnum.SliderBg,\n  AttributesEnum.SliderBgHover,\n  AttributesEnum.SliderBgFill,\n\n  AttributesEnum.PointerWidth,\n  AttributesEnum.PointerHeight,\n  AttributesEnum.PointerRadius,\n  AttributesEnum.PointerShape,\n\n  AttributesEnum.PointerBg,\n  AttributesEnum.PointerBgHover,\n  AttributesEnum.PointerBgFocus,\n\n  AttributesEnum.PointerShadow,\n  AttributesEnum.PointerShadowHover,\n  AttributesEnum.PointerShadowFocus,\n\n  AttributesEnum.PointerBorder,\n  AttributesEnum.PointerBorderHover,\n  AttributesEnum.PointerBorderFocus,\n\n  AttributesEnum.ValueLabel,\n  AttributesEnum.Value2Label,\n  AttributesEnum.GenerateLabels,\n  AttributesEnum.AriaLabel1,\n  AttributesEnum.AriaLabel2,\n\n  AttributesEnum.AnimateOnClick,\n];\n\nexport const onAttributesChange = (slider: ISlider, attrName: string, _oldValue: string, newValue: string) => {\n  switch (attrName) {\n\n    case AttributesEnum.Min: {\n      slider.setMin(newValue);\n      break;\n    }\n\n    case AttributesEnum.Max: {\n      slider.setMax(newValue);\n      break;\n    }\n\n    case AttributesEnum.Value: {\n      slider.setValue(newValue, 1);\n      break;\n    }\n\n    case AttributesEnum.Value1: {\n      slider.setValue(newValue, 1);\n      break;\n    }\n\n    case AttributesEnum.Value2: {\n      slider.setValue(newValue, 2);\n      break;\n    }\n\n    case AttributesEnum.Step: {\n      slider.setStep(newValue);\n      break;\n    }\n\n    case AttributesEnum.PointersOverlap: {\n      slider.pointersOverlap = getBoolean(newValue);\n      break;\n    }\n\n    case AttributesEnum.PointersMinDistance: {\n      slider.pointersMinDistance = getNumber(newValue, 0);\n      break;\n    }\n\n    case AttributesEnum.RangeDragging: {\n      slider.rangeDragging = getBoolean(newValue);\n      break;\n    }\n\n    case AttributesEnum.PointersMaxDistance: {\n      slider.pointersMaxDistance = getNumber(newValue, Infinity);\n      break;\n    }\n\n    case AttributesEnum.Disabled: {\n      slider.disabled = getBoolean(newValue);\n      break;\n    }\n\n    case AttributesEnum.Storage: {\n      slider.storage = newValue as StorageTypeEnum;\n      break;\n    }\n\n    case AttributesEnum.StorageKey: {\n      slider.storageKey = newValue;\n      break;\n    }\n\n    case AttributesEnum.KeyboardDisabled: {\n      slider.keyboardDisabled = getBoolean(newValue);\n      break;\n    }\n\n    case AttributesEnum.Pointer1Disabled: {\n      slider.pointer1.disabled = getBoolean(newValue);\n      break;\n    }\n\n    case AttributesEnum.Pointer2Disabled: {\n      if(slider.pointer2){\n        slider.pointer2.disabled = getBoolean(newValue);\n      }\n      break;\n    }\n\n    case AttributesEnum.Data: {\n      slider.setData(newValue);\n      break;\n    }\n\n    case AttributesEnum.Type: {\n      slider.type = newValue as TypeEnum;\n      break;\n    }\n\n    case AttributesEnum.RightToLeft: {\n      slider.rightToLeft = getBoolean(newValue);\n      break;\n    }\n\n    case AttributesEnum.BottomToTop: {\n      slider.bottomToTop = getBoolean(newValue);\n      break;\n    }\n\n    case AttributesEnum.GenerateLabels: {\n      slider.generateLabels = getBoolean(newValue);\n      break;\n    }\n\n    case AttributesEnum.ValueLabel: {\n      if(slider.labels){\n        slider.labels.referenceLabel1 = newValue;\n      }\n      break;\n    }\n\n    case AttributesEnum.Value2Label: {\n      if(slider.labels){\n        slider.labels.referenceLabel2 = newValue;\n      }\n      break;\n    }\n\n    case AttributesEnum.Round: {\n      slider.round = getNumber(newValue, ROUND_DEFAULT);\n      break;\n    }\n\n    case AttributesEnum.AriaLabel1: {\n      slider.ariaLabel1 = newValue;\n      break;\n    }\n\n    case AttributesEnum.AriaLabel2: {\n      slider.ariaLabel2 = newValue;\n      break;\n    }\n\n    case AttributesEnum.SliderWidth: {\n      if(slider.styles){\n        slider.styles.setStyle(CSSVariables.SliderWidth, newValue);\n      }\n      break;\n    }\n\n    case AttributesEnum.SliderHeight: {\n      if(slider.styles){\n        slider.styles.setStyle(CSSVariables.SliderHeight, newValue);\n      }\n      break;\n    }\n\n    case AttributesEnum.SliderRadius: {\n      if(slider.styles){\n        slider.styles.setStyle(CSSVariables.SliderRadius, newValue);\n      }\n      break;\n    }\n\n    case AttributesEnum.SliderBg: {\n      if(slider.styles){\n        slider.styles.setStyle(CSSVariables.SliderBg, newValue);\n      }\n      break;\n    }\n\n    case AttributesEnum.SliderBgHover: {\n      if(slider.styles){\n        slider.styles.setStyle(CSSVariables.SliderBgHover, newValue);\n      }\n      break;\n    }\n\n    case AttributesEnum.SliderBgFill: {\n      if(slider.styles){\n        slider.styles.setStyle(CSSVariables.SliderBgFill, newValue);\n      }\n      break;\n    }\n\n    case AttributesEnum.PointerWidth: {\n      if(slider.styles){\n        slider.styles.setStyle(CSSVariables.PointerWidth, newValue);\n      }\n      break;\n    }\n\n    case AttributesEnum.PointerHeight: {\n      if(slider.styles){\n        slider.styles.setStyle(CSSVariables.PointerHeight, newValue);\n      }\n      break;\n    }\n\n    case AttributesEnum.PointerRadius: {\n      if(slider.styles){\n        slider.styles.setStyle(CSSVariables.PointerRadius, newValue);\n      }\n      break;\n    }\n\n    case AttributesEnum.PointerBg: {\n      if(slider.styles){\n        slider.styles.setStyle(CSSVariables.PointerBg, newValue);\n      }\n      break;\n    }\n\n    case AttributesEnum.PointerBgHover: {\n      if(slider.styles){\n        slider.styles.setStyle(CSSVariables.PointerBgHover, newValue);\n      }\n      break;\n    }\n\n    case AttributesEnum.PointerBgFocus: {\n      if(slider.styles){\n        slider.styles.setStyle(CSSVariables.PointerBgFocus, newValue);\n      }\n      break;\n    }\n\n    case AttributesEnum.PointerShadow: {\n      if(slider.styles){\n        slider.styles.setStyle(CSSVariables.PointerShadow, newValue);\n      }\n      break;\n    }\n\n    case AttributesEnum.PointerShadowHover: {\n      if(slider.styles){\n        slider.styles.setStyle(CSSVariables.PointerShadowHover, newValue);\n      }\n      break;\n    }\n\n    case AttributesEnum.PointerShadowFocus: {\n      if(slider.styles){\n        slider.styles.setStyle(CSSVariables.PointerShadowFocus, newValue);\n      }\n      break;\n    }\n\n    case AttributesEnum.PointerBorder: {\n      if(slider.styles){\n        slider.styles.setStyle(CSSVariables.PointerBorder, newValue);\n      }\n      break;\n    }\n\n    case AttributesEnum.PointerBorderHover: {\n      if(slider.styles){\n        slider.styles.setStyle(CSSVariables.PointerBorderHover, newValue);\n      }\n      break;\n    }\n\n    case AttributesEnum.PointerBorderFocus: {\n      if(slider.styles){\n        slider.styles.setStyle(CSSVariables.PointerBorderFocus, newValue);\n      }\n      break;\n    }\n\n    case AttributesEnum.Theme: {\n      if(slider.styles){\n        slider.styles.theme = newValue;\n      }\n      break;\n    }\n\n    case AttributesEnum.PointerShape: {\n      if(slider.styles){\n        slider.styles.pointerShape = newValue;\n      }\n      break;\n    }\n\n    case AttributesEnum.AnimateOnClick: {\n      slider.animateOnClick = newValue;\n      break;\n    }\n  }\n};", "import mainTemplate from '../templates/main.html.js'; // esbuild custom loader\nimport styles from './styles.pcss';\nimport { observedAttributes, onAttributesChange } from '../domain/attributes-provider';\nimport { ISlider, ROUND_DEFAULT, Slider } from '../ui/slider';\nimport { IPointer, Pointer } from '../ui/pointer';\nimport { TData, TStep } from '../types';\nimport { getBoolean, getNumber, isNumber } from '../domain/math-provider';\nimport { TypeEnum } from '../enums/type-enum';\nimport { StorageTypeEnum } from '../enums/storage-type-enum';\nimport { STORAGE_KEY } from '../dal/storage-provider';\nimport { CSSVariables } from '../enums/css-vars-enum';\nimport { createPointer2 } from '../domain/common-provider';\n\n/**\n * Usage: <toolcool-range-slider value=\"0\" min=\"0\" max=\"100\"></toolcool-range-slider>\n * Documentation: https://github.com/toolcool-org/toolcool-range-slider\n */\nclass RangeSlider extends HTMLElement {\n\n  /**\n   * the attributes list that are observed by web component;\n   * if attribute changes ---> the web component will update accordingly\n   */\n  static get observedAttributes() {\n    return observedAttributes;\n  }\n\n  public slider: ISlider | undefined;\n\n  // -------------- APIs --------------------\n\n  public set step(_step: TStep) {\n    if(this.slider){\n      this.slider.setStep(_step);\n    }\n  }\n\n  public get step() {\n    return this.slider?.step;\n  }\n\n  public set disabled(_disabled: boolean) {\n    if(this.slider){\n      this.slider.disabled = _disabled;\n    }\n  }\n\n  public get disabled() {\n    return this.slider?.disabled ?? false;\n  }\n\n  public set value(_value: string | number | undefined) {\n    this.slider?.setValue(_value, 1);\n  }\n\n  public get value() {\n    if(!this.slider) return undefined;\n    const val = this.slider.getTextValue(this.slider.pointer1.percent);\n    return isNumber(val) ? getNumber(val, val) : val;\n  }\n\n  /**\n   * value1 is alias for value\n   */\n  public set value1(val: string | number | undefined) {\n    this.value = val;\n  }\n\n  /**\n   * value1 is alias for value\n   */\n  public get value1() {\n    return this.value;\n  }\n\n  public set value2(_value2: string | number | undefined) {\n    this.slider?.setValue(_value2, 2);\n  }\n\n  public get value2() {\n    if(!this.slider || !this.slider.pointer2) return undefined;\n    const val = this.slider.getTextValue(this.slider.pointer2.percent);\n    return isNumber(val) ? getNumber(val, val) : val;\n  }\n\n  public set data(_data: TData) {\n    this.slider?.setData(_data);\n  }\n\n  public get data() {\n    return this.slider?.data;\n  }\n\n  public set min(_min: number | string | undefined | null) {\n    this.slider?.setMin(_min);\n  }\n\n  public get min() {\n    return this.slider?.min;\n  }\n\n  public set max(_max: number | string | undefined | null) {\n    this.slider?.setMax(_max);\n  }\n\n  public get max() {\n    return this.slider?.max;\n  }\n\n  public set round(_round: number) {\n    if(!this.slider) return;\n    this.slider.round = _round;\n  }\n\n  public get round() {\n    return this.slider?.round ?? ROUND_DEFAULT;\n  }\n\n  public set type(_type: TypeEnum | undefined) {\n    if(!this.slider) return;\n    this.slider.type = _type ?? TypeEnum.Horizontal;\n  }\n\n  public get type() {\n    return this.slider?.type || TypeEnum.Horizontal;\n  }\n\n  public set pointersOverlap(_pointersOverlap: boolean) {\n    if(!this.slider) return;\n    this.slider.pointersOverlap = _pointersOverlap;\n  }\n\n  public get pointersOverlap() {\n    return this.slider?.pointersOverlap ?? false;\n  }\n\n  public set pointersMinDistance(_pointersMinDistance: number) {\n    if(!this.slider) return;\n    this.slider.pointersMinDistance = _pointersMinDistance;\n  }\n\n  public get pointersMinDistance() {\n    return this.slider?.pointersMinDistance ?? 0;\n  }\n\n  public set pointersMaxDistance(_pointersMaxDistance: number) {\n    if(!this.slider) return;\n    this.slider.pointersMaxDistance = _pointersMaxDistance;\n  }\n\n  public get pointersMaxDistance() {\n    return this.slider?.pointersMaxDistance ?? Infinity;\n  }\n\n  public set theme(_theme: string | null) {\n    if(!this.slider || !this.slider.styles) return;\n    this.slider.styles.theme = _theme;\n  }\n\n  public get theme() {\n    return this.slider?.styles?.theme ?? null;\n  }\n\n  public set rtl(_rtl: boolean) {\n    if(!this.slider) return;\n    this.slider.rightToLeft = _rtl;\n  }\n\n  public get rtl() {\n    return this.slider?.rightToLeft ?? false;\n  }\n\n  public set btt(_btt: boolean) {\n    if(!this.slider) return;\n    this.slider.bottomToTop = _btt;\n  }\n\n  public get btt() {\n    return this.slider?.bottomToTop ?? false;\n  }\n\n  public set keyboardDisabled(_keyboardDisabled: boolean) {\n    if(!this.slider) return;\n    this.slider.keyboardDisabled = _keyboardDisabled;\n  }\n\n  public get keyboardDisabled() {\n    return this.slider?.keyboardDisabled ?? false;\n  }\n\n  public set animateOnClick(_animateOnClick: string | undefined) {\n    if(!this.slider) return;\n    this.slider.animateOnClick = _animateOnClick;\n  }\n\n  public get animateOnClick() {\n    return this.slider?.animateOnClick;\n  }\n\n  public set storage(_storage: StorageTypeEnum | undefined) {\n    if(!this.slider) return;\n    this.slider.storage = _storage;\n  }\n\n  public get storage() {\n    return this.slider?.storage;\n  }\n\n  public set storageKey(_storageKey: string) {\n    if(!this.slider) return;\n    this.slider.storageKey = _storageKey;\n  }\n\n  public get storageKey() {\n    return this.slider?.storageKey ?? STORAGE_KEY;\n  }\n\n  public get storageKey2() {\n    return this.slider?.storageKey2;\n  }\n\n  public set generateLabels(_generateLabels: boolean) {\n    if(!this.slider) return;\n    this.slider.generateLabels = _generateLabels;\n  }\n\n  public get generateLabels() {\n    return this.slider?.generateLabels ?? false;\n  }\n\n  public set sliderWidth(_sliderWidth: string | undefined) {\n    if(!this.slider || !this.slider.styles) return;\n    this.slider.styles.setStyle(CSSVariables.SliderWidth, _sliderWidth);\n  }\n\n  public get sliderWidth() {\n    return this.slider?.styles?.getStyle(CSSVariables.SliderWidth);\n  }\n\n  public set sliderHeight(_sliderHeight: string | undefined) {\n    if(!this.slider || !this.slider.styles) return;\n    this.slider.styles.setStyle(CSSVariables.SliderHeight, _sliderHeight);\n  }\n\n  public get sliderHeight() {\n    return this.slider?.styles?.getStyle(CSSVariables.SliderHeight);\n  }\n\n  public set sliderRadius(_sliderRadius: string | undefined) {\n    if(!this.slider || !this.slider.styles) return;\n    this.slider.styles.setStyle(CSSVariables.SliderRadius, _sliderRadius);\n  }\n\n  public get sliderRadius() {\n    return this.slider?.styles?.getStyle(CSSVariables.SliderRadius);\n  }\n\n  public set sliderBg(_sliderBg: string | undefined) {\n    if(!this.slider || !this.slider.styles) return;\n    this.slider.styles.setStyle(CSSVariables.SliderBg, _sliderBg);\n  }\n\n  public get sliderBg() {\n    return this.slider?.styles?.getStyle(CSSVariables.SliderBg);\n  }\n\n  public set sliderBgHover(_sliderBgHover: string | undefined) {\n    if(!this.slider || !this.slider.styles) return;\n    this.slider.styles.setStyle(CSSVariables.SliderBgHover, _sliderBgHover);\n  }\n\n  public get sliderBgHover() {\n    return this.slider?.styles?.getStyle(CSSVariables.SliderBgHover);\n  }\n\n  public set sliderBgFill(_sliderBgFill: string | undefined) {\n    if(!this.slider || !this.slider.styles) return;\n    this.slider.styles.setStyle(CSSVariables.SliderBgFill, _sliderBgFill);\n  }\n\n  public get sliderBgFill() {\n    return this.slider?.styles?.getStyle(CSSVariables.SliderBgFill);\n  }\n\n  public set pointerWidth(_pointerWidth: string | undefined) {\n    if(!this.slider || !this.slider.styles) return;\n    this.slider.styles.setStyle(CSSVariables.PointerWidth, _pointerWidth);\n  }\n\n  public get pointerWidth() {\n    return this.slider?.styles?.getStyle(CSSVariables.PointerWidth);\n  }\n\n  public set pointerHeight(_pointerHeight: string | undefined) {\n    if(!this.slider || !this.slider.styles) return;\n    this.slider.styles.setStyle(CSSVariables.PointerHeight, _pointerHeight);\n  }\n\n  public get pointerHeight() {\n    return this.slider?.styles?.getStyle(CSSVariables.PointerHeight);\n  }\n\n  public set pointerRadius(_pointerRadius: string | undefined) {\n    if(!this.slider || !this.slider.styles) return;\n    this.slider.styles.setStyle(CSSVariables.PointerRadius, _pointerRadius);\n  }\n\n  public get pointerRadius() {\n    return this.slider?.styles?.getStyle(CSSVariables.PointerRadius);\n  }\n\n  public set pointerShape(_pointerShape: string | null) {\n    if(!this.slider || !this.slider.styles) return;\n    this.slider.styles.pointerShape = _pointerShape;\n  }\n\n  public get pointerShape() {\n    return this.slider?.styles?.pointerShape ?? null;\n  }\n\n  public set pointerBg(_pointerBg: string | undefined) {\n    if(!this.slider || !this.slider.styles) return;\n    this.slider.styles.setStyle(CSSVariables.PointerBg, _pointerBg);\n  }\n\n  public get pointerBg() {\n    return this.slider?.styles?.getStyle(CSSVariables.PointerBg);\n  }\n\n  public set pointerBgHover(_pointerBgHover: string | undefined) {\n    if(!this.slider || !this.slider.styles) return;\n    this.slider.styles.setStyle(CSSVariables.PointerBgHover, _pointerBgHover);\n  }\n\n  public get pointerBgHover() {\n    return this.slider?.styles?.getStyle(CSSVariables.PointerBgHover);\n  }\n\n  public set pointerBgFocus(_pointerBgFocus: string | undefined) {\n    if(!this.slider || !this.slider.styles) return;\n    this.slider.styles.setStyle(CSSVariables.PointerBgFocus, _pointerBgFocus);\n  }\n\n  public get pointerBgFocus() {\n    return this.slider?.styles?.getStyle(CSSVariables.PointerBgFocus);\n  }\n\n  public set pointerShadow(_pointerShadow: string | undefined) {\n    if(!this.slider || !this.slider.styles) return;\n    this.slider.styles.setStyle(CSSVariables.PointerShadow, _pointerShadow);\n  }\n\n  public get pointerShadow() {\n    return this.slider?.styles?.getStyle(CSSVariables.PointerShadow);\n  }\n\n  public set pointerShadowHover(_pointerShadowHover: string | undefined) {\n    if(!this.slider || !this.slider.styles) return;\n    this.slider.styles.setStyle(CSSVariables.PointerShadowHover, _pointerShadowHover);\n  }\n\n  public get pointerShadowHover() {\n    return this.slider?.styles?.getStyle(CSSVariables.PointerShadowHover);\n  }\n\n  public set pointerShadowFocus(_pointerShadowFocus: string | undefined) {\n    if(!this.slider || !this.slider.styles) return;\n    this.slider.styles.setStyle(CSSVariables.PointerShadowFocus, _pointerShadowFocus);\n  }\n\n  public get pointerShadowFocus() {\n    return this.slider?.styles?.getStyle(CSSVariables.PointerShadowFocus);\n  }\n\n  public set pointerBorder(_pointerBorder: string | undefined) {\n    if(!this.slider || !this.slider.styles) return;\n    this.slider.styles.setStyle(CSSVariables.PointerBorder, _pointerBorder);\n  }\n\n  public get pointerBorder() {\n    return this.slider?.styles?.getStyle(CSSVariables.PointerBorder);\n  }\n\n  public set pointerBorderHover(_pointerBorderHover: string | undefined) {\n    if(!this.slider || !this.slider.styles) return;\n    this.slider.styles.setStyle(CSSVariables.PointerBorderHover, _pointerBorderHover);\n  }\n\n  public get pointerBorderHover() {\n    return this.slider?.styles?.getStyle(CSSVariables.PointerBorderHover);\n  }\n\n  public set pointerBorderFocus(_pointerBorderFocus: string | undefined) {\n    if(!this.slider || !this.slider.styles) return;\n    this.slider.styles.setStyle(CSSVariables.PointerBorderFocus, _pointerBorderFocus);\n  }\n\n  public get pointerBorderFocus() {\n    return this.slider?.styles?.getStyle(CSSVariables.PointerBorderFocus);\n  }\n\n  public set pointer1Disabled(_pointer1Disabled: boolean) {\n    if(!this.slider) return;\n    this.slider.pointer1.disabled = _pointer1Disabled;\n  }\n\n  public get pointer1Disabled() {\n    return this.slider?.pointer1.disabled ?? false;\n  }\n\n  public set pointer2Disabled(_pointer2Disabled: boolean) {\n    if(!this.slider || !this.slider.pointer2) return;\n    this.slider.pointer2.disabled = _pointer2Disabled;\n  }\n\n  public get pointer2Disabled() {\n    return this.slider?.pointer2?.disabled ?? false;\n  }\n\n  public set valueLabel(_valueLabel: string | undefined) {\n    if(!this.slider || !this.slider.labels) return;\n    this.slider.labels.referenceLabel1 = _valueLabel ?? null;\n  }\n\n  public get valueLabel() {\n    return this.slider?.labels?.referenceLabel1 ?? '';\n  }\n\n  public set value2Label(_value2Label: string | undefined) {\n    if(!this.slider || !this.slider.labels) return;\n    this.slider.labels.referenceLabel2 = _value2Label ?? null;\n  }\n\n  public get value2Label() {\n    return this.slider?.labels?.referenceLabel2 ?? '';\n  }\n\n  public set ariaLabel1(_ariaLabel1: string | undefined) {\n    if(!this.slider) return;\n    this.slider.ariaLabel1 = _ariaLabel1;\n  }\n\n  public get ariaLabel1() {\n    return this.slider?.pointer1.getAttr('aria-label') ?? undefined;\n  }\n\n  public set ariaLabel2(_ariaLabel2: string | undefined) {\n    if(!this.slider) return;\n    this.slider.ariaLabel2 = _ariaLabel2;\n  }\n\n  public get ariaLabel2() {\n    return this.slider?.pointer2?.getAttr('aria-label') ?? undefined;\n  }\n\n  public get rangeDragging(){\n    return this.slider?.rangeDragging ?? false;\n  }\n\n  public set rangeDragging(_rangeDragging: boolean | string | undefined | null) {\n    if(this.slider){\n      this.slider.rangeDragging = getBoolean(_rangeDragging);\n    }\n  }\n\n  // ----------------------------------------------\n\n  constructor() {\n    super();\n\n    this.attachShadow({\n      mode: 'open', // 'closed', 'open',\n    });\n  }\n\n  /**\n   * when the custom element connected to DOM\n   */\n  connectedCallback() {\n    if (!this.shadowRoot) return;\n    this.shadowRoot.innerHTML = mainTemplate(styles);\n\n    // init first pointer\n    const $pointer1 = this.shadowRoot?.querySelector('.pointer') as HTMLElement;\n    const pointer1 = $pointer1 ? Pointer(this, $pointer1, 1) : null;\n    if(!pointer1) return;\n\n    // init second pointer\n    let pointer2: IPointer | null = null;\n    if(this.getAttribute('value2') !== null){\n      pointer2 = createPointer2(this, $pointer1);\n    }\n\n    // init the slider\n    const $slider = this.shadowRoot?.getElementById('range-slider') as HTMLElement;\n    if(!$slider) return;\n    this.slider = Slider(this, $slider, pointer1, pointer2);\n  }\n\n  /**\n   * when the custom element disconnected from DOM\n   */\n  disconnectedCallback() {\n    if(!this.slider) return\n\n    this.slider.destroy();\n  }\n\n  attributeChangedCallback(attrName: string, oldValue: string, newValue: string) {\n    if(!this.slider) return;\n\n    onAttributesChange(this.slider, attrName, oldValue, newValue);\n  }\n}\n\nexport default RangeSlider;", "import RangeSlider from './app/range-slider';\n\n// register web components\nif (!customElements.get('toolcool-range-slider')) {\n  customElements.define('toolcool-range-slider', RangeSlider);\n}\n"],
  "mappings": ";;;;;;;+LAAA,IAAOA,GAASC,GAAoB,YAAYA,iqSCIzC,IAAMC,EAAe,CAACC,EAAaC,EAAaC,EAAWC,EAAWC,IAAc,CACzF,IAAMC,EAAQJ,EAAMD,EACpB,OAAGK,IAAS,EAAUH,GACbC,EAAID,IAAME,EAAIJ,GAAQK,EAAOH,CACxC,EAGaI,EAAYC,GAChB,CAAC,MAAM,WAAWA,CAAK,CAAC,GAAK,SAASA,CAAK,EAKvCC,EAAY,CAACD,EAAYE,IAC7BH,EAASC,CAAK,EAAI,OAAOA,CAAK,EAAIE,EAO9BC,GAAc,CAACC,EAAaC,IAChCA,IAAS,EAAI,EAAI,KAAK,MAAMD,EAAMC,CAAI,EAAIA,EAOtCC,GAAmB,CAACF,EAAaG,EAAgB,MAAa,CACzE,GAAIA,IAAkB,IAAU,OAAOH,EAEvC,IAAMI,EAAQC,GAAA,GAAMF,GACpB,OAAO,KAAK,MAAMH,EAAMI,CAAK,EAAIA,CACnC,EAEaE,EAAcC,GACtBA,GAAQ,KAAkC,GAC1C,OAAOA,GAAQ,UAAkBA,EAC7BA,EAAI,KAAK,EAAE,YAAY,IAAM,OCzC/B,IAAMC,GAAaC,GAA2E,CACnG,GAAgCA,GAAe,KAAM,OAErD,GAAG,MAAM,QAAQA,CAAU,EAAG,OAAOA,EAGrC,GADeA,EAAW,KAAK,IAChB,GAAI,OAEnB,IAAMC,EAAQD,EAAW,MAAM,GAAG,EAC5BE,EAAiB,CAAC,EACpBC,EAAsB,GAE1B,QAASC,EAAI,EAAGA,EAAIH,EAAM,OAAQG,IAAK,CACrC,IAAMC,EAAOJ,EAAMG,GAAG,KAAK,EACvBC,IAAS,KAEbH,EAAK,KAAKG,CAAI,EAETC,EAASD,CAAI,IAChBF,EAAsB,IAE1B,CAEA,OAAKA,EAEED,EAAK,IAAKK,GAAS,OAAOA,CAAI,CAAC,EAFLL,CAGnC,EAEaM,GAAuB,CAACC,EAAsBC,IAClDA,EAAOA,EAAK,UAAWH,GAASA,IAASE,GAAOF,EAAK,SAAS,EAAE,KAAK,IAAME,EAAI,SAAS,EAAE,KAAK,CAAC,EAAI,GCzBtG,IAAME,GAAaC,IAwEjB,CACL,eAvEqB,CAACC,EAAgBC,EAAkBC,EAA8BC,EAAsBC,IAAyB,CAEjIJ,gBACFD,EAAM,MAAM,eAAe,OAAO,EAClCA,EAAM,MAAM,eAAe,OAAO,EAClCA,EAAM,MAAM,eAAe,MAAM,EAE7BG,IAAa,OACfH,EAAM,MAAM,OAAS,GAAG,KAAK,IAAIE,EAAWC,CAAQ,KAGpDH,EAAM,MAAM,OAAS,GAAIE,KAGvBG,GACFL,EAAM,MAAM,OAAS,KAEjBG,IAAa,OACfH,EAAM,MAAM,IAAM,GAAG,KAAK,IAAI,IAAMG,EAAU,IAAMD,CAAQ,KAG5DF,EAAM,MAAM,IAAM,SAIpBA,EAAM,MAAM,OAAS,OAEjBG,IAAa,OACfH,EAAM,MAAM,IAAM,GAAG,KAAK,IAAIE,EAAUC,CAAQ,KAGhDH,EAAM,MAAM,IAAM,QAKtBA,EAAM,MAAM,eAAe,QAAQ,EACnCA,EAAM,MAAM,eAAe,KAAK,EAChCA,EAAM,MAAM,eAAe,QAAQ,EAE/BG,IAAa,OACfH,EAAM,MAAM,MAAQ,GAAI,KAAK,IAAIE,EAAWC,CAAQ,KAGpDH,EAAM,MAAM,MAAQ,GAAIE,KAGtBE,GACFJ,EAAM,MAAM,MAAQ,KAEhBG,IAAa,OACfH,EAAM,MAAM,KAAO,GAAI,KAAK,IAAI,IAAMG,EAAU,IAAMD,CAAQ,KAG9DF,EAAM,MAAM,KAAO,SAIrBA,EAAM,MAAM,MAAQ,OAEhBG,IAAa,OACfH,EAAM,MAAM,KAAO,GAAI,KAAK,IAAIE,EAAUC,CAAQ,KAGlDH,EAAM,MAAM,KAAO,MAI3B,CAIA,GC1DF,IAAMM,GAAyB,cACzBC,GAAyB,eACzBC,GAAsB,YACtBC,GAAsB,YAEfC,GAAS,CAACC,EAAyBC,EAAsBC,IAA8C,CAElH,IAAIC,EACAC,EAAyB,GAEzBC,EAAsC,KACtCC,EAAsC,KACtCC,EAAmC,KACnCC,EAAmC,KAEnCC,EAAiC,KACjCC,EAAiC,KACjCC,EAAuC,KACvCC,EAAuC,KAIrCC,EAAeC,GAAqB,CACxC,IAAMC,EAAS,SAAS,cAAc,OAAO,EAC7C,OAAAA,EAAO,UAAU,IAAID,CAAQ,EAC7BC,EAAO,aAAa,MAAO,cAAc,EAClCA,CACT,EAEMC,EAAgBF,GACbd,EAAW,cAAc,UAAWc,KAAa,EAGpDG,EAAgBH,GAAqB,CAvD7C,IAAAI,EAwDI,OAAOA,EAAAlB,EAAW,aAAX,YAAAkB,EAAuB,cAAc,cAAeJ,MAC7D,EAEMK,EAAoBL,GAAqB,CAC7C,IAAMM,EAAQJ,EAAaF,CAAQ,EAEnC,OAAIM,EACGA,EAAM,cAAc,IAAKN,GAAW,EADzB,IAEpB,EAEMO,EAAuB,CAC3BC,EACAC,EACAC,EACAC,EACAC,IACG,CAGHrB,EAAkBc,EAAiBxB,EAAsB,EACrDU,IACFA,EAAkBQ,EAAYlB,EAAsB,EACpDQ,GAAA,MAAAA,EAAY,OAAOE,IAIlBkB,IAAe,SAChBjB,EAAkBa,EAAiBvB,EAAsB,EACrDU,IACFA,EAAkBO,EAAYjB,EAAsB,EACpDO,GAAA,MAAAA,EAAY,OAAOG,KAIvBC,EAAeY,EAAiBtB,EAAmB,EAC/CU,IACFA,EAAeM,EAAYhB,EAAmB,EAC9CI,GAAA,MAAAA,EAAS,MAAMM,IAGjBC,EAAeW,EAAiBrB,EAAmB,EAC/CU,IACFA,EAAeK,EAAYf,EAAmB,EAC9CG,GAAA,MAAAA,EAAS,MAAMO,IAGjBmB,EAAeH,CAAQ,EACvBI,EAAaN,EAAYC,EAAYE,EAAKC,CAAG,CAC/C,EAEMG,EAAwB,IAAM,CAC/BxB,IACDA,EAAgB,OAAO,EACvBA,EAAkB,MAGjBC,IACDA,EAAgB,OAAO,EACvBA,EAAkB,MAGjBE,IACDA,EAAa,OAAO,EACpBA,EAAe,MAGdD,IACDA,EAAa,OAAO,EACpBA,EAAe,KAEnB,EAIMuB,EAAsB,CAC1BC,EACAT,EACAC,EACAC,EACAC,EACAC,IAAqC,CAErCtB,EAAyB2B,EAEtBA,EACDV,EAAqBC,EAAYC,EAAYC,EAAUC,EAAKC,CAAG,EAG/DG,EAAsB,CAE1B,EAEMF,EAAkBH,GAAsB,CAE5C,IAAMQ,EAAgBhB,EAAarB,EAAsB,IAAM,KACzDsC,EAAgBjB,EAAapB,EAAsB,IAAM,KACzDsC,EAAalB,EAAanB,EAAmB,IAAM,KACnDsC,EAAanB,EAAalB,EAAmB,IAAM,KAEnDsC,EAAcnB,EAAatB,EAAsB,EACjD0C,EAAcpB,EAAarB,EAAsB,EACjD0C,EAAWrB,EAAapB,EAAmB,EAC3C0C,EAAWtB,EAAanB,EAAmB,EAE9C0B,GAEEnB,GAAmBC,GAAmB,CAAC0B,GAAiB,CAACC,EAC1D3B,EAAgB,MAAMD,CAAe,EAGlC+B,GAAeC,GAChBA,EAAY,MAAMD,CAAW,EAI9B7B,IACE2B,GAAcI,EACfrC,EAAQ,MAAMqC,CAAQ,EAGtBrC,EAAQ,MAAMM,CAAY,GAI3BC,IACE2B,GAAcI,EACftC,EAAQ,OAAOsC,CAAQ,EAGvBtC,EAAQ,OAAOO,CAAY,KAM5BD,IACE2B,GAAcI,EACfrC,EAAQ,OAAOqC,CAAQ,EAGvBrC,EAAQ,OAAOM,CAAY,GAI5BC,IACE2B,GAAcI,EACftC,EAAQ,MAAMsC,CAAQ,EAGtBtC,EAAQ,MAAMO,CAAY,GAI3BH,GAAmBC,GAAmB,CAAC0B,GAAiB,CAACC,EAC1D5B,EAAgB,MAAMC,CAAe,EAGlC8B,GAAeC,GAChBD,EAAY,MAAMC,CAAW,EAIrC,EAEMT,EAAe,CACnBN,EACAC,EACAE,EACAC,IAAqC,CAElCrB,GAAmBiB,IAAe,SACnCjB,EAAgB,YAAciB,EAAW,SAAS,GAGjDhB,GAAmBiB,IAAe,SACnCjB,EAAgB,YAAciB,EAAW,SAAS,GAGjDhB,IACDA,EAAa,YAAckB,IAAQ,OAAY,GAAKA,EAAI,SAAS,GAGhEjB,IACDA,EAAa,YAAckB,IAAQ,OAAY,GAAKA,EAAI,SAAS,GAGhEf,GAAoBW,IAAe,SACpCX,EAAiB,YAAcW,EAAW,SAAS,GAGlDV,GAAoBW,IAAe,SACpCX,EAAiB,YAAcW,EAAW,SAAS,EAEvD,EAEMiB,EAAsBC,GAAoC,CAC9DhC,EAAkBgC,EAClB9B,EAAmB8B,EAAmB,SAAS,cAAcA,CAAgB,EAAI,KACjFvC,EAAoB,CACtB,EAEMwC,EAAsBC,GAAoC,CAC9DjC,EAAkBiC,EAClB/B,EAAmB+B,EAAmB,SAAS,cAAcA,CAAgB,EAAI,KACjFzC,EAAoB,CACtB,EAGA,OAAC,IAAM,CAxQT,IAAAgB,EAyQIf,GAAae,EAAAlB,EAAW,aAAX,YAAAkB,EAAuB,cAAc,cACpD,GAAG,EAEI,CACL,IAAI,kBAAmB,CACrB,OAAOd,CACT,EAEA,oBAAA0B,EACA,aAAAF,EACA,eAAAD,EAEA,IAAI,iBAAkB,CACpB,OAAOlB,CACT,EAEA,IAAI,gBAAgBgC,EAAkB,CACpCD,EAAmBC,CAAgB,CACrC,EAEA,IAAI,iBAAkB,CACpB,OAAO/B,CACT,EAEA,IAAI,gBAAgBiC,EAAkB,CACpCD,EAAmBC,CAAgB,CACrC,CACF,CACF,ECnSO,IAAMC,GAA0B,CAACC,EAAyBC,IAA0B,CACzFD,EAAW,cACT,IAAI,YAAY,mBAAoB,CAClC,OAAQ,CACN,SAAUC,CACZ,CACF,CAAC,CACH,CACF,EAEaC,GAAqB,CAACF,EAAyBG,IAAoB,CAC9EH,EAAW,cACT,IAAI,YAAY,cAAe,CAC7B,OAAQ,CACN,YAAaG,CACf,CACF,CAAC,CACH,CACF,EAEaC,GAAmB,CAACJ,EAAyBG,IAAoB,CAC5EH,EAAW,cACT,IAAI,YAAY,YAAa,CAC3B,OAAQ,CACN,YAAaG,CACf,CACF,CAAC,CACH,CACF,EAEaE,GAAqB,CAACL,EAAyBG,IAAuB,CACjFH,EAAW,cACT,IAAI,YAAY,YAAa,CAC3B,OAAQ,CACN,YAAaG,CACf,CACF,CAAC,CACH,CACF,EAOaG,GAAkB,CAACN,EAAyBO,EAAqCC,IAAwC,CACpI,IAAMC,EAA6B,CACjC,MAAOC,EAASH,CAAM,EAAII,EAAUJ,EAAQA,CAAM,EAAIA,EACtD,OAAQG,EAASF,CAAM,EAAIG,EAAUH,EAAQA,CAAM,EAAIA,CACzD,EAEAR,EAAW,cACT,IAAI,YAAY,SAAU,CACxB,OAAAS,CACF,CAAC,CACH,CACF,EC9CO,IAAMG,GAAS,CAACC,EAAyBC,IAAmC,CAEjF,IAAIC,EAAuB,KACvBC,EAA8B,KAC5BC,EAAiC,IAAI,IAIrCC,EAA0BC,GAAmB,CACjD,IAAMC,EAAY,CAAC,GAAGN,EAAQ,SAAS,EACvC,QAAUO,KAAaD,EAClBC,EAAU,WAAWF,CAAM,GAC5BL,EAAQ,UAAU,OAAOO,CAAS,CAGxC,EAEMC,EAAYC,GAAuB,CACvCR,EAAQQ,EACL,OAAOA,GAAQ,SAChBT,EAAQ,UAAU,IAAI,SAAUS,GAAM,EAGtCL,EAAuB,QAAQ,CAEnC,EAEMM,EAAmBD,GAAuB,CAC9CP,EAAeO,EACZ,OAAOA,GAAQ,SAChBT,EAAQ,UAAU,IAAI,QAAS,SAAUS,GAAM,EAG/CL,EAAuB,QAAQ,CAEnC,EAEMO,EAAW,CAACC,EAAaC,IAAqC,CAClE,GAAGA,GAAU,KAA4B,CACpCV,EAAU,IAAIS,CAAG,GAClBT,EAAU,OAAOS,CAAG,EAGtBZ,EAAQ,MAAM,eAAeY,CAAG,EAChC,MACF,CAEAT,EAAU,IAAIS,EAAKC,CAAK,EACxBb,EAAQ,MAAM,YAAYY,EAAKC,CAAK,CACtC,EAEMC,EAAYF,GACTT,EAAU,IAAIS,CAAG,EAI1B,OAAC,IAAM,CAEL,IAAMG,EAAO,CACX,2BAA2BhB,EAAW,2BAAuC,CAAC,EAC9E,4BAA4BA,EAAW,4BAAwC,CAAC,EAChF,4CAA4BA,EAAW,4BAAwC,CAAC,EAEhF,8BAAwBA,EAAW,wBAAoC,CAAC,EACxE,oCAA6BA,EAAW,8BAAyC,CAAC,EAClF,mCAA4BA,EAAW,6BAAwC,CAAC,EAEhF,mCAA4BA,EAAW,4BAAwC,CAAC,EAChF,oCAA6BA,EAAW,6BAAyC,CAAC,EAClF,2CAA6BA,EAAW,6BAAyC,CAAC,EAElF,gCAAyBA,EAAW,yBAAqC,CAAC,EAC1E,sCAA8BA,EAAW,+BAA0C,CAAC,EACpF,sCAA8BA,EAAW,+BAA0C,CAAC,EAEpF,oCAA6BA,EAAW,6BAAyC,CAAC,EAClF,0CAAkCA,EAAW,mCAA8C,CAAC,EAC5F,0CAAkCA,EAAW,mCAA8C,CAAC,EAE5F,oCAA6BA,EAAW,6BAAyC,CAAC,EAClF,0CAAkCA,EAAW,mCAA8C,CAAC,EAC5F,0CAAkCA,EAAW,mCAA8C,CAAC,CAC9F,EAEA,QAAUiB,KAAQD,EAAK,CACrB,IAAME,EAAkBD,EAAK,GACvBE,EAAmBF,EAAK,GAC9BL,EAASM,EAAiBC,CAAgB,CAC5C,CAEAV,EAAST,EAAW,oBAAiC,CAAC,EACtDW,EAAgBX,EAAW,4BAAwC,CAAC,CACtE,GAAG,EAEI,CACL,SAAAY,EACA,SAAAG,EAEA,IAAI,OAAQ,CACV,OAAOb,CACT,EAEA,IAAI,MAAMQ,EAAI,CACZD,EAASC,CAAG,CACd,EAEA,IAAI,cAAe,CACjB,OAAOP,CACT,EAEA,IAAI,aAAaO,EAAI,CACnBC,EAAgBD,CAAG,CACrB,CAEF,CACF,EC7HO,IAAMU,EAAc,kBAEdC,GAAoBC,GAAiC,CAChE,GAAIA,oBAA8C,CAChD,IAAMC,EAAO,OAEb,GAAI,CACF,cAAO,aAAa,QAAQA,EAAMA,CAAI,EACtC,OAAO,aAAa,WAAWA,CAAI,EAC5B,EACT,OAAS,EAAP,CACA,MAAO,EACT,CACF,CAEA,GAAID,sBAAgD,CAClD,IAAMC,EAAO,OAEb,GAAI,CACF,cAAO,eAAe,QAAQA,EAAMA,CAAI,EACxC,OAAO,eAAe,WAAWA,CAAI,EAC9B,EACT,OAAS,EAAP,CACA,MAAO,EACT,CACF,CAEA,MAAO,EACT,EAGaC,GAAsB,CAACC,EAAqBC,IAAe,CACtE,IAAMC,EAAe,mBAAmB,OAAOD,GAAU,SAAW,KAAK,UAAUA,CAAK,EAAIA,CAAK,EACjG,OAAO,aAAa,QAAQD,EAAaE,CAAY,CACvD,EAEaC,GAAuBH,GAAwB,CAC1D,IAAMC,EAAQ,OAAO,aAAa,QAAQD,CAAW,EACrD,OAAOC,IAAU,KAAO,KAAO,mBAAmBA,CAAK,CACzD,EAGaG,GAAwB,CAACJ,EAAqBC,IAAe,CACxE,IAAMC,EAAe,mBAAmB,OAAOD,GAAU,SAAW,KAAK,UAAUA,CAAK,EAAIA,CAAK,EACjG,OAAO,eAAe,QAAQD,EAAaE,CAAY,CACzD,EAEaG,GAAyBL,GAAwB,CAC5D,IAAMC,EAAQ,OAAO,eAAe,QAAQD,CAAW,EACvD,OAAOC,IAAU,KAAO,KAAO,mBAAmBA,CAAK,CACzD,EAGaK,GAAgB,CAACT,EAA8BG,EAAqBC,IAAe,CAE9F,GAAI,EAACL,GAAiBC,CAAW,EAEjC,OAAQA,uBAC6B,CACjCE,GAAoBC,EAAaC,CAAK,EACtC,KACF,uBAEqC,CACnCG,GAAsBJ,EAAaC,CAAK,EACxC,KACF,EAEJ,EAEaM,GAAiB,CAACV,EAA8BG,IAEtDJ,GAAiBC,CAAW,EAE7BA,oBACKM,GAAoBH,CAAW,EAGpCH,sBACKQ,GAAsBL,CAAW,EAGnC,KAVoC,KAahCQ,GAAkBC,GACtB,GAAIA,MAOAC,GAAqB,CAChCC,EACAF,EACAG,IACG,CACH,GAAI,CAACD,EAAS,OAEd,IAAIE,EAAsB,KACtBC,EAAsB,KAEpBC,EAAiBR,GAAeI,EAASF,CAAU,EACnDO,EAAiBT,GAAeI,EAASH,GAAeC,CAAU,CAAC,EAEtEM,GAAmB,OACpBF,EAAOE,GAGNC,GAAmB,OACpBF,EAAOE,GAGN,EAAAH,IAAS,MAAQC,IAAS,OAE7BF,EAAyBC,EAAMA,EAAMC,CAAI,CAC3C,EC9FO,IAAMG,GAAU,CAACC,EAAyBC,EAAuBC,IAA6B,CAInG,IAAIC,EAAU,EAEVC,EACAC,EACAC,EACAC,EAEAC,EAAW,GAGTC,EAAiB,CAACC,EAAkBC,EAA+BC,EAAgCC,EAAiBC,EAAuBC,IAA0B,CACtKH,IAAe,QAAaF,EAAWE,IACxCF,EAAWE,GAGVD,IAAc,QAAaD,EAAWC,IACvCD,EAAWC,GAGbR,EAAUO,EACVT,EAAS,MAAM,EAIf,IAAIe,EAAab,GACbU,gBAA+BE,GAChCF,kBAAiCC,KAClCE,EAAa,IAAMA,GAGjBH,eACFZ,EAAS,MAAM,IAAM,GAAIe,KAGzBf,EAAS,MAAM,KAAO,GAAIe,IAE9B,EAEMC,EAAaC,GACVA,IAAYjB,GAAYA,EAAS,SAASiB,CAAO,EAGpDC,EAAe,CACnBC,EACAC,EACAC,EACAC,IACG,CACHnB,EAAYgB,EACZf,EAAagB,EACbf,EAAUgB,EACVf,EAAYgB,CACd,EAEMC,EAAeC,GAAuB,CAC1CjB,EAAWiB,EACXxB,EAAS,UAAU,OAAO,WAAYO,CAAQ,EAE3CA,EACDP,EAAS,aAAa,gBAAiB,MAAM,EAGzCA,EAAS,aAAa,eAAe,GACvCA,EAAS,gBAAgB,eAAe,CAG9C,EAEMyB,EAAU,CAACC,EAAaC,IAAqC,CAC9DA,GAAU,KACX3B,EAAS,gBAAgB0B,CAAG,EAG5B1B,EAAS,aAAa0B,EAAKC,CAAK,CAEpC,EAEMC,EAAWF,GACR1B,EAAS,aAAa0B,CAAG,EAK5BG,EAAkBC,GAAuB,CAC7C,GAAG,CAAAvB,EAEH,QAAQuB,EAAI,SACL,YAAa,CAChBA,EAAI,eAAe,EAChB,OAAO3B,GAAc,YACtBA,EAAUF,CAAK,EAEjB,KACF,KAEK,aAAc,CACjB6B,EAAI,eAAe,EAChB,OAAO1B,GAAe,YACvBA,EAAWH,CAAK,EAElB,KACF,KAEK,UAAW,CACd6B,EAAI,eAAe,EAChB,OAAOzB,GAAY,YACpBA,EAAQJ,CAAK,EAEf,KACF,KAEK,YAAa,CAChB6B,EAAI,eAAe,EAChB,OAAOxB,GAAc,YACtBA,EAAUL,CAAK,EAEjB,KACF,EAGF8B,GAAmBhC,EAAY+B,CAAG,EACpC,EAEME,EAAiB,IAAM,CACxBzB,GACH0B,GAAwBlC,EAAYC,CAAQ,CAC9C,EAIA,OACEA,EAAS,UAAY,mBAAoBC,IAEzCD,EAAS,iBAAiB,UAAW6B,CAAc,EACnD7B,EAAS,iBAAiB,QAASgC,CAAc,EAS5C,CACL,SAAAhC,EAEA,IAAI,SAAU,CACZ,OAAOE,CACT,EAEA,IAAI,UAAW,CACb,OAAOK,CACT,EAEA,IAAI,SAASiB,EAAW,CACtBD,EAAYC,CAAS,CACvB,EAEA,eAAAhB,EAEA,UAAAQ,EACA,aAAAE,EACA,QAAAO,EACA,QAAAG,EAEA,QA5Bc,IAAM,CACpB5B,EAAS,oBAAoB,UAAW6B,CAAc,EACtD7B,EAAS,oBAAoB,QAASgC,CAAc,EACpDhC,EAAS,OAAO,CAClB,CAyBA,CACF,EClMO,IAAMkC,GAAiB,CAACC,EAAyBC,IAA2B,CACjF,IAAMC,EAAYD,EAAU,UAAU,EAAI,EAC1C,OAAAA,EAAU,MAAMC,CAAS,EAClBC,GAAQH,EAAYE,EAAW,CAAC,CACzC,ECmDO,IAAME,GAAc,EACdC,EAAc,IACdC,EAAgB,EAEhBC,GAAS,CAACC,EAAyBC,EAAsBC,EAAoBC,IAAwC,CAEhI,IAAIC,EAAmC,KACnCC,EAA+B,KAC/BC,EAAyB,KACzBC,EAAyB,KAEzBC,EAAMZ,GACNa,EAAMZ,EACNa,EACAC,EACAC,eACAC,EAAgBf,EAChBgB,EAAc,GACdC,EAAc,GAEdC,EAAkB,GAClBC,EAAsB,EACtBC,EAAsB,IAEtBC,EAAgB,GAEhBC,EACAC,EAEAC,EAAW,GACXC,EAAmB,GACnBC,EAAiB,GACjBC,EAEAC,EACAC,EAAaC,EACbC,EAAqB,GAErBC,EACAC,EAIEC,EAAeC,GAAoB,CACpCX,IAECW,EAAI,gBACNA,EAAI,eAAe,EAGrBC,EAAcD,CAAG,EAEjB,OAAO,iBAAiB,YAAaC,CAAa,EAClD,OAAO,iBAAiB,UAAWC,CAAS,EAE5CC,GAAmBpC,EAAYiC,CAAG,EACpC,EAEME,EAAaF,GAAoB,CAClCX,IAEHF,EAAqB,OACrBC,EAAoB,OAEpB,OAAO,oBAAoB,YAAaa,CAAa,EACrD,OAAO,oBAAoB,UAAWA,CAAa,EAEhDT,GACDxB,EAAQ,UAAU,sBAA6B,EAGjDoC,GAAiBrC,EAAYiC,CAAG,EAClC,EAEMK,GAAmB,CAACC,EAAsBC,IAAoB,CAnItE,IAAAC,GAqII,GAAG,CAACtC,EACF,OAAGD,EAAS,UAAUqC,CAAO,GAAKd,GAChCxB,EAAQ,UAAU,yBAAgC,EAG7CC,EAGT,IAAMwC,EAAmBC,GAAmBJ,CAAO,EAenD,GAbGpB,IACEuB,GACDtB,EAAqBoB,EACrBnB,EAAoB,GAGjBD,IAAuB,SACxBC,EAAoBmB,EAAUpB,EAC9BA,EAAqBoB,IAKxB,CAACI,GAAeL,CAAO,GAAK,CAACG,EAAiB,CAE/C,GAAGxC,EAAS,UAAUqC,CAAO,EAE3B,OAAGd,GACDxB,EAAQ,UAAU,yBAAgC,EAG7CC,EAIT,IAD0BuC,GAAAtC,GAAA,YAAAA,EAAU,UAAUoC,KAApB,KAAAE,GAAgC,GAGxD,OAAGhB,GACDxB,EAAQ,UAAU,yBAAgC,EAG7CE,EAIT,GAAGC,IAAoBF,EAAU,OAAOA,EACxC,GAAGE,IAAoBD,EAAU,OAAOA,CAC1C,CAGA,IAAM0C,EAAY,KAAK,IAAIL,EAAUtC,EAAS,OAAO,EAC/C4C,EAAY,KAAK,IAAIN,EAAUrC,EAAS,OAAO,EACrD,OAAO0C,GAAaC,EAAY5C,EAAWC,CAC7C,EAEM+B,EAAiBD,GAAiC,CAGtD,IAAIO,EAEJ,GAAG5B,eAA2B,CAC5B,GAAM,CAAE,OAAQmC,EAAW,IAAKC,CAAO,EAAI/C,EAAQ,sBAAsB,EACnEgD,EAAShB,EAAI,KAAK,QAAQ,OAAO,IAAM,GAAMA,EAAmB,QAAWA,EAAmB,QAAQ,GAAG,QAE/GO,EADY,KAAK,IAAI,KAAK,IAAI,EAAGS,EAASD,CAAM,EAAGD,CAAS,EAC3C,IAAOA,CAC1B,KACI,CACF,GAAM,CAAE,MAAOG,EAAU,KAAMC,CAAQ,EAAIlD,EAAQ,sBAAsB,EACnEmD,EAASnB,EAAI,KAAK,QAAQ,OAAO,IAAM,GAAMA,EAAmB,QAAWA,EAAmB,QAAQ,GAAG,QAE/GO,EADa,KAAK,IAAI,KAAK,IAAI,EAAGY,EAASD,CAAO,EAAGD,CAAQ,EAC3C,IAAOA,CAC3B,CAQA,IANGpC,GAAeC,KAChByB,EAAU,IAAMA,GAGlBpC,EAAkBkC,GAAiBL,EAAI,OAAuBO,CAAO,EAElErB,GAAiBhB,GAAYkB,IAAsB,OAAU,CAE9DgC,EAAa,EAAGnD,EAAS,QAAUmB,CAAiB,EACpDgC,EAAa,EAAGlD,EAAS,QAAUkB,CAAiB,EACpD,MACF,CAEGjB,IAAoBF,GAAY,CAACA,EAAS,UAE3CmD,EAAa,EAAGb,CAAO,EAGtBpC,IAAoBD,GAAY,EAACA,GAAA,MAAAA,EAAU,WAE5CkD,EAAa,EAAGb,CAAO,CAE3B,EAEMc,GAAqBrB,GAAoB,CAG7C,GAFIX,GAAY,SAAS,gBAAkBtB,GAEvCI,IAAoBF,GAAYA,EAAS,UACzCE,IAAoBD,IAAYA,GAAA,YAAAA,EAAU,UAAW,OAEzD8B,EAAI,gBAAgB,EACpBA,EAAI,eAAe,EAEnB,IAAMsB,EAAYtB,EAAI,OAAS,EACzBuB,EAAgB1C,GAAeC,GAChBwC,EAAY,CAACC,EAAgBA,IAG7CpD,IAAoBF,GACrBuD,EAAO,EAAGvD,EAAS,OAAO,EAGzBE,IAAoBD,GACrBsD,EAAO,EAAGtD,GAAA,YAAAA,EAAU,OAAO,IAI1BC,IAAoBF,GACrBwD,EAAO,EAAGxD,EAAS,OAAO,EAGzBE,IAAoBD,GACrBuD,EAAO,EAAGvD,GAAA,YAAAA,EAAU,OAAO,EAGjC,EAIMwD,GAAaC,GAAyB,CACvCtC,GAAYC,IAEZX,eACEG,EAEDsC,EAAaO,EAAc,GAAG,EAI9BP,EAAaO,EAAc,CAAC,EAI3B9C,EAEE8C,EAAe,EAChBF,EAAO,EAAGxD,EAAS,OAAO,EAG1BwD,EAAO,EAAGvD,GAAA,YAAAA,EAAU,OAAO,EAK1ByD,EAAe,EAChBH,EAAO,EAAGvD,EAAS,OAAO,EAG1BuD,EAAO,EAAGtD,GAAA,YAAAA,EAAU,OAAO,EAInC,EAEM0D,GAAcD,GAAyB,CACxCtC,GAAYC,IAEZX,eACEG,EAEDsC,EAAaO,EAAc,CAAC,EAI5BP,EAAaO,EAAc,GAAG,EAI7B9C,EAEE8C,EAAe,EAChBH,EAAO,EAAGvD,EAAS,OAAO,EAG1BuD,EAAO,EAAGtD,GAAA,YAAAA,EAAU,OAAO,EAK1ByD,EAAe,EAChBF,EAAO,EAAGxD,EAAS,OAAO,EAG1BwD,EAAO,EAAGvD,GAAA,YAAAA,EAAU,OAAO,EAInC,EAEM2D,GAAWF,GAAyB,CACrCtC,GAAYC,IAEZX,eACEG,EAEE6C,EAAe,EAChBF,EAAO,EAAGxD,EAAS,OAAO,EAG1BwD,EAAO,EAAGvD,GAAA,YAAAA,EAAU,OAAO,EAK1ByD,EAAe,EAChBH,EAAO,EAAGvD,EAAS,OAAO,EAG1BuD,EAAO,EAAGtD,GAAA,YAAAA,EAAU,OAAO,EAK5BW,EAEDuC,EAAaO,EAAc,GAAG,EAI9BP,EAAaO,EAAc,CAAC,EAGlC,EAEMG,GAAaH,GAAyB,CACvCtC,GAAYC,IAEZX,eACEG,EAEE6C,EAAe,EAChBH,EAAO,EAAGvD,EAAS,OAAO,EAG1BuD,EAAO,EAAGtD,GAAA,YAAAA,EAAU,OAAO,EAK1ByD,EAAe,EAChBF,EAAO,EAAGxD,EAAS,OAAO,EAG1BwD,EAAO,EAAGvD,GAAA,YAAAA,EAAU,OAAO,EAK5BW,EAEDuC,EAAaO,EAAc,CAAC,EAI5BP,EAAaO,EAAc,GAAG,EAGpC,EAIMhB,GAAkBL,GACfA,EAAQ,UAAU,SAAS,OAAO,EAGrCI,GAAsBJ,GACnBA,EAAQ,UAAU,SAAS,YAAY,EAG1CkB,EAAS,CAACO,EAAeC,IAAiC,CAC9D,GAAGA,IAAa,OAAW,OAE3B,IAAIvD,EAAOwD,GAAgBD,CAAQ,EAChCvD,GAAQ,OACTA,EAAO,GAGTuD,GAAYvD,EAETuD,EAAW,IACZA,EAAW,GAGbZ,EAAaW,EAAOC,CAAQ,CAC9B,EAEMP,EAAS,CAACM,EAAeC,IAAiC,CAC9D,GAAGA,IAAa,OAAW,OAE3B,IAAIvD,EAAOwD,GAAgBD,CAAQ,EAChCvD,GAAQ,OACTA,EAAO,GAGTuD,GAAYvD,EAETuD,EAAW,MACZA,EAAW,KAGbZ,EAAaW,EAAOC,CAAQ,CAC9B,EAEME,GAAmB,IAAM,CAC7BhE,EAAWiE,GAAepE,EAAYE,EAAS,QAAQ,EACvDC,GAAA,MAAAA,EAAU,aAAawD,GAAWE,GAAYC,GAASC,IACvD5D,EAAS,SAAWkE,EAAWrE,EAAW,gCAA4C,CAAC,EAEvF,IAAM+B,EAAa/B,EAAW,0BAAsC,EACjE+B,GACDuC,EAAavC,EAAY,CAAC,EAG5BwC,EAAkB,EAAK,EACvBA,EAAkBF,EAAWrE,EAAW,8BAA0C,CAAC,CAAC,CACtF,EAEMwE,GAAsB,IAAM,CAChCrE,GAAA,MAAAA,EAAU,UACVA,EAAW,KACXoE,EAAkB,EAAK,EACvBA,EAAkBF,EAAWrE,EAAW,8BAA0C,CAAC,CAAC,CACtF,EAEMyE,GAAe,IAAM,CACzBnE,GAAA,MAAAA,EAAQ,aAAaoE,EAAaxE,EAAS,OAAO,EAAGwE,EAAavE,GAAA,YAAAA,EAAU,OAAO,EAAGwE,EAAcnE,CAAG,EAAGmE,EAAclE,CAAG,EAC7H,EAIMmE,GAAsB,IAAM,CAChC,GAAG5D,GAAmB,CAACb,GAAYM,IAAQD,EAAK,OAChD,IAAMqE,EAAY3D,EAAsB,KAAOT,EAAMD,GACrD,OAAO,KAAK,IAAI,EAAGL,EAAS,QAAU0E,CAAS,CACjD,EAEMC,GAAuB,IAAM,CACjC,GAAG9D,GAAmB,CAACb,GAAYM,IAAQD,EAAK,OAChD,IAAMqE,EAAY,IAAM5D,GAAuBR,EAAMD,GACrD,OAAO,KAAK,IAAI,EAAGL,EAAS,QAAU0E,CAAS,CACjD,EAEME,GAAsB,IAAM,CAChC,GAAG/D,GAAmBP,IAAQD,EAAK,OACnC,IAAMqE,EAAY5D,EAAsB,KAAOR,EAAMD,GACrD,OAAO,KAAK,IAAIN,EAAS,QAAU2E,EAAW,GAAG,CACnD,EAEMG,GAAuB,IAAM,CACjC,GAAGhE,GAAmBP,IAAQD,EAAK,OACnC,IAAMqE,EAAY3D,EAAsB,KAAOT,EAAMD,GACrD,OAAO,KAAK,IAAIN,EAAS,QAAU2E,EAAW,GAAG,CACnD,EAEMX,GAAmBD,GAAqB,CAG5C,IAAIgB,EAAQ,OAAOvE,GAAS,WAAaA,EAAKwE,EAAa,EAAG,IAAK1E,EAAKC,EAAKwD,CAAQ,EAAGA,CAAQ,EAAIvD,EACpG,GAAGuE,IAAU,OACX,OAAAA,EAAQC,EAAa1E,EAAKC,EAAK,EAAG,IAAKwE,CAAe,EAC/CA,CAIX,EAEMP,EAAgBT,GAAiC,CACrD,GAAGA,IAAa,OAAW,OAE3B,IAAMkB,EAAMD,EAAa,EAAG,IAAK1E,EAAKC,EAAKwD,CAAQ,EAEnD,OAAGtD,IAAS,OACHA,EAAKwE,GAGPC,GAAiBD,EAAKtE,CAAK,CACpC,EAEMwE,GAAS,IAEV1E,IAAS,OACHA,EAAKH,GAGPA,EAGH8E,GAAS,IAEV3E,IAAS,OACHA,EAAKF,GAGPA,EAGHkE,EAAiBY,GAClB5E,IAAS,OAAkBA,EAAK4E,GAC5BA,EAGHC,GAAiBxB,GAAkB,CAniB3C,IAAAvB,EAoiBI,OAAGuB,EAAQ,GAAKhD,EAAwBqE,GAAO,GACxC5C,EAAAiC,EAAaxE,EAAS,OAAO,IAA7B,KAAAuC,EAAkC,EAC3C,EAEMgD,GAAiBzB,GAAkB,CAxiB3C,IAAAvB,EAyiBI,OAAGuB,GAAS,GAAKhD,EAAwBsE,GAAO,EAE7CnF,GACMsC,EAAAiC,EAAavE,GAAA,YAAAA,EAAU,OAAO,IAA9B,KAAAsC,EAAmC,GAGnC6C,GAAO,CAElB,EAIMjC,EAAe,CAACW,EAAeC,IAAiC,CAEpE,GAAGA,IAAa,OAAW,OAG3B,IAAMgB,EAAQf,GAAgBD,CAAQ,EACnCgB,IAAU,SACXhB,EAAWyB,GAAYzB,EAAUgB,CAAK,GAGrCjB,EAAQ,EACT9D,EAAS,eAAe+D,EAAUW,GAAoB,EAAGE,GAAqB,EAAGlE,EAAME,EAAaC,CAAW,EAG/GZ,GAAA,MAAAA,EAAU,eAAe8D,EAAUc,GAAoB,EAAGC,GAAqB,EAAGpE,EAAME,EAAaC,GAGvGV,GAAA,MAAAA,EAAW,eAAeO,EAAMV,EAAS,QAASC,GAAA,YAAAA,EAAU,QAASW,EAAaC,GAElF,IAAM4E,EAAajB,EAAaxE,EAAS,OAAO,EAC1C0F,EAAalB,EAAavE,GAAA,YAAAA,EAAU,OAAO,EAEjDsE,GAAa,EAEVkB,IAAe,SAChBzF,EAAS,QAAQ,gBAAiByF,EAAW,SAAS,CAAC,EACvDzF,EAAS,QAAQ,iBAAkByF,EAAW,SAAS,CAAC,GAGvDC,IAAe,QAAazF,IAC7BA,EAAS,QAAQ,gBAAiByF,EAAW,SAAS,CAAC,EACvDzF,EAAS,QAAQ,iBAAkByF,EAAW,SAAS,CAAC,GAGtDlE,GAAWG,IACbgE,GAAcnE,EAASC,EAAYgE,CAAU,EAC1CxF,GACD0F,GAAcnE,EAASoE,GAAenE,CAAU,EAAGiE,CAAU,GAIjEG,GAAc,EAEdC,GAAgBhG,EAAY0E,EAAaxE,EAAS,OAAO,EAAGwE,EAAavE,GAAA,YAAAA,EAAU,OAAO,CAAC,CAC7F,EAMM8F,GAAY,CAACC,EAA0CC,IAA6C,CAExG3F,EAAMG,IAAS,OAAY,EAAIyF,EAAUF,EAAMtG,EAAW,EAC1Da,EAAME,IAAS,OAAYA,EAAK,OAAS,EAAIyF,EAAUD,EAAMtG,CAAW,EAGxEwG,GAAO7F,CAAG,EACV8F,GAAO7F,CAAG,CACZ,EAEMsF,GAAgB,IAAM,CAjnB9B,IAAAtD,EAAA8D,EAAAC,EAAAC,EAknBOvG,IACDA,EAAS,QAAQ,kBAAkBuC,EAAA+C,GAAc,CAAC,IAAf,KAAA/C,EAAoB,IAAI,SAAS,CAAC,EACrEvC,EAAS,QAAQ,kBAAkBqG,EAAAd,GAAc,CAAC,IAAf,KAAAc,EAAoB,IAAI,SAAS,CAAC,GAGpEpG,IACDA,EAAS,QAAQ,kBAAkBqG,EAAAhB,GAAc,CAAC,IAAf,KAAAgB,EAAoB,IAAI,SAAS,CAAC,EACrErG,EAAS,QAAQ,kBAAkBsG,EAAAhB,GAAc,CAAC,IAAf,KAAAgB,EAAoB,IAAI,SAAS,CAAC,EAEzE,EAEMJ,GAAUH,GAA6C,CAC3D1F,EAAM4F,EAAUF,EAAMtG,EAAW,EAE9BY,EAAMC,IACPA,EAAMD,EAAMX,GAGdwD,EAAa,EAAGnD,EAAS,OAAO,EAChCmD,EAAa,EAAGlD,GAAA,YAAAA,EAAU,OAAO,CACnC,EAEMmG,GAAUH,GAA6C,CAE3D1F,EAAM2F,EAAUD,EAAMtG,CAAW,EAE9BY,EAAMD,IACPC,EAAMD,EAAMX,GAGdwD,EAAa,EAAGnD,EAAS,OAAO,EAChCmD,EAAa,EAAGlD,GAAA,YAAAA,EAAU,OAAO,CACnC,EAMMuG,GAA2B,CAACC,EAAuBC,EAAwBC,IAA2B,CAG1G7F,EAAkB,GAClB,IAAM8F,EAAUF,IAAY,KAAOA,EAAUD,EAE7CI,EAASD,EAAS,CAAC,EACnBC,EAASF,EAAS,CAAC,EACnB7F,EAAkB,GAGlB+F,EAASD,EAAS,CAAC,EACnBC,EAASF,EAAS,CAAC,CACrB,EAEME,EAAW,CAACC,EAA0ChD,IAAkB,CAE5E,IAAImB,EAIDnB,IAAU,IACcgD,GAAS,MAAQ,CAAC7G,GACzCgE,GAAiB,EAGO6C,GAAS,MAAS,CAAC,CAAC7G,IAC5CqE,GAAoB,EACpByC,GAAiB,EAAK,IAIvBtG,IAAS,QAEVwE,EAA6B6B,GAAS,KAAQ,EAAIE,GAAqBF,EAAMrG,CAAI,EAC9EwE,IAAQ,KACTA,EAAM,KAIRA,EAAMiB,EAAUY,EAAMxG,CAAG,EAEtB2E,EAAM3E,IACP2E,EAAM3E,GAGL2E,EAAM1E,IACP0E,EAAM1E,IAKV,IAAM+B,EAAU0C,EAAa1E,EAAKC,EAAK,EAAG,IAAK0E,CAAG,EAElD9B,EAAaW,EAAOxB,CAAO,CAC7B,EAEM2E,GAAWlC,GAAiB,CAChC,GAAGA,GAAU,KAA4B,CACvCvE,EAAO,OACP,MACF,CAEA,GAAI,OAAOuE,GAAU,WAAY,CAC/BvE,EAAOuE,EACP,MACF,CAEA,GAAGmC,EAASnC,CAAK,EAAE,CACjBvE,EAAO0F,EAAUnB,EAAO,CAAC,EAEzB,IAAMoC,EAAO,KAAK,IAAI5G,EAAMD,CAAG,EAC3BE,EAAO2G,IACT3G,EAAO,QAET,MACF,CAEAA,EAAO,MACT,EAEM4G,GAAsBC,GAA8B,CACxDvG,EAAkBuG,EAClBlE,EAAa,EAAGnD,EAAS,OAAO,CAClC,EAEMsH,GAA0BC,GAAiC,EAC5D,CAACL,EAASK,CAAoB,GAAKA,EAAuB,KAC3DA,EAAuB,GAEzBxG,EAAsBwG,CACxB,EAEMC,GAA0BC,GAAiC,EAC5D,CAACP,EAASO,CAAoB,GAAKA,EAAuB,KAC3DA,EAAuB,KAEzBzG,EAAsByG,CACxB,EAEMC,GAAeC,GAAuB,CAC1CvG,EAAWuG,EACX5H,EAAQ,UAAU,OAAO,WAAYqB,CAAQ,EAE1CA,EACDrB,EAAQ,aAAa,gBAAiB,MAAM,EAGxCA,EAAQ,aAAa,eAAe,GACtCA,EAAQ,gBAAgB,eAAe,CAG7C,EAEM6H,GAAWC,GAA0C,CAEzD,GAAGA,GAAU,KAA4B,CACvCpH,EAAO,OACP,MACF,CAGA,GADAA,EAAOqH,GAAUD,CAAe,EAC7BpH,IAAS,QAAaA,EAAK,QAAU,EAAE,CACxCA,EAAO,OACP,MACF,CAEA0F,GAAO,CAAC,EACRC,GAAO3F,EAAK,OAAS,CAAC,EAEnBD,IAAS,QACVyG,GAAQ,CAAC,CAEb,EAEMc,GAAWC,GAAqC,CA/xBxD,IAAAzF,EAiyBO,OAAOyF,GAAU,SAClBtH,EAAOsH,EAAM,KAAK,EAAE,YAAY,uCAGhCtH,eAGF,IAAMuH,GAAO1F,EAAAzC,EAAW,aAAX,YAAAyC,EAAuB,cAAc,qBAClD,GAAG,CAAC0F,EAAM,OACVA,EAAK,UAAY,yBAA0BvH,IAG3CyC,EAAa,EAAGnD,EAAS,OAAO,EAE7BC,GACDkD,EAAa,EAAGlD,EAAS,OAAO,EAIlC,IAAMiI,EAAOxH,eAA8B,WAAa,aACxDV,EAAS,QAAQ,mBAAoBkI,CAAI,EACzCjI,GAAA,MAAAA,EAAU,QAAQ,mBAAoBiI,EACxC,EAEMC,GAAkBC,GAA0B,CAChDxH,EAAcwH,EAEXnI,IAEEW,EAEDX,EAAS,SAAS,MAAMD,EAAS,QAAQ,EAIzCA,EAAS,SAAS,MAAMC,EAAS,QAAQ,GAI7CkD,EAAa,EAAGnD,EAAS,OAAO,EAChCmD,EAAa,EAAGlD,GAAA,YAAAA,EAAU,OAAO,EAEjCG,GAAA,MAAAA,EAAQ,eAAeQ,GAAeC,EACxC,EAEMwH,GAAkBC,GAA0B,CAChDzH,EAAcyH,EAEXrI,IAEEY,EAEDZ,EAAS,SAAS,MAAMD,EAAS,QAAQ,EAIzCA,EAAS,SAAS,MAAMC,EAAS,QAAQ,GAI7CkD,EAAa,EAAGnD,EAAS,OAAO,EAChCmD,EAAa,EAAGlD,GAAA,YAAAA,EAAU,OAAO,EAEjCG,GAAA,MAAAA,EAAQ,eAAeQ,GAAeC,EACxC,EAEMwD,EAAqBkE,GAAsB,CAE5C,CAACnI,IAEJkB,EAAiBiH,EAEjBnI,EAAO,oBACLmI,EACA/D,EAAaxE,EAAS,OAAO,EAC7BwE,EAAavE,GAAA,YAAAA,EAAU,OAAO,EAC9BW,GAAeC,EACf4D,EAAcnE,CAAG,EACjBmE,EAAclE,CAAG,CAAC,EACtB,EAEMiI,GAAYC,GAAmB,CACnC9H,EAAQuF,EAAUuC,EAAQ7I,CAAa,EAEpCe,EAAQ,IACTA,EAAQf,GAGV2E,GAAa,CACf,EAEMmE,GAAqBC,GAA+C,CACrEA,GAAoB,MACrBpH,EAAiB,OACjBxB,EAAQ,MAAM,kDAA0C,EACxDA,EAAQ,UAAU,yBAAgC,IAGlDwB,EAAiBoH,EACjB5I,EAAQ,MAAM,gDAAyCwB,CAAc,EACrExB,EAAQ,UAAU,sBAA6B,EAEnD,EAEMqE,EAAe,CAACwE,EAAgC9E,IAAkB,CAEnEA,EAAQ,GACTlC,EAAagH,EACb5I,EAAS,QAAQ,aAAc4I,CAAU,IAGzC/G,EAAa+G,EACb3I,GAAA,MAAAA,EAAU,QAAQ,aAAc2I,GAEpC,EAEM7B,GAAoB8B,GAA4B,CAGpD,GAFA3H,EAAqB,OAElB,CAACjB,EAAS,CACXgB,EAAgB,GAChB,MACF,CAEAA,EAAgB4H,CAClB,EAGA,OAAC,IAAM,CAj6BT,IAAAtG,EAo6BIvC,EAAS,aAAayD,GAAWE,GAAYC,GAASC,EAAS,EAC/D5D,GAAA,MAAAA,EAAU,aAAawD,GAAWE,GAAYC,GAASC,IAGvD,IAAMiF,GAAQvG,EAAAzC,EAAW,aAAX,YAAAyC,EAAuB,cAAc,eAChDuG,IACD3I,EAAY4I,GAAUD,CAAK,GAI7B1I,EAAS4I,GAAOlJ,EAAYC,EAASwE,EAAY,EAGjDwD,GAAQjI,EAAW,mBAAgC,CAAC,EACpDqI,GAAehE,EAAWrE,EAAW,kBAAuC,CAAC,CAAC,EAC9EuI,GAAelE,EAAWrE,EAAW,kBAAuC,CAAC,CAAC,EAE9EiG,GAAUjG,EAAW,kBAA+B,EAAGA,EAAW,kBAA+B,CAAC,EAClGmH,GAAQnH,EAAW,mBAAgC,CAAC,EACpD8H,GAAQ9H,EAAW,mBAAgC,CAAC,EAGpD0G,GACE1G,EAAW,oBAAiC,EAC5CA,EAAW,qBAAkC,EAC7CA,EAAW,qBAAkC,CAC/C,EAGAsH,GAAmBjD,EAAWrE,EAAW,+BAA2C,CAAC,CAAC,EACtFwH,GAAuBpB,EAAUpG,EAAW,oCAA+C,EAAG,CAAC,CAAC,EAChG0H,GAAuBtB,EAAUpG,EAAW,oCAA+C,EAAG,GAAQ,CAAC,EACvGiH,GAAiB5C,EAAWrE,EAAW,6BAAyC,CAAC,CAAC,EAGlF4H,GAAYvD,EAAWrE,EAAW,uBAAoC,CAAC,CAAC,EACxEuB,EAAmB8C,EAAWrE,EAAW,gCAA4C,CAAC,EACtFE,EAAS,SAAWmE,EAAWrE,EAAW,gCAA4C,CAAC,EAEpFG,IACDA,EAAS,SAAWkE,EAAWrE,EAAW,gCAA4C,CAAC,GAGzFuE,EAAkBF,EAAWrE,EAAW,8BAA0C,CAAC,CAAC,EACpFM,EAAO,gBAAkBN,EAAW,0BAAsC,EAC1EM,EAAO,gBAAkBN,EAAW,2BAAuC,EAE3E0I,GAAStC,EAAUpG,EAAW,oBAAiC,EAAGF,CAAa,CAAC,EAEhF,IAAMgC,EAAa9B,EAAW,0BAAsC,EACjE8B,IAAe,MAChBwC,EAAaxC,EAAY,CAAC,EAG5B,IAAMC,EAAa/B,EAAW,0BAAsC,EACjE+B,IAAe,MAAQ5B,GACxBmE,EAAavC,EAAY,CAAC,EAI5BxB,EAAS4I,GAAOnJ,EAAYC,CAAO,EACnC2I,GAAkB5I,EAAW,8BAA0C,CAAC,EAGxE0B,EAAW1B,EAAW,sBAAmC,GAAyB,OAClF2B,EAAa3B,EAAW,0BAAsC,GAAK4B,EAE/DF,IACF0H,GAAmB1H,EAASC,EAAY+E,EAAwB,EAChE7E,EAAqB,IAIvB5B,EAAQ,iBAAiB,YAAa+B,CAAW,EACjD/B,EAAQ,iBAAiB,UAAWkC,CAAS,EAC7ClC,EAAQ,iBAAiB,YAAaiC,CAAa,EACnDjC,EAAQ,iBAAiB,aAAciC,CAAa,EACpD,SAAS,iBAAiB,QAASoB,GAAmB,CAAE,QAAS,EAAM,CAAC,CAC1E,GAAG,EAaI,CACL,IAAI,UAAW,CACb,OAAOpD,CACT,EAEA,IAAI,UAAW,CACb,OAAOC,CACT,EAEA,IAAI,QAAS,CACX,OAAOG,CACT,EAEA,IAAI,QAAS,CACX,OAAOC,CACT,EAEA,IAAI,KAAM,CACR,OAAO8E,GAAO,CAChB,EAEA,IAAI,KAAM,CACR,OAAOC,GAAO,CAChB,EAEA,IAAI,MAAO,CACT,OAAO5E,CACT,EAEA,IAAI,iBAAkB,CACpB,OAAOM,CACT,EAEA,IAAI,gBAAgBuG,EAAkB,CACpCD,GAAmBC,CAAgB,CACrC,EAEA,IAAI,qBAAsB,CACxB,OAAOtG,CACT,EAEA,IAAI,oBAAoBwG,EAAsB,CAC5CD,GAAuBC,CAAoB,CAC7C,EAEA,IAAI,qBAAsB,CACxB,OAAOvG,CACT,EAEA,IAAI,oBAAoByG,EAAsB,CAC5CD,GAAuBC,CAAoB,CAC7C,EAEA,IAAI,UAAW,CACb,OAAOrG,CACT,EAEA,IAAI,SAASuG,EAAW,CACtBD,GAAYC,CAAS,CACvB,EAEA,IAAI,MAAO,CACT,OAAOlH,CACT,EAEA,IAAI,MAAO,CACT,OAAOC,CACT,EAEA,IAAI,KAAKsH,EAAO,CACdD,GAAQC,CAAK,CACf,EAEA,IAAI,aAAc,CAChB,OAAOpH,CACT,EAEA,IAAI,YAAYwH,EAAc,CAC5BD,GAAeC,CAAY,CAC7B,EAEA,IAAI,aAAc,CAChB,OAAOvH,CACT,EAEA,IAAI,YAAYyH,EAAc,CAC5BD,GAAeC,CAAY,CAC7B,EAEA,IAAI,gBAAiB,CACnB,OAAOhH,CACT,EAEA,IAAI,eAAeiH,EAAU,CAC3BlE,EAAkBkE,CAAQ,CAC5B,EAEA,IAAI,OAAQ,CACV,OAAO5H,CACT,EAEA,IAAI,MAAM8H,EAAQ,CAChBD,GAASC,CAAM,CACjB,EAEA,IAAI,SAAS,CACX,OAAOjH,CACT,EAEA,IAAI,QAAQ2H,EAAS,CACnB3H,EAAU2H,CACZ,EAEA,IAAI,YAAY,CACd,OAAO1H,CACT,EAEA,IAAI,aAAa,CACf,OAAOmE,GAAenE,CAAU,CAClC,EAEA,IAAI,WAAW2H,EAAY,CACzB3H,EAAa2H,CACf,EAEA,IAAI,gBAAiB,CACnB,OAAO7H,CACT,EAEA,IAAI,eAAeoH,EAAiB,CAClCD,GAAkBC,CAAe,CACnC,EAEA,IAAI,kBAAmB,CACrB,OAAOtH,CACT,EAEA,IAAI,iBAAiBgI,EAAkB,CACrChI,EAAmBgI,CACrB,EAEA,IAAI,YAAY,CACd,OAAOzH,CACT,EAEA,IAAI,WAAW0H,EAAY,CACzBlF,EAAakF,EAAa,CAAC,CAC7B,EAEA,IAAI,YAAY,CACd,OAAOzH,CACT,EAEA,IAAI,WAAW0H,EAAY,CACzBnF,EAAamF,EAAa,CAAC,CAC7B,EAEA,IAAI,eAAgB,CAClB,OAAOtI,CACT,EAEA,IAAI,cAAc4H,EAAgB,CAChC9B,GAAiB8B,CAAc,CACjC,EAEA,OAAA1C,GACA,OAAAC,GACA,SAAAS,EACA,QAAAI,GACA,QAAAW,GACA,aAAApD,EACA,QAtLc,IAAM,CACpBzE,EAAQ,oBAAoB,YAAa+B,CAAW,EACpD/B,EAAQ,oBAAoB,UAAWkC,CAAS,EAChDlC,EAAQ,oBAAoB,YAAaiC,CAAa,EACtDjC,EAAQ,oBAAoB,aAAciC,CAAa,EACvD,SAAS,oBAAoB,QAASoB,EAAiB,EAEvDpD,EAAS,QAAQ,EACjBC,GAAA,MAAAA,EAAU,SACZ,CA8KA,CACF,ECrqCO,IAAMuJ,GAAqB,wrBA4DlC,EAEaC,GAAqB,CAACC,EAAiBC,EAAkBC,EAAmBC,IAAqB,CAC5G,OAAQF,aAEmB,CACvBD,EAAO,OAAOG,CAAQ,EACtB,KACF,WAEyB,CACvBH,EAAO,OAAOG,CAAQ,EACtB,KACF,aAE2B,CACzBH,EAAO,SAASG,EAAU,CAAC,EAC3B,KACF,cAE4B,CAC1BH,EAAO,SAASG,EAAU,CAAC,EAC3B,KACF,cAE4B,CAC1BH,EAAO,SAASG,EAAU,CAAC,EAC3B,KACF,YAE0B,CACxBH,EAAO,QAAQG,CAAQ,EACvB,KACF,wBAEqC,CACnCH,EAAO,gBAAkBI,EAAWD,CAAQ,EAC5C,KACF,6BAEyC,CACvCH,EAAO,oBAAsBK,EAAUF,EAAU,CAAC,EAClD,KACF,sBAEmC,CACjCH,EAAO,cAAgBI,EAAWD,CAAQ,EAC1C,KACF,6BAEyC,CACvCH,EAAO,oBAAsBK,EAAUF,EAAU,GAAQ,EACzD,KACF,gBAE8B,CAC5BH,EAAO,SAAWI,EAAWD,CAAQ,EACrC,KACF,eAE6B,CAC3BH,EAAO,QAAUG,EACjB,KACF,mBAEgC,CAC9BH,EAAO,WAAaG,EACpB,KACF,yBAEsC,CACpCH,EAAO,iBAAmBI,EAAWD,CAAQ,EAC7C,KACF,yBAEsC,CACpCH,EAAO,SAAS,SAAWI,EAAWD,CAAQ,EAC9C,KACF,yBAEsC,CACjCH,EAAO,WACRA,EAAO,SAAS,SAAWI,EAAWD,CAAQ,GAEhD,KACF,YAE0B,CACxBH,EAAO,QAAQG,CAAQ,EACvB,KACF,YAE0B,CACxBH,EAAO,KAAOG,EACd,KACF,WAEiC,CAC/BH,EAAO,YAAcI,EAAWD,CAAQ,EACxC,KACF,WAEiC,CAC/BH,EAAO,YAAcI,EAAWD,CAAQ,EACxC,KACF,uBAEoC,CAClCH,EAAO,eAAiBI,EAAWD,CAAQ,EAC3C,KACF,mBAEgC,CAC3BH,EAAO,SACRA,EAAO,OAAO,gBAAkBG,GAElC,KACF,oBAEiC,CAC5BH,EAAO,SACRA,EAAO,OAAO,gBAAkBG,GAElC,KACF,aAE2B,CACzBH,EAAO,MAAQK,EAAUF,EAAUG,CAAa,EAChD,KACF,mBAEgC,CAC9BN,EAAO,WAAaG,EACpB,KACF,mBAEgC,CAC9BH,EAAO,WAAaG,EACpB,KACF,oBAEiC,CAC5BH,EAAO,QACRA,EAAO,OAAO,mCAAmCG,CAAQ,EAE3D,KACF,qBAEkC,CAC7BH,EAAO,QACRA,EAAO,OAAO,oCAAoCG,CAAQ,EAE5D,KACF,qBAEkC,CAC7BH,EAAO,QACRA,EAAO,OAAO,oDAAoCG,CAAQ,EAE5D,KACF,iBAE8B,CACzBH,EAAO,QACRA,EAAO,OAAO,sCAAgCG,CAAQ,EAExD,KACF,uBAEmC,CAC9BH,EAAO,QACRA,EAAO,OAAO,4CAAqCG,CAAQ,EAE7D,KACF,sBAEkC,CAC7BH,EAAO,QACRA,EAAO,OAAO,2CAAoCG,CAAQ,EAE5D,KACF,qBAEkC,CAC7BH,EAAO,QACRA,EAAO,OAAO,2CAAoCG,CAAQ,EAE5D,KACF,sBAEmC,CAC9BH,EAAO,QACRA,EAAO,OAAO,4CAAqCG,CAAQ,EAE7D,KACF,sBAEmC,CAC9BH,EAAO,QACRA,EAAO,OAAO,mDAAqCG,CAAQ,EAE7D,KACF,kBAE+B,CAC1BH,EAAO,QACRA,EAAO,OAAO,wCAAiCG,CAAQ,EAEzD,KACF,wBAEoC,CAC/BH,EAAO,QACRA,EAAO,OAAO,8CAAsCG,CAAQ,EAE9D,KACF,wBAEoC,CAC/BH,EAAO,QACRA,EAAO,OAAO,8CAAsCG,CAAQ,EAE9D,KACF,sBAEmC,CAC9BH,EAAO,QACRA,EAAO,OAAO,4CAAqCG,CAAQ,EAE7D,KACF,4BAEwC,CACnCH,EAAO,QACRA,EAAO,OAAO,kDAA0CG,CAAQ,EAElE,KACF,4BAEwC,CACnCH,EAAO,QACRA,EAAO,OAAO,kDAA0CG,CAAQ,EAElE,KACF,sBAEmC,CAC9BH,EAAO,QACRA,EAAO,OAAO,4CAAqCG,CAAQ,EAE7D,KACF,4BAEwC,CACnCH,EAAO,QACRA,EAAO,OAAO,kDAA0CG,CAAQ,EAElE,KACF,4BAEwC,CACnCH,EAAO,QACRA,EAAO,OAAO,kDAA0CG,CAAQ,EAElE,KACF,aAE2B,CACtBH,EAAO,SACRA,EAAO,OAAO,MAAQG,GAExB,KACF,qBAEkC,CAC7BH,EAAO,SACRA,EAAO,OAAO,aAAeG,GAE/B,KACF,uBAEoC,CAClCH,EAAO,eAAiBG,EACxB,KACF,EAEJ,EChVA,IAAMI,GAAN,cAA0B,WAAY,CAkcpC,aAAc,CACZ,MAAM,EAzbRC,GAAA,KAAO,UA2bL,KAAK,aAAa,CAChB,KAAM,MACR,CAAC,CACH,CAlcA,WAAW,oBAAqB,CAC9B,OAAOC,EACT,CAMA,IAAW,KAAKC,EAAc,CACzB,KAAK,QACN,KAAK,OAAO,QAAQA,CAAK,CAE7B,CAEA,IAAW,MAAO,CArCpB,IAAAC,EAsCI,OAAOA,EAAA,KAAK,SAAL,YAAAA,EAAa,IACtB,CAEA,IAAW,SAASC,EAAoB,CACnC,KAAK,SACN,KAAK,OAAO,SAAWA,EAE3B,CAEA,IAAW,UAAW,CA/CxB,IAAAD,EAAAE,EAgDI,OAAOA,GAAAF,EAAA,KAAK,SAAL,YAAAA,EAAa,WAAb,KAAAE,EAAyB,EAClC,CAEA,IAAW,MAAMC,EAAqC,CAnDxD,IAAAH,GAoDIA,EAAA,KAAK,SAAL,MAAAA,EAAa,SAASG,EAAQ,EAChC,CAEA,IAAW,OAAQ,CACjB,GAAG,CAAC,KAAK,OAAQ,OACjB,IAAMC,EAAM,KAAK,OAAO,aAAa,KAAK,OAAO,SAAS,OAAO,EACjE,OAAOC,EAASD,CAAG,EAAIE,EAAUF,EAAKA,CAAG,EAAIA,CAC/C,CAKA,IAAW,OAAOA,EAAkC,CAClD,KAAK,MAAQA,CACf,CAKA,IAAW,QAAS,CAClB,OAAO,KAAK,KACd,CAEA,IAAW,OAAOG,EAAsC,CA3E1D,IAAAP,GA4EIA,EAAA,KAAK,SAAL,MAAAA,EAAa,SAASO,EAAS,EACjC,CAEA,IAAW,QAAS,CAClB,GAAG,CAAC,KAAK,QAAU,CAAC,KAAK,OAAO,SAAU,OAC1C,IAAMH,EAAM,KAAK,OAAO,aAAa,KAAK,OAAO,SAAS,OAAO,EACjE,OAAOC,EAASD,CAAG,EAAIE,EAAUF,EAAKA,CAAG,EAAIA,CAC/C,CAEA,IAAW,KAAKI,EAAc,CArFhC,IAAAR,GAsFIA,EAAA,KAAK,SAAL,MAAAA,EAAa,QAAQQ,EACvB,CAEA,IAAW,MAAO,CAzFpB,IAAAR,EA0FI,OAAOA,EAAA,KAAK,SAAL,YAAAA,EAAa,IACtB,CAEA,IAAW,IAAIS,EAA0C,CA7F3D,IAAAT,GA8FIA,EAAA,KAAK,SAAL,MAAAA,EAAa,OAAOS,EACtB,CAEA,IAAW,KAAM,CAjGnB,IAAAT,EAkGI,OAAOA,EAAA,KAAK,SAAL,YAAAA,EAAa,GACtB,CAEA,IAAW,IAAIU,EAA0C,CArG3D,IAAAV,GAsGIA,EAAA,KAAK,SAAL,MAAAA,EAAa,OAAOU,EACtB,CAEA,IAAW,KAAM,CAzGnB,IAAAV,EA0GI,OAAOA,EAAA,KAAK,SAAL,YAAAA,EAAa,GACtB,CAEA,IAAW,MAAMW,EAAgB,CAC5B,CAAC,KAAK,SACT,KAAK,OAAO,MAAQA,EACtB,CAEA,IAAW,OAAQ,CAlHrB,IAAAX,EAAAE,EAmHI,OAAOA,GAAAF,EAAA,KAAK,SAAL,YAAAA,EAAa,QAAb,KAAAE,EAAsBU,CAC/B,CAEA,IAAW,KAAKC,EAA6B,CACxC,CAAC,KAAK,SACT,KAAK,OAAO,KAAOA,GAAA,KAAAA,eACrB,CAEA,IAAW,MAAO,CA3HpB,IAAAb,EA4HI,QAAOA,EAAA,KAAK,SAAL,YAAAA,EAAa,mBACtB,CAEA,IAAW,gBAAgBc,EAA2B,CACjD,CAAC,KAAK,SACT,KAAK,OAAO,gBAAkBA,EAChC,CAEA,IAAW,iBAAkB,CApI/B,IAAAd,EAAAE,EAqII,OAAOA,GAAAF,EAAA,KAAK,SAAL,YAAAA,EAAa,kBAAb,KAAAE,EAAgC,EACzC,CAEA,IAAW,oBAAoBa,EAA8B,CACxD,CAAC,KAAK,SACT,KAAK,OAAO,oBAAsBA,EACpC,CAEA,IAAW,qBAAsB,CA7InC,IAAAf,EAAAE,EA8II,OAAOA,GAAAF,EAAA,KAAK,SAAL,YAAAA,EAAa,sBAAb,KAAAE,EAAoC,CAC7C,CAEA,IAAW,oBAAoBc,EAA8B,CACxD,CAAC,KAAK,SACT,KAAK,OAAO,oBAAsBA,EACpC,CAEA,IAAW,qBAAsB,CAtJnC,IAAAhB,EAAAE,EAuJI,OAAOA,GAAAF,EAAA,KAAK,SAAL,YAAAA,EAAa,sBAAb,KAAAE,EAAoC,GAC7C,CAEA,IAAW,MAAMe,EAAuB,CACnC,CAAC,KAAK,QAAU,CAAC,KAAK,OAAO,SAChC,KAAK,OAAO,OAAO,MAAQA,EAC7B,CAEA,IAAW,OAAQ,CA/JrB,IAAAjB,EAAAE,EAAAgB,EAgKI,OAAOA,GAAAhB,GAAAF,EAAA,KAAK,SAAL,YAAAA,EAAa,SAAb,YAAAE,EAAqB,QAArB,KAAAgB,EAA8B,IACvC,CAEA,IAAW,IAAIC,EAAe,CACzB,CAAC,KAAK,SACT,KAAK,OAAO,YAAcA,EAC5B,CAEA,IAAW,KAAM,CAxKnB,IAAAnB,EAAAE,EAyKI,OAAOA,GAAAF,EAAA,KAAK,SAAL,YAAAA,EAAa,cAAb,KAAAE,EAA4B,EACrC,CAEA,IAAW,IAAIkB,EAAe,CACzB,CAAC,KAAK,SACT,KAAK,OAAO,YAAcA,EAC5B,CAEA,IAAW,KAAM,CAjLnB,IAAApB,EAAAE,EAkLI,OAAOA,GAAAF,EAAA,KAAK,SAAL,YAAAA,EAAa,cAAb,KAAAE,EAA4B,EACrC,CAEA,IAAW,iBAAiBmB,EAA4B,CACnD,CAAC,KAAK,SACT,KAAK,OAAO,iBAAmBA,EACjC,CAEA,IAAW,kBAAmB,CA1LhC,IAAArB,EAAAE,EA2LI,OAAOA,GAAAF,EAAA,KAAK,SAAL,YAAAA,EAAa,mBAAb,KAAAE,EAAiC,EAC1C,CAEA,IAAW,eAAeoB,EAAqC,CAC1D,CAAC,KAAK,SACT,KAAK,OAAO,eAAiBA,EAC/B,CAEA,IAAW,gBAAiB,CAnM9B,IAAAtB,EAoMI,OAAOA,EAAA,KAAK,SAAL,YAAAA,EAAa,cACtB,CAEA,IAAW,QAAQuB,EAAuC,CACrD,CAAC,KAAK,SACT,KAAK,OAAO,QAAUA,EACxB,CAEA,IAAW,SAAU,CA5MvB,IAAAvB,EA6MI,OAAOA,EAAA,KAAK,SAAL,YAAAA,EAAa,OACtB,CAEA,IAAW,WAAWwB,EAAqB,CACtC,CAAC,KAAK,SACT,KAAK,OAAO,WAAaA,EAC3B,CAEA,IAAW,YAAa,CArN1B,IAAAxB,EAAAE,EAsNI,OAAOA,GAAAF,EAAA,KAAK,SAAL,YAAAA,EAAa,aAAb,KAAAE,EAA2BuB,CACpC,CAEA,IAAW,aAAc,CAzN3B,IAAAzB,EA0NI,OAAOA,EAAA,KAAK,SAAL,YAAAA,EAAa,WACtB,CAEA,IAAW,eAAe0B,EAA0B,CAC/C,CAAC,KAAK,SACT,KAAK,OAAO,eAAiBA,EAC/B,CAEA,IAAW,gBAAiB,CAlO9B,IAAA1B,EAAAE,EAmOI,OAAOA,GAAAF,EAAA,KAAK,SAAL,YAAAA,EAAa,iBAAb,KAAAE,EAA+B,EACxC,CAEA,IAAW,YAAYyB,EAAkC,CACpD,CAAC,KAAK,QAAU,CAAC,KAAK,OAAO,QAChC,KAAK,OAAO,OAAO,mCAAmCA,CAAY,CACpE,CAEA,IAAW,aAAc,CA3O3B,IAAA3B,EAAAE,EA4OI,OAAOA,GAAAF,EAAA,KAAK,SAAL,YAAAA,EAAa,SAAb,YAAAE,EAAqB,mCAC9B,CAEA,IAAW,aAAa0B,EAAmC,CACtD,CAAC,KAAK,QAAU,CAAC,KAAK,OAAO,QAChC,KAAK,OAAO,OAAO,oCAAoCA,CAAa,CACtE,CAEA,IAAW,cAAe,CApP5B,IAAA5B,EAAAE,EAqPI,OAAOA,GAAAF,EAAA,KAAK,SAAL,YAAAA,EAAa,SAAb,YAAAE,EAAqB,oCAC9B,CAEA,IAAW,aAAa2B,EAAmC,CACtD,CAAC,KAAK,QAAU,CAAC,KAAK,OAAO,QAChC,KAAK,OAAO,OAAO,oDAAoCA,CAAa,CACtE,CAEA,IAAW,cAAe,CA7P5B,IAAA7B,EAAAE,EA8PI,OAAOA,GAAAF,EAAA,KAAK,SAAL,YAAAA,EAAa,SAAb,YAAAE,EAAqB,oDAC9B,CAEA,IAAW,SAAS4B,EAA+B,CAC9C,CAAC,KAAK,QAAU,CAAC,KAAK,OAAO,QAChC,KAAK,OAAO,OAAO,sCAAgCA,CAAS,CAC9D,CAEA,IAAW,UAAW,CAtQxB,IAAA9B,EAAAE,EAuQI,OAAOA,GAAAF,EAAA,KAAK,SAAL,YAAAA,EAAa,SAAb,YAAAE,EAAqB,sCAC9B,CAEA,IAAW,cAAc6B,EAAoC,CACxD,CAAC,KAAK,QAAU,CAAC,KAAK,OAAO,QAChC,KAAK,OAAO,OAAO,4CAAqCA,CAAc,CACxE,CAEA,IAAW,eAAgB,CA/Q7B,IAAA/B,EAAAE,EAgRI,OAAOA,GAAAF,EAAA,KAAK,SAAL,YAAAA,EAAa,SAAb,YAAAE,EAAqB,4CAC9B,CAEA,IAAW,aAAa8B,EAAmC,CACtD,CAAC,KAAK,QAAU,CAAC,KAAK,OAAO,QAChC,KAAK,OAAO,OAAO,2CAAoCA,CAAa,CACtE,CAEA,IAAW,cAAe,CAxR5B,IAAAhC,EAAAE,EAyRI,OAAOA,GAAAF,EAAA,KAAK,SAAL,YAAAA,EAAa,SAAb,YAAAE,EAAqB,2CAC9B,CAEA,IAAW,aAAa+B,EAAmC,CACtD,CAAC,KAAK,QAAU,CAAC,KAAK,OAAO,QAChC,KAAK,OAAO,OAAO,2CAAoCA,CAAa,CACtE,CAEA,IAAW,cAAe,CAjS5B,IAAAjC,EAAAE,EAkSI,OAAOA,GAAAF,EAAA,KAAK,SAAL,YAAAA,EAAa,SAAb,YAAAE,EAAqB,2CAC9B,CAEA,IAAW,cAAcgC,EAAoC,CACxD,CAAC,KAAK,QAAU,CAAC,KAAK,OAAO,QAChC,KAAK,OAAO,OAAO,4CAAqCA,CAAc,CACxE,CAEA,IAAW,eAAgB,CA1S7B,IAAAlC,EAAAE,EA2SI,OAAOA,GAAAF,EAAA,KAAK,SAAL,YAAAA,EAAa,SAAb,YAAAE,EAAqB,4CAC9B,CAEA,IAAW,cAAciC,EAAoC,CACxD,CAAC,KAAK,QAAU,CAAC,KAAK,OAAO,QAChC,KAAK,OAAO,OAAO,mDAAqCA,CAAc,CACxE,CAEA,IAAW,eAAgB,CAnT7B,IAAAnC,EAAAE,EAoTI,OAAOA,GAAAF,EAAA,KAAK,SAAL,YAAAA,EAAa,SAAb,YAAAE,EAAqB,mDAC9B,CAEA,IAAW,aAAakC,EAA8B,CACjD,CAAC,KAAK,QAAU,CAAC,KAAK,OAAO,SAChC,KAAK,OAAO,OAAO,aAAeA,EACpC,CAEA,IAAW,cAAe,CA5T5B,IAAApC,EAAAE,EAAAgB,EA6TI,OAAOA,GAAAhB,GAAAF,EAAA,KAAK,SAAL,YAAAA,EAAa,SAAb,YAAAE,EAAqB,eAArB,KAAAgB,EAAqC,IAC9C,CAEA,IAAW,UAAUmB,EAAgC,CAChD,CAAC,KAAK,QAAU,CAAC,KAAK,OAAO,QAChC,KAAK,OAAO,OAAO,wCAAiCA,CAAU,CAChE,CAEA,IAAW,WAAY,CArUzB,IAAArC,EAAAE,EAsUI,OAAOA,GAAAF,EAAA,KAAK,SAAL,YAAAA,EAAa,SAAb,YAAAE,EAAqB,wCAC9B,CAEA,IAAW,eAAeoC,EAAqC,CAC1D,CAAC,KAAK,QAAU,CAAC,KAAK,OAAO,QAChC,KAAK,OAAO,OAAO,8CAAsCA,CAAe,CAC1E,CAEA,IAAW,gBAAiB,CA9U9B,IAAAtC,EAAAE,EA+UI,OAAOA,GAAAF,EAAA,KAAK,SAAL,YAAAA,EAAa,SAAb,YAAAE,EAAqB,8CAC9B,CAEA,IAAW,eAAeqC,EAAqC,CAC1D,CAAC,KAAK,QAAU,CAAC,KAAK,OAAO,QAChC,KAAK,OAAO,OAAO,8CAAsCA,CAAe,CAC1E,CAEA,IAAW,gBAAiB,CAvV9B,IAAAvC,EAAAE,EAwVI,OAAOA,GAAAF,EAAA,KAAK,SAAL,YAAAA,EAAa,SAAb,YAAAE,EAAqB,8CAC9B,CAEA,IAAW,cAAcsC,EAAoC,CACxD,CAAC,KAAK,QAAU,CAAC,KAAK,OAAO,QAChC,KAAK,OAAO,OAAO,4CAAqCA,CAAc,CACxE,CAEA,IAAW,eAAgB,CAhW7B,IAAAxC,EAAAE,EAiWI,OAAOA,GAAAF,EAAA,KAAK,SAAL,YAAAA,EAAa,SAAb,YAAAE,EAAqB,4CAC9B,CAEA,IAAW,mBAAmBuC,EAAyC,CAClE,CAAC,KAAK,QAAU,CAAC,KAAK,OAAO,QAChC,KAAK,OAAO,OAAO,kDAA0CA,CAAmB,CAClF,CAEA,IAAW,oBAAqB,CAzWlC,IAAAzC,EAAAE,EA0WI,OAAOA,GAAAF,EAAA,KAAK,SAAL,YAAAA,EAAa,SAAb,YAAAE,EAAqB,kDAC9B,CAEA,IAAW,mBAAmBwC,EAAyC,CAClE,CAAC,KAAK,QAAU,CAAC,KAAK,OAAO,QAChC,KAAK,OAAO,OAAO,kDAA0CA,CAAmB,CAClF,CAEA,IAAW,oBAAqB,CAlXlC,IAAA1C,EAAAE,EAmXI,OAAOA,GAAAF,EAAA,KAAK,SAAL,YAAAA,EAAa,SAAb,YAAAE,EAAqB,kDAC9B,CAEA,IAAW,cAAcyC,EAAoC,CACxD,CAAC,KAAK,QAAU,CAAC,KAAK,OAAO,QAChC,KAAK,OAAO,OAAO,4CAAqCA,CAAc,CACxE,CAEA,IAAW,eAAgB,CA3X7B,IAAA3C,EAAAE,EA4XI,OAAOA,GAAAF,EAAA,KAAK,SAAL,YAAAA,EAAa,SAAb,YAAAE,EAAqB,4CAC9B,CAEA,IAAW,mBAAmB0C,EAAyC,CAClE,CAAC,KAAK,QAAU,CAAC,KAAK,OAAO,QAChC,KAAK,OAAO,OAAO,kDAA0CA,CAAmB,CAClF,CAEA,IAAW,oBAAqB,CApYlC,IAAA5C,EAAAE,EAqYI,OAAOA,GAAAF,EAAA,KAAK,SAAL,YAAAA,EAAa,SAAb,YAAAE,EAAqB,kDAC9B,CAEA,IAAW,mBAAmB2C,EAAyC,CAClE,CAAC,KAAK,QAAU,CAAC,KAAK,OAAO,QAChC,KAAK,OAAO,OAAO,kDAA0CA,CAAmB,CAClF,CAEA,IAAW,oBAAqB,CA7YlC,IAAA7C,EAAAE,EA8YI,OAAOA,GAAAF,EAAA,KAAK,SAAL,YAAAA,EAAa,SAAb,YAAAE,EAAqB,kDAC9B,CAEA,IAAW,iBAAiB4C,EAA4B,CACnD,CAAC,KAAK,SACT,KAAK,OAAO,SAAS,SAAWA,EAClC,CAEA,IAAW,kBAAmB,CAtZhC,IAAA9C,EAAAE,EAuZI,OAAOA,GAAAF,EAAA,KAAK,SAAL,YAAAA,EAAa,SAAS,WAAtB,KAAAE,EAAkC,EAC3C,CAEA,IAAW,iBAAiB6C,EAA4B,CACnD,CAAC,KAAK,QAAU,CAAC,KAAK,OAAO,WAChC,KAAK,OAAO,SAAS,SAAWA,EAClC,CAEA,IAAW,kBAAmB,CA/ZhC,IAAA/C,EAAAE,EAAAgB,EAgaI,OAAOA,GAAAhB,GAAAF,EAAA,KAAK,SAAL,YAAAA,EAAa,WAAb,YAAAE,EAAuB,WAAvB,KAAAgB,EAAmC,EAC5C,CAEA,IAAW,WAAW8B,EAAiC,CAClD,CAAC,KAAK,QAAU,CAAC,KAAK,OAAO,SAChC,KAAK,OAAO,OAAO,gBAAkBA,GAAA,KAAAA,EAAe,KACtD,CAEA,IAAW,YAAa,CAxa1B,IAAAhD,EAAAE,EAAAgB,EAyaI,OAAOA,GAAAhB,GAAAF,EAAA,KAAK,SAAL,YAAAA,EAAa,SAAb,YAAAE,EAAqB,kBAArB,KAAAgB,EAAwC,EACjD,CAEA,IAAW,YAAY+B,EAAkC,CACpD,CAAC,KAAK,QAAU,CAAC,KAAK,OAAO,SAChC,KAAK,OAAO,OAAO,gBAAkBA,GAAA,KAAAA,EAAgB,KACvD,CAEA,IAAW,aAAc,CAjb3B,IAAAjD,EAAAE,EAAAgB,EAkbI,OAAOA,GAAAhB,GAAAF,EAAA,KAAK,SAAL,YAAAA,EAAa,SAAb,YAAAE,EAAqB,kBAArB,KAAAgB,EAAwC,EACjD,CAEA,IAAW,WAAWgC,EAAiC,CAClD,CAAC,KAAK,SACT,KAAK,OAAO,WAAaA,EAC3B,CAEA,IAAW,YAAa,CA1b1B,IAAAlD,EAAAE,EA2bI,OAAOA,GAAAF,EAAA,KAAK,SAAL,YAAAA,EAAa,SAAS,QAAQ,gBAA9B,KAAAE,EAA+C,MACxD,CAEA,IAAW,WAAWiD,EAAiC,CAClD,CAAC,KAAK,SACT,KAAK,OAAO,WAAaA,EAC3B,CAEA,IAAW,YAAa,CAnc1B,IAAAnD,EAAAE,EAAAgB,EAocI,OAAOA,GAAAhB,GAAAF,EAAA,KAAK,SAAL,YAAAA,EAAa,WAAb,YAAAE,EAAuB,QAAQ,gBAA/B,KAAAgB,EAAgD,MACzD,CAEA,IAAW,eAAe,CAvc5B,IAAAlB,EAAAE,EAwcI,OAAOA,GAAAF,EAAA,KAAK,SAAL,YAAAA,EAAa,gBAAb,KAAAE,EAA8B,EACvC,CAEA,IAAW,cAAckD,EAAqD,CACzE,KAAK,SACN,KAAK,OAAO,cAAgBC,EAAWD,CAAc,EAEzD,CAeA,mBAAoB,CA9dtB,IAAApD,EAAAE,EA+dI,GAAI,CAAC,KAAK,WAAY,OACtB,KAAK,WAAW,UAAYoD,GAAaC,EAAM,EAG/C,IAAMC,GAAYxD,EAAA,KAAK,aAAL,YAAAA,EAAiB,cAAc,YAC3CyD,EAAWD,EAAYE,GAAQ,KAAMF,EAAW,CAAC,EAAI,KAC3D,GAAG,CAACC,EAAU,OAGd,IAAIE,EAA4B,KAC7B,KAAK,aAAa,QAAQ,IAAM,OACjCA,EAAWC,GAAe,KAAMJ,CAAS,GAI3C,IAAMK,GAAU3D,EAAA,KAAK,aAAL,YAAAA,EAAiB,eAAe,gBAC7C,CAAC2D,IACJ,KAAK,OAASC,GAAO,KAAMD,EAASJ,EAAUE,CAAQ,EACxD,CAKA,sBAAuB,CAClB,CAAC,KAAK,QAET,KAAK,OAAO,QAAQ,CACtB,CAEA,yBAAyBI,EAAkBC,EAAkBC,EAAkB,CAC1E,CAAC,KAAK,QAETC,GAAmB,KAAK,OAAQH,EAAUC,EAAUC,CAAQ,CAC9D,CACF,EAEOE,GAAQvE,GChgBV,eAAe,IAAI,uBAAuB,GAC7C,eAAe,OAAO,wBAAyBwE,EAAW",
  "names": ["main_html_default", "styles", "convertRange", "min", "max", "a", "b", "x", "temp", "isNumber", "input", "getNumber", "defaultValue", "roundToStep", "num", "step", "setDecimalPlaces", "decimalPlaces", "coeff", "__pow", "getBoolean", "val", "parseData", "dataString", "parts", "list", "allValuesAreNumbers", "i", "part", "isNumber", "item", "findValueIndexInData", "val", "data", "PanelFill", "$fill", "type", "percent1", "percent2", "rightToLeft", "bottomToTop", "VALUE_LABEL1_CODE_NAME", "VALUE_LABEL2_CODE_NAME", "MIN_LABEL_CODE_NAME", "MAX_LABEL_CODE_NAME", "Labels", "$component", "$slider", "requestUpdateValues", "$labelsRow", "generatedLabelsEnabled", "$genValue1Label", "$genValue2Label", "$genMinLabel", "$genMaxLabel", "referenceLabel1", "referenceLabel2", "$referenceLabel1", "$referenceLabel2", "createLabel", "codeName", "$label", "getOuterSlot", "getInnerSlot", "_a", "getLabelFromSlot", "$slot", "createGenerateLabels", "textValue1", "textValue2", "rtlOrBtt", "min", "max", "setLabelsOrder", "updateValues", "removeGeneratedLabels", "setGenLabelsEnabled", "enabled", "label1hasSlot", "label2hasSlot", "minHasSlot", "maxHasSlot", "$label1Slot", "$label2Slot", "$minSlot", "$maxSlot", "setReferenceLabel1", "_referenceLabel1", "setReferenceLabel2", "_referenceLabel2", "sendPointerClickedEvent", "$component", "$pointer", "sendMouseDownEvent", "evt", "sendMouseUpEvent", "sendOnKeyDownEvent", "sendChangeEvent", "value1", "value2", "detail", "isNumber", "getNumber", "Styles", "$component", "$slider", "theme", "pointerShape", "stylesMap", "removeClassesStartWith", "prefix", "classList", "className", "setTheme", "val", "setPointerShape", "setStyle", "key", "value", "getStyle", "list", "item", "cssVariableName", "cssVariableValue", "STORAGE_KEY", "isStorageEnabled", "storageType", "temp", "setLocalStorageItem", "storageName", "value", "escapedValue", "getLocalStorageItem", "setSessionStorageItem", "getSessionStorageItem", "saveToStorage", "getFromStorage", "getStorageKey2", "storageKey", "restoreFromStorage", "storage", "setInitialPointersValues", "val1", "val2", "restoredValue1", "restoredValue2", "Pointer", "$component", "$pointer", "index", "percent", "arrowLeft", "arrowRight", "arrowUp", "arrowDown", "disabled", "updatePosition", "_percent", "_leftWall", "_rightWall", "_type", "_rightToLeft", "_bottomToTop", "percentPos", "isClicked", "$target", "setCallbacks", "_arrowLeft", "_arrowRight", "_arrowUp", "_arrowDown", "setDisabled", "_disabled", "setAttr", "key", "value", "getAttr", "pointerKeyDown", "evt", "sendOnKeyDownEvent", "pointerClicked", "sendPointerClickedEvent", "createPointer2", "$component", "$pointer1", "$pointer2", "Pointer", "MIN_DEFAULT", "MAX_DEFAULT", "ROUND_DEFAULT", "Slider", "$component", "$slider", "pointer1", "pointer2", "selectedPointer", "panelFill", "labels", "styles", "min", "max", "step", "data", "type", "round", "rightToLeft", "bottomToTop", "pointersOverlap", "pointersMinDistance", "pointersMaxDistance", "rangeDragging", "rangeDraggingStart", "rangeDraggingDiff", "disabled", "keyboardDisabled", "generateLabels", "animateOnClick", "storage", "storageKey", "STORAGE_KEY", "storageInitialized", "ariaLabel1", "ariaLabel2", "onMouseDown", "evt", "onValueChange", "onMouseUp", "sendMouseDownEvent", "sendMouseUpEvent", "getActivePointer", "$target", "percent", "_a", "panelFillClicked", "isPanelFillClicked", "isPanelClicked", "distance1", "distance2", "boxHeight", "boxTop", "mouseY", "boxWidth", "boxLeft", "mouseX", "setPositions", "pointerMouseWheel", "scrollTop", "rightOrBottom", "goPrev", "goNext", "arrowLeft", "pointerIndex", "arrowRight", "arrowUp", "arrowDown", "index", "_percent", "getRelativeStep", "addSecondPointer", "createPointer2", "getBoolean", "setAriaLabel", "setGenerateLabels", "removeSecondPointer", "updateLabels", "getTextValue", "getTextMinMax", "getPointer1LeftWall", "converted", "getPointer1RightWall", "getPointer2LeftWall", "getPointer2RightWall", "_step", "convertRange", "val", "setDecimalPlaces", "getMin", "getMax", "minOrMax", "getPointerMin", "getPointerMax", "roundToStep", "value1text", "value2text", "saveToStorage", "getStorageKey2", "setAriaMinMax", "sendChangeEvent", "setMinMax", "_min", "_max", "getNumber", "setMin", "setMax", "_b", "_c", "_d", "setInitialPointersValues", "_value", "_value1", "_value2", "val1str", "setValue", "_val", "setRangeDragging", "findValueIndexInData", "setStep", "isNumber", "diff", "setPointersOverlap", "_pointersOverlap", "setPointersMinDistance", "_pointersMinDistance", "setPointersMaxDistance", "_pointersMaxDistance", "setDisabled", "_disabled", "setData", "_data", "parseData", "setType", "_type", "$box", "aria", "setRightToLeft", "_rightToLeft", "setBottomToTop", "_bottomToTop", "_enabled", "setRound", "_round", "setAnimateOnClick", "_animateOnClick", "_ariaLabel", "_rangeDragging", "$fill", "PanelFill", "Labels", "Styles", "restoreFromStorage", "_storage", "_storageKey", "_keyboardDisabled", "_ariaLabel1", "_ariaLabel2", "observedAttributes", "onAttributesChange", "slider", "attrName", "_oldValue", "newValue", "getBoolean", "getNumber", "ROUND_DEFAULT", "RangeSlider", "__publicField", "observedAttributes", "_step", "_a", "_disabled", "_b", "_value", "val", "isNumber", "getNumber", "_value2", "_data", "_min", "_max", "_round", "ROUND_DEFAULT", "_type", "_pointersOverlap", "_pointersMinDistance", "_pointersMaxDistance", "_theme", "_c", "_rtl", "_btt", "_keyboardDisabled", "_animateOnClick", "_storage", "_storageKey", "STORAGE_KEY", "_generateLabels", "_sliderWidth", "_sliderHeight", "_sliderRadius", "_sliderBg", "_sliderBgHover", "_sliderBgFill", "_pointerWidth", "_pointerHeight", "_pointerRadius", "_pointerShape", "_pointerBg", "_pointerBgHover", "_pointerBgFocus", "_pointerShadow", "_pointerShadowHover", "_pointerShadowFocus", "_pointerBorder", "_pointerBorderHover", "_pointerBorderFocus", "_pointer1Disabled", "_pointer2Disabled", "_valueLabel", "_value2Label", "_ariaLabel1", "_ariaLabel2", "_rangeDragging", "getBoolean", "main_html_default", "styles_default", "$pointer1", "pointer1", "Pointer", "pointer2", "createPointer2", "$slider", "Slider", "attrName", "oldValue", "newValue", "onAttributesChange", "range_slider_default", "range_slider_default"]
}
