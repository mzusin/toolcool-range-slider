{
  "version": 3,
  "sources": ["../../src/plugins/storage-plugin/storage-provider.ts", "../../src/plugins/storage-plugin/index.ts"],
  "sourcesContent": ["import { StorageTypeEnum } from './storage-type-enum';\nexport const STORAGE_KEY = 'tc-range-slider';\n\nexport const isStorageEnabled = (storageType: StorageTypeEnum) => {\n  if (storageType === StorageTypeEnum.localStorage) {\n    const temp = 'test';\n\n    try {\n      window.localStorage.setItem(temp, temp);\n      window.localStorage.removeItem(temp);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  if (storageType === StorageTypeEnum.sessionStorage) {\n    const temp = 'test';\n\n    try {\n      window.sessionStorage.setItem(temp, temp);\n      window.sessionStorage.removeItem(temp);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  return false;\n};\n\n// eslint-disable-next-line  @typescript-eslint/no-explicit-any\nexport const setLocalStorageItem = (storageName: string, value: any) => {\n  const escapedValue = encodeURIComponent(typeof value === 'object' ? JSON.stringify(value) : value);\n  window.localStorage.setItem(storageName, escapedValue);\n};\n\nexport const getLocalStorageItem = (storageName: string) => {\n  const value = window.localStorage.getItem(storageName);\n  return value === null ? null : decodeURIComponent(value);\n};\n\n// eslint-disable-next-line  @typescript-eslint/no-explicit-any\nexport const setSessionStorageItem = (storageName: string, value: any) => {\n  const escapedValue = encodeURIComponent(typeof value === 'object' ? JSON.stringify(value) : value);\n  window.sessionStorage.setItem(storageName, escapedValue);\n};\n\nexport const getSessionStorageItem = (storageName: string) => {\n  const value = window.sessionStorage.getItem(storageName);\n  return value === null ? null : decodeURIComponent(value);\n};\n\n// eslint-disable-next-line  @typescript-eslint/no-explicit-any\nexport const saveToStorage = (storageType: StorageTypeEnum, storageName: string, value: any) => {\n  // if this storage type is not supported -> do nothing\n  if (!isStorageEnabled(storageType)) return;\n\n  switch (storageType) {\n    case StorageTypeEnum.localStorage: {\n      setLocalStorageItem(storageName, value);\n      break;\n    }\n\n    case StorageTypeEnum.sessionStorage: {\n      setSessionStorageItem(storageName, value);\n      break;\n    }\n  }\n};\n\nexport const getFromStorage = (storageType: StorageTypeEnum, storageName: string) => {\n  // if this storage type is not supported -> do nothing\n  if (!isStorageEnabled(storageType)) return null;\n\n  if (storageType === StorageTypeEnum.localStorage) {\n    return getLocalStorageItem(storageName);\n  }\n\n  if (storageType === StorageTypeEnum.sessionStorage) {\n    return getSessionStorageItem(storageName);\n  }\n\n  return null;\n};\n\nexport const getStorageKey2 = (storageKey: string) => {\n  return `${ storageKey }-2`;\n};\n\n/**\n * try to restore values from session or local storage\n * when component is initialized\n */\nexport const restoreFromStorage = (\n  storage: StorageTypeEnum | undefined,\n  storageKey: string,\n  updatePointers: (value1: string | number | undefined | null, value2: string | number | undefined | null) => void\n) => {\n  if (!storage) return;\n\n  let val1: string | null = null;\n  let val2: string | null = null;\n\n  const restoredValue1 = getFromStorage(storage, storageKey);\n  const restoredValue2 = getFromStorage(storage, getStorageKey2(storageKey));\n\n  if(restoredValue1 !== null && restoredValue1 !== undefined){\n    val1 = restoredValue1;\n  }\n\n  if(restoredValue2 !== null && restoredValue2 !== undefined){\n    val2 = restoredValue2;\n  }\n\n  if(val1 === null && val2 === null) return;\n\n  updatePointers(val1 !== null ? val1 : val2, val2);\n};\n", "import { IPlugin } from '../../core/plugins/interfaces';\nimport { StorageTypeEnum } from './storage-type-enum';\nimport { getStorageKey2, restoreFromStorage, saveToStorage, STORAGE_KEY } from './storage-provider';\n\n/**\n * Storage Plugin.\n * Important: the plugin script should be included BEFORE the core script.\n */\n\n/**\n * Required: init ToolCool Range Slider plugins namespace if not defined yet\n */\nwindow.tcRangeSliderPlugins = window.tcRangeSliderPlugins || [];\n\n/**\n * Optional: array of attribute names to monitor for changes\n * Read more: https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements\n */\nwindow.tcRangeSliderObservedAttr = window.tcRangeSliderObservedAttr || [];\nwindow.tcRangeSliderObservedAttr.push('storage');\nwindow.tcRangeSliderObservedAttr.push('storage-key');\n\nconst StoragePlugin = () : IPlugin => {\n\n  let storage: StorageTypeEnum | undefined = undefined;\n  let storageKey = STORAGE_KEY;\n  let storageInitialized = false;\n\n  return {\n    /**\n     * Required: unique plugin name\n     */\n    get name() {\n      return 'Storage Labels';\n    },\n\n    /**\n     * Optional: plugin initialization\n     */\n    init: (_$component, _requestUpdate, _updatePointers) => {\n\n      // if the storage is enabled ---> try to restore the values\n      storage = (_$component.getAttribute('storage') as StorageTypeEnum) || undefined;\n      storageKey = _$component.getAttribute('storage-key') || STORAGE_KEY;\n\n      if (storage){\n        restoreFromStorage(storage, storageKey, _updatePointers);\n        storageInitialized = true;\n      }\n\n    },\n\n    /**\n     * Optional:\n     * this will be called each time\n     * range slider updates pointer positions\n     */\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    update: (\n      _percent1: number,\n      _percent2: number | undefined,\n      _textValue1: string | number | undefined,\n      _textValue2: string | number | undefined,\n      _min: number,\n      _max: number,\n      _textMin: number | string | undefined,\n      _textMax: number | string | undefined,\n      _rightToLeft: boolean,\n      _bottomToTop: boolean\n    ) => {\n      if (storage && storageInitialized) {\n        saveToStorage(storage, storageKey, _textValue1);\n        if(_percent2 !== undefined){\n          saveToStorage(storage, getStorageKey2(storageKey), _textValue2);\n        }\n      }\n    },\n\n    /**\n     * Optional:\n     * this will be called each time observed HTML attribute changes;\n     * observed attributes are defined in window.tcRangeSliderObservedAttr array above.\n     */\n    onAttrChange: (_attrName: string, _oldValue: string, _newValue: string) => {\n\n      switch (_attrName){\n        case 'storage': {\n          storage = _newValue as StorageTypeEnum;\n          break;\n        }\n\n        case 'storage-key': {\n          storageKey = _newValue;\n          break;\n        }\n      }\n    },\n\n    /**\n     * Optional:\n     * List of getters and setter that can be used to create slider API.\n     */\n    gettersAndSetters: [\n      {\n        name: 'storage',\n        attributes: {\n          get () {\n            return storage;\n          },\n\n          set: (_storage) => {\n            storage = _storage;\n          },\n        }\n      },\n      {\n        name: 'storageKey',\n        attributes: {\n          get () {\n            return storageKey ?? STORAGE_KEY;\n          },\n\n          set: (_storageKey) => {\n            storageKey = _storageKey;\n          },\n        }\n      },\n      {\n        name: 'storageKey2',\n        attributes: {\n          get () {\n            return getStorageKey2(storageKey);\n          },\n        }\n      }\n    ],\n  };\n};\n\n/**\n * Required: add current plugin to the plugins list.\n */\nwindow.tcRangeSliderPlugins.push(StoragePlugin);\n\nexport default StoragePlugin;"],
  "mappings": ";;;;;;;MACO,IAAMA,EAAc,kBAEdC,EAAoBC,GAAiC,CAChE,GAAIA,oBAA8C,CAChD,IAAMC,EAAO,OAEb,GAAI,CACF,cAAO,aAAa,QAAQA,EAAMA,CAAI,EACtC,OAAO,aAAa,WAAWA,CAAI,EAC5B,EACT,OAASC,EAAP,CACA,MAAO,EACT,CACF,CAEA,GAAIF,sBAAgD,CAClD,IAAMC,EAAO,OAEb,GAAI,CACF,cAAO,eAAe,QAAQA,EAAMA,CAAI,EACxC,OAAO,eAAe,WAAWA,CAAI,EAC9B,EACT,OAASC,EAAP,CACA,MAAO,EACT,CACF,CAEA,MAAO,EACT,EAGaC,EAAsB,CAACC,EAAqBC,IAAe,CACtE,IAAMC,EAAe,mBAAmB,OAAOD,GAAU,SAAW,KAAK,UAAUA,CAAK,EAAIA,CAAK,EACjG,OAAO,aAAa,QAAQD,EAAaE,CAAY,CACvD,EAEaC,EAAuBH,GAAwB,CAC1D,IAAMC,EAAQ,OAAO,aAAa,QAAQD,CAAW,EACrD,OAAOC,IAAU,KAAO,KAAO,mBAAmBA,CAAK,CACzD,EAGaG,EAAwB,CAACJ,EAAqBC,IAAe,CACxE,IAAMC,EAAe,mBAAmB,OAAOD,GAAU,SAAW,KAAK,UAAUA,CAAK,EAAIA,CAAK,EACjG,OAAO,eAAe,QAAQD,EAAaE,CAAY,CACzD,EAEaG,EAAyBL,GAAwB,CAC5D,IAAMC,EAAQ,OAAO,eAAe,QAAQD,CAAW,EACvD,OAAOC,IAAU,KAAO,KAAO,mBAAmBA,CAAK,CACzD,EAGaK,EAAgB,CAACV,EAA8BI,EAAqBC,IAAe,CAE9F,GAAI,EAACN,EAAiBC,CAAW,EAEjC,OAAQA,uBAC6B,CACjCG,EAAoBC,EAAaC,CAAK,EACtC,KACF,uBAEqC,CACnCG,EAAsBJ,EAAaC,CAAK,EACxC,KACF,EAEJ,EAEaM,EAAiB,CAACX,EAA8BI,IAEtDL,EAAiBC,CAAW,EAE7BA,oBACKO,EAAoBH,CAAW,EAGpCJ,sBACKS,EAAsBL,CAAW,EAGnC,KAVoC,KAahCQ,EAAkBC,GACtB,GAAIA,MAOAC,EAAqB,CAChCC,EACAF,EACAG,IACG,CACH,GAAI,CAACD,EAAS,OAEd,IAAIE,EAAsB,KACtBC,EAAsB,KAEpBC,EAAiBR,EAAeI,EAASF,CAAU,EACnDO,EAAiBT,EAAeI,EAASH,EAAeC,CAAU,CAAC,EAEtEM,GAAmB,OACpBF,EAAOE,GAGNC,GAAmB,OACpBF,EAAOE,GAGN,EAAAH,IAAS,MAAQC,IAAS,OAE7BF,EAAeC,IAAS,KAAOA,EAAOC,EAAMA,CAAI,CAClD,EC1GA,OAAO,qBAAuB,OAAO,sBAAwB,CAAC,EAM9D,OAAO,0BAA4B,OAAO,2BAA6B,CAAC,EACxE,OAAO,0BAA0B,KAAK,SAAS,EAC/C,OAAO,0BAA0B,KAAK,aAAa,EAEnD,IAAMG,EAAgB,IAAgB,CAEpC,IAAIC,EACAC,EAAaC,EACbC,EAAqB,GAEzB,MAAO,CAIL,IAAI,MAAO,CACT,MAAO,gBACT,EAKA,KAAM,CAACC,EAAaC,EAAgBC,IAAoB,CAGtDN,EAAWI,EAAY,aAAa,SAAS,GAAyB,OACtEH,EAAaG,EAAY,aAAa,aAAa,GAAKF,EAEpDF,IACFO,EAAmBP,EAASC,EAAYK,CAAe,EACvDH,EAAqB,GAGzB,EAQA,OAAQ,CACNK,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,IACG,CACCjB,GAAWG,IACbe,EAAclB,EAASC,EAAYS,CAAW,EAC3CD,IAAc,QACfS,EAAclB,EAASmB,EAAelB,CAAU,EAAGU,CAAW,EAGpE,EAOA,aAAc,CAACS,EAAmBC,EAAmBC,IAAsB,CAEzE,OAAQF,OACD,UAAW,CACdpB,EAAUsB,EACV,KACF,KAEK,cAAe,CAClBrB,EAAaqB,EACb,KACF,EAEJ,EAMA,kBAAmB,CACjB,CACE,KAAM,UACN,WAAY,CACV,KAAO,CACL,OAAOtB,CACT,EAEA,IAAMuB,GAAa,CACjBvB,EAAUuB,CACZ,CACF,CACF,EACA,CACE,KAAM,aACN,WAAY,CACV,KAAO,CACL,OAAOtB,GAAA,KAAAA,EAAcC,CACvB,EAEA,IAAMsB,GAAgB,CACpBvB,EAAauB,CACf,CACF,CACF,EACA,CACE,KAAM,cACN,WAAY,CACV,KAAO,CACL,OAAOL,EAAelB,CAAU,CAClC,CACF,CACF,CACF,CACF,CACF,EAKA,OAAO,qBAAqB,KAAKF,CAAa,EAE9C,IAAO0B,EAAQ1B",
  "names": ["STORAGE_KEY", "isStorageEnabled", "storageType", "temp", "e", "setLocalStorageItem", "storageName", "value", "escapedValue", "getLocalStorageItem", "setSessionStorageItem", "getSessionStorageItem", "saveToStorage", "getFromStorage", "getStorageKey2", "storageKey", "restoreFromStorage", "storage", "updatePointers", "val1", "val2", "restoredValue1", "restoredValue2", "StoragePlugin", "storage", "storageKey", "STORAGE_KEY", "storageInitialized", "_$component", "_requestUpdate", "_updatePointers", "restoreFromStorage", "_percent1", "_percent2", "_textValue1", "_textValue2", "_min", "_max", "_textMin", "_textMax", "_rightToLeft", "_bottomToTop", "saveToStorage", "getStorageKey2", "_attrName", "_oldValue", "_newValue", "_storage", "_storageKey", "storage_plugin_default"]
}
