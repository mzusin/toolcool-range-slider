{
  "version": 3,
  "sources": ["../../src/plugins/storage-plugin/storage-provider.ts", "../../src/plugins/storage-plugin/index.ts"],
  "sourcesContent": ["import { StorageTypeEnum } from './storage-type-enum';\nexport const STORAGE_KEY = 'tc-range-slider';\n\nexport const isStorageEnabled = (storageType: StorageTypeEnum) => {\n  if (storageType === StorageTypeEnum.localStorage) {\n    const temp = 'test';\n\n    try {\n      window.localStorage.setItem(temp, temp);\n      window.localStorage.removeItem(temp);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  if (storageType === StorageTypeEnum.sessionStorage) {\n    const temp = 'test';\n\n    try {\n      window.sessionStorage.setItem(temp, temp);\n      window.sessionStorage.removeItem(temp);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  return false;\n};\n\n// eslint-disable-next-line  @typescript-eslint/no-explicit-any\nexport const setLocalStorageItem = (storageName: string, value: any) => {\n  const escapedValue = encodeURIComponent(typeof value === 'object' ? JSON.stringify(value) : value);\n  window.localStorage.setItem(storageName, escapedValue);\n};\n\nexport const getLocalStorageItem = (storageName: string) => {\n  const value = window.localStorage.getItem(storageName);\n  return value === null ? null : decodeURIComponent(value);\n};\n\n// eslint-disable-next-line  @typescript-eslint/no-explicit-any\nexport const setSessionStorageItem = (storageName: string, value: any) => {\n  const escapedValue = encodeURIComponent(typeof value === 'object' ? JSON.stringify(value) : value);\n  window.sessionStorage.setItem(storageName, escapedValue);\n};\n\nexport const getSessionStorageItem = (storageName: string) => {\n  const value = window.sessionStorage.getItem(storageName);\n  return value === null ? null : decodeURIComponent(value);\n};\n\n// eslint-disable-next-line  @typescript-eslint/no-explicit-any\nexport const saveToStorage = (storageType: StorageTypeEnum, storageName: string, value: any) => {\n  // if this storage type is not supported -> do nothing\n  if (!isStorageEnabled(storageType)) return;\n\n  switch (storageType) {\n    case StorageTypeEnum.localStorage: {\n      setLocalStorageItem(storageName, value);\n      break;\n    }\n\n    case StorageTypeEnum.sessionStorage: {\n      setSessionStorageItem(storageName, value);\n      break;\n    }\n  }\n};\n\nexport const getFromStorage = (storageType: StorageTypeEnum, storageName: string) => {\n  // if this storage type is not supported -> do nothing\n  if (!isStorageEnabled(storageType)) return null;\n\n  if (storageType === StorageTypeEnum.localStorage) {\n    return getLocalStorageItem(storageName);\n  }\n\n  if (storageType === StorageTypeEnum.sessionStorage) {\n    return getSessionStorageItem(storageName);\n  }\n\n  return null;\n};\n\n/**\n * try to restore values from session or local storage\n * when component is initialized\n */\nexport const restoreFromStorage = (\n  storage: StorageTypeEnum | undefined,\n  storageKey: string,\n  updatePointers: (values: (string | number | undefined | null)[]) => void\n) => {\n  if (!storage) return;\n\n  const restoredValues = getFromStorage(storage, storageKey);\n  if(!restoredValues) return;\n\n  let parsed: (string | number | undefined | null)[] | null = null;\n\n  try{\n    parsed = JSON.parse(restoredValues);\n  }\n  catch (ex){\n    // empty\n  }\n  if(!parsed) return;\n\n  updatePointers(parsed);\n};\n", "import { IPlugin, IPluginGetters, IPluginSetters, IPluginUpdateData } from '../../core/plugins/interfaces';\nimport { StorageTypeEnum } from './storage-type-enum';\nimport { restoreFromStorage, saveToStorage, STORAGE_KEY } from './storage-provider';\n\n/**\n * Storage Plugin.\n * Important: the plugin script should be included BEFORE the core script.\n */\n\n/**\n * Required: init ToolCool Range Slider plugins namespace if not defined yet\n */\nwindow.tcRangeSliderPlugins = window.tcRangeSliderPlugins || [];\n\nconst StoragePlugin = () : IPlugin => {\n\n  let storage: StorageTypeEnum | undefined = undefined;\n  let storageKey = STORAGE_KEY;\n  let storageInitialized = false;\n\n  return {\n    /**\n     * Required: unique plugin name\n     */\n    get name() {\n      return 'Storage Labels';\n    },\n\n    /**\n     * Optional: plugin initialization\n     */\n    init: (\n      _$component,\n      _requestUpdate,\n      _setters: IPluginSetters,\n      _getters: IPluginGetters\n    ) => {\n\n      // if the storage is enabled ---> try to restore the values\n      storage = (_$component.getAttribute('storage') as StorageTypeEnum) || undefined;\n      storageKey = _$component.getAttribute('storage-key') || STORAGE_KEY;\n\n      if (storage){\n        restoreFromStorage(storage, storageKey, _setters.setValues);\n        storageInitialized = true;\n      }\n    },\n\n    /**\n     * Optional:\n     * this will be called each time\n     * range slider updates pointer positions\n     */\n    update: (data: IPluginUpdateData) => {\n      if (!storage || !storageInitialized) return;\n      saveToStorage(storage, storageKey, data.values);\n    },\n\n    /**\n     * Optional:\n     * this will be called each time observed HTML attribute changes;\n     * observed attributes are defined in window.tcRangeSliderObservedAttr array above.\n     */\n    onAttrChange: (_attrName: string, _newValue: string) => {\n\n      switch (_attrName){\n        case 'storage': {\n          storage = _newValue as StorageTypeEnum;\n          break;\n        }\n\n        case 'storage-key': {\n          storageKey = _newValue;\n          break;\n        }\n      }\n    },\n\n    /**\n     * Optional:\n     * List of getters and setter that can be used to create slider API.\n     */\n    gettersAndSetters: [\n      {\n        name: 'storage',\n        attributes: {\n          get () {\n            return storage;\n          },\n\n          set: (_storage) => {\n            storage = _storage;\n          },\n        }\n      },\n      {\n        name: 'storageKey',\n        attributes: {\n          get () {\n            return storageKey ?? STORAGE_KEY;\n          },\n\n          set: (_storageKey) => {\n            storageKey = _storageKey;\n          },\n        }\n      }\n    ],\n  };\n};\n\n/**\n * Required: add current plugin to the plugins list.\n */\nwindow.tcRangeSliderPlugins.push(StoragePlugin);\n\nexport default StoragePlugin;"],
  "mappings": "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",
  "names": ["STORAGE_KEY", "isStorageEnabled", "storageType", "temp", "e", "setLocalStorageItem", "storageName", "value", "escapedValue", "getLocalStorageItem", "setSessionStorageItem", "getSessionStorageItem", "saveToStorage", "getFromStorage", "restoreFromStorage", "storage", "storageKey", "updatePointers", "restoredValues", "parsed", "ex", "StoragePlugin", "storage", "storageKey", "STORAGE_KEY", "storageInitialized", "_$component", "_requestUpdate", "_setters", "_getters", "restoreFromStorage", "data", "saveToStorage", "_attrName", "_newValue", "_storage", "_storageKey", "storage_plugin_default"]
}
