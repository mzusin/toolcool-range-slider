{
  "version": 3,
  "sources": ["../../src/core/domain/math-provider.ts", "../../src/plugins/marks-plugin/index.ts"],
  "sourcesContent": ["/**\n * scale a range [min,max] to [a,b]\n * f(x) = (b - a) * (x - min) / (max - min) + a\n */\nexport const convertRange = (min: number, max: number, a: number, b: number, x: number) => {\n  const temp = (max - min);\n  if(temp === 0) return a;\n  return ((b - a) * (x - min)) / temp + a;\n};\n\n// eslint-disable-next-line\nexport const isNumber = (input: any) => {\n  return !isNaN(parseFloat(input)) && isFinite(input);\n};\n\n// the below function should receive any\n// eslint-disable-next-line\nexport const getNumber = (input: any, defaultValue: any) : number => {\n  return isNumber(input) ? Number(input) : defaultValue;\n};\n\n/**\n * Round up to the next multiple of X,\n * where X is the step provided by the user.\n */\nexport const roundToStep = (num: number, step: number) => {\n  return step === 0 ? 0 : Math.round(num / step) * step;\n};\n\n/**\n * round to decimal places\n * https://stackoverflow.com/questions/11832914/how-to-round-to-at-most-2-decimal-places-if-necessary\n */\nexport const setDecimalPlaces = (num: number, decimalPlaces = Infinity) => {\n  if (decimalPlaces === Infinity) return num;\n\n  const coeff = 10 ** decimalPlaces;\n  return Math.round(num * coeff) / coeff;\n};\n\nexport const getBoolean = (val: string | null | undefined | boolean) => {\n  if(val === null || val === undefined) return false;\n  if(typeof val === 'boolean') return val;\n  return val.trim().toLowerCase() === 'true';\n};\n", "import { IPlugin, IPluginGetters, IPluginSetters, IPluginUpdateData } from '../../core/plugins/interfaces';\nimport RangeSlider from '../../core';\nimport { getBoolean, getNumber } from '../../core/domain/math-provider';\n\n/**\n * Marks Plugin.\n * Important: the plugin script should be included BEFORE the core script.\n */\n\n/**\n * Required: init ToolCool Range Slider plugins namespace if not defined yet\n */\nwindow.tcRangeSliderPlugins = window.tcRangeSliderPlugins || [];\n\nconst MARKS_STEP_DEFAULT = 5;\n\nconst MarksPlugin = () : IPlugin => {\n\n  let $component: HTMLElement | null = null;\n  let getters: IPluginGetters | null = null;\n  let $marks: HTMLElement | null = null;\n\n  let enabled = false;\n  let marksStep = MARKS_STEP_DEFAULT;\n\n  const createMarksBox = () => {\n    const $slider = $component?.shadowRoot?.querySelector('#range-slider')  as HTMLElement;\n    $marks = document.createElement('div');\n    $marks.classList.add('marks');\n    $slider.append($marks);\n  };\n\n  const createMarks = () => {\n    if(!$marks || !getters) return;\n\n    const min = getters.getMin();\n    const max = getters.getMax();\n    const range = Math.abs(max - min);\n    const count = Math.round(range / marksStep);\n\n    for(let i=0; i<count; i++){\n      const $mark = document.createElement('div');\n      $mark.classList.add('mark', `mark-${ i }`);\n      $marks.append($mark);\n    }\n  };\n\n  const updateStep = (stepValue: number) => {\n    destroy();\n\n    marksStep = stepValue;\n\n    if(marksStep <= 0){\n      marksStep = MARKS_STEP_DEFAULT;\n    }\n\n    createMarksBox();\n    createMarks();\n  };\n\n  const toggleEnabled = (_enabled: boolean) => {\n    enabled = _enabled;\n\n    if(!enabled){\n      destroy();\n    }\n    else{\n      createMarksBox();\n      createMarks();\n    }\n  };\n\n  const update = (data: IPluginUpdateData) => {\n\n    if(!enabled ) return;\n\n  };\n\n  const destroy = () => {\n    $marks?.remove();\n  };\n\n  return {\n\n    /**\n     * Required: unique plugin name\n     */\n    get name() {\n      return 'Marks';\n    },\n\n    /**\n     * Optional: plugin initialization\n     */\n    init: (\n      _$component,\n      _requestUpdate,\n      _setters: IPluginSetters,\n      _getters: IPluginGetters\n    ) => {\n      getters = _getters;\n      $component = _$component;\n\n      enabled = getBoolean($component.getAttribute('marks'));\n      updateStep(getNumber($component.getAttribute('marks-step'), MARKS_STEP_DEFAULT));\n    },\n\n    /**\n     * Optional:\n     * this will be called each time\n     * range slider updates pointer positions or other properties\n     */\n    update,\n\n    /**\n     * Optional:\n     * this will be called each time observed HTML attribute changes;\n     * observed attributes are defined in window.tcRangeSliderObservedAttr array above.\n     */\n    onAttrChange: (_attrName: string, _newValue: string) => {\n      if(_attrName === 'marks'){\n        toggleEnabled(getBoolean(_newValue));\n      }\n\n      if(_attrName === 'marks-step'){\n        updateStep(getNumber(_newValue, MARKS_STEP_DEFAULT));\n      }\n    },\n\n    /**\n     * Optional:\n     * List of getters and setter that can be used to create slider API.\n     */\n    gettersAndSetters: [\n      {\n        name: 'marksEnabled',\n        attributes: {\n          get () {\n            return enabled ?? false;\n          },\n\n          set: (_enabled) => {\n            toggleEnabled(getBoolean(_enabled));\n          },\n        }\n      },\n\n      {\n        name: 'marksStep',\n        attributes: {\n          get () {\n            return marksStep ?? MARKS_STEP_DEFAULT;\n          },\n\n          set: (_newStep) => {\n            updateStep(getNumber(_newStep, MARKS_STEP_DEFAULT));\n          },\n        }\n      },\n\n    ],\n\n    destroy,\n\n    css: `\n.marks{\n  width: 100%;\n  height: 1rem;\n  display: flex;\n  justify-content: space-between;\n  position: relative;\n  top: 100%;\n  left: 0;\n  margin-top: 5px;\n}  \n\n.mark{\n  background: #cbd5e1;\n  width: 2px;\n  height: 5px;\n}  \n    `,\n  };\n};\n\n/**\n * Required: add current plugin to the plugins list.\n */\nwindow.tcRangeSliderPlugins.push(MarksPlugin);\n\nexport default MarksPlugin;\n\n/**\n * export dynamic properties\n */\nexport interface IMarksPlugin extends RangeSlider{\n  marksEnabled: boolean;\n  marksStep: number;\n}\n"],
  "mappings": ";;;;;;;MAWO,IAAMA,EAAYC,GAChB,CAAC,MAAM,WAAWA,CAAK,CAAC,GAAK,SAASA,CAAK,EAKvCC,EAAY,CAACD,EAAYE,IAC7BH,EAASC,CAAK,EAAI,OAAOA,CAAK,EAAIE,EAsBpC,IAAMC,EAAcC,GACtBA,GAAQ,KAAkC,GAC1C,OAAOA,GAAQ,UAAkBA,EAC7BA,EAAI,KAAK,EAAE,YAAY,IAAM,OC/BtC,OAAO,qBAAuB,OAAO,sBAAwB,CAAC,EAE9D,IAAMC,EAAqB,EAErBC,EAAc,IAAgB,CAElC,IAAIC,EAAiC,KACjCC,EAAiC,KACjCC,EAA6B,KAE7BC,EAAU,GACVC,EAAYN,EAEVO,EAAiB,IAAM,CAzB/B,IAAAC,EA0BI,IAAMC,GAAUD,EAAAN,GAAA,YAAAA,EAAY,aAAZ,YAAAM,EAAwB,cAAc,iBACtDJ,EAAS,SAAS,cAAc,KAAK,EACrCA,EAAO,UAAU,IAAI,OAAO,EAC5BK,EAAQ,OAAOL,CAAM,CACvB,EAEMM,EAAc,IAAM,CACxB,GAAG,CAACN,GAAU,CAACD,EAAS,OAExB,IAAMQ,EAAMR,EAAQ,OAAO,EACrBS,EAAMT,EAAQ,OAAO,EACrBU,EAAQ,KAAK,IAAID,EAAMD,CAAG,EAC1BG,EAAQ,KAAK,MAAMD,EAAQP,CAAS,EAE1C,QAAQS,EAAE,EAAGA,EAAED,EAAOC,IAAI,CACxB,IAAMC,EAAQ,SAAS,cAAc,KAAK,EAC1CA,EAAM,UAAU,IAAI,OAAQ,QAASD,GAAI,EACzCX,EAAO,OAAOY,CAAK,CACrB,CACF,EAEMC,EAAcC,GAAsB,CACxCC,EAAQ,EAERb,EAAYY,EAETZ,GAAa,IACdA,EAAYN,GAGdO,EAAe,EACfG,EAAY,CACd,EAEMU,EAAiBC,GAAsB,CAC3ChB,EAAUgB,EAENhB,GAIFE,EAAe,EACfG,EAAY,GAJZS,EAAQ,CAMZ,EAEMG,EAAUC,GAA4B,CAI5C,EAEMJ,EAAU,IAAM,CACpBf,GAAA,MAAAA,EAAQ,QACV,EAEA,MAAO,CAKL,IAAI,MAAO,CACT,MAAO,OACT,EAKA,KAAM,CACJoB,EACAC,EACAC,EACAC,IACG,CACHxB,EAAUwB,EACVzB,EAAasB,EAEbnB,EAAUuB,EAAW1B,EAAW,aAAa,OAAO,CAAC,EACrDe,EAAWY,EAAU3B,EAAW,aAAa,YAAY,EAAGF,CAAkB,CAAC,CACjF,EAOA,OAAAsB,EAOA,aAAc,CAACQ,EAAmBC,IAAsB,CACnDD,IAAc,SACfV,EAAcQ,EAAWG,CAAS,CAAC,EAGlCD,IAAc,cACfb,EAAWY,EAAUE,EAAW/B,CAAkB,CAAC,CAEvD,EAMA,kBAAmB,CACjB,CACE,KAAM,eACN,WAAY,CACV,KAAO,CACL,OAAOK,GAAA,KAAAA,EAAW,EACpB,EAEA,IAAMgB,GAAa,CACjBD,EAAcQ,EAAWP,CAAQ,CAAC,CACpC,CACF,CACF,EAEA,CACE,KAAM,YACN,WAAY,CACV,KAAO,CACL,OAAOf,GAAA,KAAAA,EAAaN,CACtB,EAEA,IAAMgC,GAAa,CACjBf,EAAWY,EAAUG,EAAUhC,CAAkB,CAAC,CACpD,CACF,CACF,CAEF,EAEA,QAAAmB,EAEA,IAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAkBP,CACF,EAKA,OAAO,qBAAqB,KAAKlB,CAAW,EAE5C,IAAOgC,EAAQhC",
  "names": ["isNumber", "input", "getNumber", "defaultValue", "getBoolean", "val", "MARKS_STEP_DEFAULT", "MarksPlugin", "$component", "getters", "$marks", "enabled", "marksStep", "createMarksBox", "_a", "$slider", "createMarks", "min", "max", "range", "count", "i", "$mark", "updateStep", "stepValue", "destroy", "toggleEnabled", "_enabled", "update", "data", "_$component", "_requestUpdate", "_setters", "_getters", "getBoolean", "getNumber", "_attrName", "_newValue", "_newStep", "marks_plugin_default"]
}
