{
  "version": 3,
  "sources": ["../../src/core/domain/math-provider.ts", "../../src/plugins/origin-center-plugin/index.ts"],
  "sourcesContent": ["/**\n * scale a range [min,max] to [a,b]\n * f(x) = (b - a) * (x - min) / (max - min) + a\n */\nexport const convertRange = (min: number, max: number, a: number, b: number, x: number) => {\n  const temp = (max - min);\n  if(temp === 0) return a;\n  return ((b - a) * (x - min)) / temp + a;\n};\n\n// eslint-disable-next-line\nexport const isNumber = (input: any) => {\n  return !isNaN(parseFloat(input)) && isFinite(input);\n};\n\n// the below function should receive any\n// eslint-disable-next-line\nexport const getNumber = (input: any, defaultValue: any) : number => {\n  return isNumber(input) ? Number(input) : defaultValue;\n};\n\n/**\n * Round up to the next multiple of X,\n * where X is the step provided by the user.\n */\nexport const roundToStep = (num: number, step: number) => {\n  return step === 0 ? 0 : Math.round(num / step) * step;\n};\n\n/**\n * round to decimal places\n * https://stackoverflow.com/questions/11832914/how-to-round-to-at-most-2-decimal-places-if-necessary\n */\nexport const setDecimalPlaces = (num: number, decimalPlaces = Infinity) => {\n  if (decimalPlaces === Infinity) return num;\n\n  const coeff = 10 ** decimalPlaces;\n  return Math.round(num * coeff) / coeff;\n};\n\nexport const getBoolean = (val: string | null | undefined | boolean) => {\n  if(val === null || val === undefined) return false;\n  if(typeof val === 'boolean') return val;\n  return val.trim().toLowerCase() === 'true';\n};\n", "import { IPlugin, IPluginGetters, IPluginSetters, IPluginUpdateData } from '../../core/plugins/interfaces';\nimport RangeSlider from '../../core';\nimport { getBoolean } from '../../core/domain/math-provider';\n\n/**\n * Origin at Center Plugin.\n * Note: the plugin works only when there is exactly one pointer!\n * Important: the plugin script should be included BEFORE the core script.\n */\n\n/**\n * Required: init ToolCool Range Slider plugins namespace if not defined yet\n */\nwindow.tcRangeSliderPlugins = window.tcRangeSliderPlugins || [];\n\nconst OriginCenterPlugin = () : IPlugin => {\n\n  let enabled = false;\n  let getters: IPluginGetters | null = null;\n  let $fill: HTMLElement | null = null;\n\n  const updateFill = () => {\n    if(!$fill || !getters) return;\n\n    const percents = getters.getPercents() || [];\n\n    // the plugin works only when there is exactly one pointer\n    if(percents.length !== 1) return;\n\n    const percent = percents[0];\n    const pos = percent <= 50 ? percent : percent - Math.abs(percent - 50);\n\n    if(getters.getType() === 'vertical'){\n      $fill.style.removeProperty('width');\n      $fill.style.removeProperty('left');\n      $fill.style.removeProperty('right');\n\n      const height = Math.abs(50 - percent);\n      $fill.style.height = `${ height }%`;\n\n      if(getters.isBottomToTop()){\n        $fill.style.bottom = `${ pos }%`;\n      }\n      else{\n        $fill.style.top = `${ pos }%`;\n      }\n    }\n    else{\n      $fill.style.removeProperty('height');\n      $fill.style.removeProperty('top');\n      $fill.style.removeProperty('bottom');\n\n      const width = Math.abs(50 - percent);\n      $fill.style.width = `${ width }%`;\n\n      if(getters.isRightToLeft()){\n        $fill.style.right = `${ pos }%`;\n      }\n      else{\n        $fill.style.left = `${ pos }%`;\n      }\n    }\n  };\n\n  const setEnabled = (newValue: boolean) => {\n    enabled = newValue;\n    updateFill();\n  };\n\n  const update = (_data: IPluginUpdateData) => {\n    if(!enabled) return;\n    updateFill();\n  };\n\n  return {\n\n    /**\n     * Required: unique plugin name\n     */\n    get name() {\n      return 'Origin at Center';\n    },\n\n    /**\n     * Optional: plugin initialization\n     */\n    init: (\n      _$component,\n      _requestUpdate,\n      _setters: IPluginSetters,\n      _getters: IPluginGetters\n    ) => {\n      getters = _getters;\n      $fill = _$component.shadowRoot?.querySelector('.panel-fill') as HTMLElement;\n\n      enabled = getBoolean(_$component.getAttribute('origin-at-center'));\n      if(!enabled) return;\n\n      updateFill();\n    },\n\n    /**\n     * Optional:\n     * this will be called each time\n     * range slider updates pointer positions or other properties\n     */\n    update,\n\n    /**\n     * Optional:\n     * this will be called each time observed HTML attribute changes;\n     * observed attributes are defined in window.tcRangeSliderObservedAttr array above.\n     */\n    onAttrChange: (_attrName: string, _newValue: string) => {\n      if(_attrName === 'origin-at-center'){\n        setEnabled(getBoolean(_newValue));\n      }\n    },\n\n    /**\n     * Optional:\n     * List of getters and setter that can be used to create slider API.\n     */\n    gettersAndSetters: [\n      {\n        name: 'originCenterEnabled',\n        attributes: {\n          get () {\n            return enabled ?? false;\n          },\n\n          set: (_enabled) => {\n            setEnabled(getBoolean(_enabled));\n          },\n        }\n      },\n    ],\n  };\n};\n\n/**\n * Required: add current plugin to the plugins list.\n */\nwindow.tcRangeSliderPlugins.push(OriginCenterPlugin);\n\nexport default OriginCenterPlugin;\n\n/**\n * export dynamic properties\n */\nexport interface IOriginCenterPlugin extends RangeSlider{\n  originCenterEnabled: boolean;\n}\n"],
  "mappings": ";;;;;;;MAwCO,IAAMA,EAAcC,GACtBA,GAAQ,KAAkC,GAC1C,OAAOA,GAAQ,UAAkBA,EAC7BA,EAAI,KAAK,EAAE,YAAY,IAAM,OC9BtC,OAAO,qBAAuB,OAAO,sBAAwB,CAAC,EAE9D,IAAMC,EAAqB,IAAgB,CAEzC,IAAIC,EAAU,GACVC,EAAiC,KACjCC,EAA4B,KAE1BC,EAAa,IAAM,CACvB,GAAG,CAACD,GAAS,CAACD,EAAS,OAEvB,IAAMG,EAAWH,EAAQ,YAAY,GAAK,CAAC,EAG3C,GAAGG,EAAS,SAAW,EAAG,OAE1B,IAAMC,EAAUD,EAAS,GACnBE,EAAMD,GAAW,GAAKA,EAAUA,EAAU,KAAK,IAAIA,EAAU,EAAE,EAErE,GAAGJ,EAAQ,QAAQ,IAAM,WAAW,CAClCC,EAAM,MAAM,eAAe,OAAO,EAClCA,EAAM,MAAM,eAAe,MAAM,EACjCA,EAAM,MAAM,eAAe,OAAO,EAElC,IAAMK,EAAS,KAAK,IAAI,GAAKF,CAAO,EACpCH,EAAM,MAAM,OAAS,GAAIK,KAEtBN,EAAQ,cAAc,EACvBC,EAAM,MAAM,OAAS,GAAII,KAGzBJ,EAAM,MAAM,IAAM,GAAII,IAE1B,KACI,CACFJ,EAAM,MAAM,eAAe,QAAQ,EACnCA,EAAM,MAAM,eAAe,KAAK,EAChCA,EAAM,MAAM,eAAe,QAAQ,EAEnC,IAAMM,EAAQ,KAAK,IAAI,GAAKH,CAAO,EACnCH,EAAM,MAAM,MAAQ,GAAIM,KAErBP,EAAQ,cAAc,EACvBC,EAAM,MAAM,MAAQ,GAAII,KAGxBJ,EAAM,MAAM,KAAO,GAAII,IAE3B,CACF,EAEMG,EAAcC,GAAsB,CACxCV,EAAUU,EACVP,EAAW,CACb,EAOA,MAAO,CAKL,IAAI,MAAO,CACT,MAAO,kBACT,EAKA,KAAM,CACJQ,EACAC,EACAC,EACAC,IACG,CA3FT,IAAAC,EA4FMd,EAAUa,EACVZ,GAAQa,EAAAJ,EAAY,aAAZ,YAAAI,EAAwB,cAAc,eAE9Cf,EAAUgB,EAAWL,EAAY,aAAa,kBAAkB,CAAC,EAC7DX,GAEJG,EAAW,CACb,EAOA,OArCcc,GAA6B,CACxC,CAACjB,GACJG,EAAW,CACb,EAyCE,aAAc,CAACe,EAAmBC,IAAsB,CACnDD,IAAc,oBACfT,EAAWO,EAAWG,CAAS,CAAC,CAEpC,EAMA,kBAAmB,CACjB,CACE,KAAM,sBACN,WAAY,CACV,KAAO,CACL,OAAOnB,GAAA,KAAAA,EAAW,EACpB,EAEA,IAAMoB,GAAa,CACjBX,EAAWO,EAAWI,CAAQ,CAAC,CACjC,CACF,CACF,CACF,CACF,CACF,EAKA,OAAO,qBAAqB,KAAKrB,CAAkB,EAEnD,IAAOsB,EAAQtB",
  "names": ["getBoolean", "val", "OriginCenterPlugin", "enabled", "getters", "$fill", "updateFill", "percents", "percent", "pos", "height", "width", "setEnabled", "newValue", "_$component", "_requestUpdate", "_setters", "_getters", "_a", "getBoolean", "_data", "_attrName", "_newValue", "_enabled", "origin_center_plugin_default"]
}
