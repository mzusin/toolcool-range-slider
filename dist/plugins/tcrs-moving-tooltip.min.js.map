{
  "version": 3,
  "sources": ["../../src/core/domain/math-provider.ts", "../../src/plugins/moving-tooltip-plugin/index.ts"],
  "sourcesContent": ["/**\n * scale a range [min,max] to [a,b]\n * f(x) = (b - a) * (x - min) / (max - min) + a\n */\nexport const convertRange = (min: number, max: number, a: number, b: number, x: number) => {\n  const temp = (max - min);\n  if(temp === 0) return a;\n  return ((b - a) * (x - min)) / temp + a;\n};\n\n// eslint-disable-next-line\nexport const isNumber = (input: any) => {\n  return !isNaN(parseFloat(input)) && isFinite(input);\n};\n\n// the below function should receive any\n// eslint-disable-next-line\nexport const getNumber = (input: any, defaultValue: any) : number => {\n  return isNumber(input) ? Number(input) : defaultValue;\n};\n\n/**\n * Round up to the next multiple of X,\n * where X is the step provided by the user.\n */\nexport const roundToStep = (num: number, step: number) => {\n  return step === 0 ? 0 : Math.round(num / step) * step;\n};\n\n/**\n * round to decimal places\n * https://stackoverflow.com/questions/11832914/how-to-round-to-at-most-2-decimal-places-if-necessary\n */\nexport const setDecimalPlaces = (num: number, decimalPlaces = Infinity) => {\n  if (decimalPlaces === Infinity) return num;\n\n  const coeff = 10 ** decimalPlaces;\n  return Math.round(num * coeff) / coeff;\n};\n\nexport const getBoolean = (val: string | null | undefined | boolean) => {\n  if(val === null || val === undefined) return false;\n  if(typeof val === 'boolean') return val;\n  return val.trim().toLowerCase() === 'true';\n};\n", "import { IPlugin, IPluginGetters, IPluginSetters, IPluginUpdateData } from '../../core/plugins/interfaces';\nimport RangeSlider from '../../core';\nimport { getBoolean } from '../../core/domain/math-provider';\n\n/**\n * Moving Tooltip Plugin.\n * Important: the plugin script should be included BEFORE the core script.\n */\n\n/**\n * Required: init ToolCool Range Slider plugins namespace if not defined yet\n */\nwindow.tcRangeSliderPlugins = window.tcRangeSliderPlugins || [];\n\nconst MovingTooltipPlugin = () : IPlugin => {\n\n  let $component: HTMLElement | null = null;\n  let getters: IPluginGetters | null = null;\n\n  let enabled = false;\n  let $tooltips: (HTMLElement | undefined)[] = [];\n  let $tooltipsRow: HTMLElement | null = null;\n\n  const createTooltipsRow = () => {\n    const $box = $component?.shadowRoot?.querySelector('.range-slider-box')  as HTMLElement;\n    $tooltipsRow = document.createElement('div');\n    $tooltipsRow.classList.add('tooltips');\n    $box.prepend($tooltipsRow);\n  };\n\n  const createTooltip = (className: string) => {\n    const $tooltip = document.createElement('div');\n    $tooltip.className = className;\n    return $tooltip;\n  };\n\n  const updateTooltip = ($tooltip: HTMLElement, type: string, percent: number) => {\n    if(type === 'vertical'){\n      $tooltip.style.removeProperty('left');\n      $tooltip.style.top = `${ percent ?? 0 }%`;\n    }\n    else{\n      $tooltip.style.left = `${ percent ?? 0 }%`;\n      $tooltip.style.removeProperty('top');\n    }\n  };\n\n  const createTooltips = () => {\n    const values = getters?.getValues() ?? [];\n    const percents = getters?.getPercents() ?? [];\n    const type = getters?.getType() ?? 'horizontal';\n\n    if(!values) return;\n\n    for(let i=0; i<values.length; i++){\n      const $tooltip = createTooltip(`tooltip tooltip-${ i + 1 }`);\n\n      $tooltip.textContent = (values[i] ?? '').toString();\n      $tooltip.style.position = 'absolute';\n      updateTooltip($tooltip, type, percents[i]);\n\n      $tooltips.push($tooltip);\n      $tooltipsRow?.prepend($tooltip);\n    }\n  };\n\n  const toggleEnabled = (_enabled: boolean) => {\n    enabled = _enabled;\n\n    if(!enabled){\n      destroy();\n    }\n    else{\n      createTooltipsRow();\n      createTooltips();\n    }\n  };\n\n  const update = (data: IPluginUpdateData) => {\n\n    if(!enabled || !data.values) return;\n\n    const percents = data.percents ?? [];\n    const type = getters?.getType() ?? 'horizontal';\n\n    for(let i=0; i<data.values.length; i++){\n      const value = data.values[i];\n      const $tooltip = $tooltips[i];\n\n      if(value === undefined && !!$tooltip){\n        // remove the tooltip\n        $tooltip.remove();\n        $tooltip[i] = undefined;\n        continue;\n      }\n\n      if(value !== undefined && !$tooltip){\n\n        // create the tooltip\n        const $tooltip = createTooltip(`tooltip tooltip-${ i + 1 }`);\n        $tooltip.textContent = (value ?? '').toString();\n        $tooltip.style.position = 'absolute';\n        updateTooltip($tooltip, type, percents[i]);\n\n        $tooltips[i] = $tooltip;\n        $tooltipsRow?.append($tooltip);\n      }\n\n      if(!$tooltip) continue;\n      $tooltip.textContent = (value ?? '').toString();\n      updateTooltip($tooltip, type, percents[i]);\n    }\n  };\n\n  const destroy = () => {\n    $tooltipsRow?.remove();\n\n    for(const $tooltip of $tooltips){\n      if(!$tooltip) continue;\n      $tooltip.remove();\n    }\n\n    $tooltips = [];\n  };\n\n  return {\n\n    /**\n     * Required: unique plugin name\n     */\n    get name() {\n      return 'Moving Tooltip';\n    },\n\n    /**\n     * Optional: plugin initialization\n     */\n    init: (\n      _$component,\n      _requestUpdate,\n      _setters: IPluginSetters,\n      _getters: IPluginGetters\n    ) => {\n      $component = _$component;\n      getters = _getters;\n\n      toggleEnabled(getBoolean(_$component.getAttribute('moving-tooltip')));\n    },\n\n    /**\n     * Optional:\n     * this will be called each time\n     * range slider updates pointer positions or other properties\n     */\n    update,\n\n    /**\n     * Optional:\n     * this will be called each time observed HTML attribute changes;\n     * observed attributes are defined in window.tcRangeSliderObservedAttr array above.\n     */\n    onAttrChange: (_attrName: string, _newValue: string) => {\n      if(_attrName === 'moving-tooltip'){\n        toggleEnabled(getBoolean(_newValue));\n      }\n    },\n\n    /**\n     * Optional:\n     * List of getters and setter that can be used to create slider API.\n     */\n    gettersAndSetters: [\n      {\n        name: 'movingTooltip',\n        attributes: {\n          get () {\n            return enabled ?? false;\n          },\n\n          set: (_enabled) => {\n            toggleEnabled(getBoolean(_enabled));\n          },\n        }\n      },\n    ],\n\n    css: `\n.tooltip{\n  transform: translateX(-50%);\n}  \n    `,\n\n    destroy,\n  };\n};\n\n/**\n * Required: add current plugin to the plugins list.\n */\nwindow.tcRangeSliderPlugins.push(MovingTooltipPlugin);\n\nexport default MovingTooltipPlugin;\n\n/**\n * export dynamic properties\n */\nexport interface IMovingTooltipPlugin extends RangeSlider{\n  movingTooltip: boolean;\n}\n"],
  "mappings": ";;;;;;;MAwCO,IAAMA,EAAcC,GACtBA,GAAQ,KAAkC,GAC1C,OAAOA,GAAQ,UAAkBA,EAC7BA,EAAI,KAAK,EAAE,YAAY,IAAM,OC/BtC,OAAO,qBAAuB,OAAO,sBAAwB,CAAC,EAE9D,IAAMC,EAAsB,IAAgB,CAE1C,IAAIC,EAAiC,KACjCC,EAAiC,KAEjCC,EAAU,GACVC,EAAyC,CAAC,EAC1CC,EAAmC,KAEjCC,EAAoB,IAAM,CAvBlC,IAAAC,EAwBI,IAAMC,GAAOD,EAAAN,GAAA,YAAAA,EAAY,aAAZ,YAAAM,EAAwB,cAAc,qBACnDF,EAAe,SAAS,cAAc,KAAK,EAC3CA,EAAa,UAAU,IAAI,UAAU,EACrCG,EAAK,QAAQH,CAAY,CAC3B,EAEMI,EAAiBC,GAAsB,CAC3C,IAAMC,EAAW,SAAS,cAAc,KAAK,EAC7C,OAAAA,EAAS,UAAYD,EACdC,CACT,EAEMC,EAAgB,CAACD,EAAuBE,EAAcC,IAAoB,CAC3ED,IAAS,YACVF,EAAS,MAAM,eAAe,MAAM,EACpCA,EAAS,MAAM,IAAM,GAAIG,GAAA,KAAAA,EAAW,OAGpCH,EAAS,MAAM,KAAO,GAAIG,GAAA,KAAAA,EAAW,KACrCH,EAAS,MAAM,eAAe,KAAK,EAEvC,EAEMI,EAAiB,IAAM,CA/C/B,IAAAR,EAAAS,EAAAC,EAAAC,EAgDI,IAAMC,GAASZ,EAAAL,GAAA,YAAAA,EAAS,cAAT,KAAAK,EAAwB,CAAC,EAClCa,GAAWJ,EAAAd,GAAA,YAAAA,EAAS,gBAAT,KAAAc,EAA0B,CAAC,EACtCH,GAAOI,EAAAf,GAAA,YAAAA,EAAS,YAAT,KAAAe,EAAsB,aAEnC,GAAG,EAACE,EAEJ,QAAQE,EAAE,EAAGA,EAAEF,EAAO,OAAQE,IAAI,CAChC,IAAMV,EAAWF,EAAc,mBAAoBY,EAAI,GAAI,EAE3DV,EAAS,cAAeO,EAAAC,EAAOE,KAAP,KAAAH,EAAa,IAAI,SAAS,EAClDP,EAAS,MAAM,SAAW,WAC1BC,EAAcD,EAAUE,EAAMO,EAASC,EAAE,EAEzCjB,EAAU,KAAKO,CAAQ,EACvBN,GAAA,MAAAA,EAAc,QAAQM,EACxB,CACF,EAEMW,EAAiBC,GAAsB,CAC3CpB,EAAUoB,EAENpB,GAIFG,EAAkB,EAClBS,EAAe,GAJfS,EAAQ,CAMZ,EAEMC,EAAUC,GAA4B,CA9E9C,IAAAnB,EAAAS,EAgFI,GAAG,CAACb,GAAW,CAACuB,EAAK,OAAQ,OAE7B,IAAMN,GAAWb,EAAAmB,EAAK,WAAL,KAAAnB,EAAiB,CAAC,EAC7BM,GAAOG,EAAAd,GAAA,YAAAA,EAAS,YAAT,KAAAc,EAAsB,aAEnC,QAAQK,EAAE,EAAGA,EAAEK,EAAK,OAAO,OAAQL,IAAI,CACrC,IAAMM,EAAQD,EAAK,OAAOL,GACpBV,EAAWP,EAAUiB,GAE3B,GAAGM,IAAU,QAAa,CAAC,CAAChB,EAAS,CAEnCA,EAAS,OAAO,EAChBA,EAASU,GAAK,OACd,QACF,CAEA,GAAGM,IAAU,QAAa,CAAChB,EAAS,CAGlC,IAAMA,EAAWF,EAAc,mBAAoBY,EAAI,GAAI,EAC3DV,EAAS,aAAegB,GAAA,KAAAA,EAAS,IAAI,SAAS,EAC9ChB,EAAS,MAAM,SAAW,WAC1BC,EAAcD,EAAUE,EAAMO,EAASC,EAAE,EAEzCjB,EAAUiB,GAAKV,EACfN,GAAA,MAAAA,EAAc,OAAOM,EACvB,CAEG,CAACA,IACJA,EAAS,aAAegB,GAAA,KAAAA,EAAS,IAAI,SAAS,EAC9Cf,EAAcD,EAAUE,EAAMO,EAASC,EAAE,EAC3C,CACF,EAEMG,EAAU,IAAM,CACpBnB,GAAA,MAAAA,EAAc,SAEd,QAAUM,KAAYP,EACjB,CAACO,GACJA,EAAS,OAAO,EAGlBP,EAAY,CAAC,CACf,EAEA,MAAO,CAKL,IAAI,MAAO,CACT,MAAO,gBACT,EAKA,KAAM,CACJwB,EACAC,EACAC,EACAC,IACG,CACH9B,EAAa2B,EACb1B,EAAU6B,EAEVT,EAAcU,EAAWJ,EAAY,aAAa,gBAAgB,CAAC,CAAC,CACtE,EAOA,OAAAH,EAOA,aAAc,CAACQ,EAAmBC,IAAsB,CACnDD,IAAc,kBACfX,EAAcU,EAAWE,CAAS,CAAC,CAEvC,EAMA,kBAAmB,CACjB,CACE,KAAM,gBACN,WAAY,CACV,KAAO,CACL,OAAO/B,GAAA,KAAAA,EAAW,EACpB,EAEA,IAAMoB,GAAa,CACjBD,EAAcU,EAAWT,CAAQ,CAAC,CACpC,CACF,CACF,CACF,EAEA,IAAK;AAAA;AAAA;AAAA;AAAA,MAML,QAAAC,CACF,CACF,EAKA,OAAO,qBAAqB,KAAKxB,CAAmB,EAEpD,IAAOmC,EAAQnC",
  "names": ["getBoolean", "val", "MovingTooltipPlugin", "$component", "getters", "enabled", "$tooltips", "$tooltipsRow", "createTooltipsRow", "_a", "$box", "createTooltip", "className", "$tooltip", "updateTooltip", "type", "percent", "createTooltips", "_b", "_c", "_d", "values", "percents", "i", "toggleEnabled", "_enabled", "destroy", "update", "data", "value", "_$component", "_requestUpdate", "_setters", "_getters", "getBoolean", "_attrName", "_newValue", "moving_tooltip_plugin_default"]
}
