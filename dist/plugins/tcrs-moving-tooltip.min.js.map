{
  "version": 3,
  "sources": ["../../src/core/domain/math-provider.ts", "../../src/plugins/moving-tooltip-plugin/index.ts"],
  "sourcesContent": ["/**\n * scale a range [min,max] to [a,b]\n * f(x) = (b - a) * (x - min) / (max - min) + a\n */\nexport const convertRange = (min: number, max: number, a: number, b: number, x: number) => {\n  const temp = (max - min);\n  if(temp === 0) return a;\n  return ((b - a) * (x - min)) / temp + a;\n};\n\n// eslint-disable-next-line\nexport const isNumber = (input: any) => {\n  return !isNaN(parseFloat(input)) && isFinite(input);\n};\n\n// the below function should receive any\n// eslint-disable-next-line\nexport const getNumber = (input: any, defaultValue: any) : number => {\n  return isNumber(input) ? Number(input) : defaultValue;\n};\n\n/**\n * Round up to the next multiple of X,\n * where X is the step provided by the user.\n */\nexport const roundToStep = (num: number, step: number) => {\n  return step === 0 ? 0 : Math.round(num / step) * step;\n};\n\n/**\n * round to decimal places\n * https://stackoverflow.com/questions/11832914/how-to-round-to-at-most-2-decimal-places-if-necessary\n */\nexport const setDecimalPlaces = (num: number, decimalPlaces = Infinity) => {\n  if (decimalPlaces === Infinity) return num;\n\n  const coeff = 10 ** decimalPlaces;\n  return Math.round(num * coeff) / coeff;\n};\n\nexport const getBoolean = (val: string | null | undefined | boolean) => {\n  if(val === null || val === undefined) return false;\n  if(typeof val === 'boolean') return val;\n  return val.trim().toLowerCase() === 'true';\n};\n", "import { IPlugin, IPluginGetters, IPluginSetters, IPluginUpdateData } from '../../core/plugins/interfaces';\nimport RangeSlider from '../../core';\nimport { getBoolean, getNumber } from '../../core/domain/math-provider';\n\n/**\n * Moving Tooltip Plugin.\n * Important: the plugin script should be included BEFORE the core script.\n */\n\n/**\n * Required: init ToolCool Range Slider plugins namespace if not defined yet\n */\nwindow.tcRangeSliderPlugins = window.tcRangeSliderPlugins || [];\n\nconst DISTANCE_TO_POINTER_DEFAULT = 40; // px\nconst DEFAULT_TOOLTIP_WIDTH = 35;\nconst DEFAULT_TOOLTIP_HEIGHT = 30;\nconst DEFAULT_TOOLTIP_BG = '#475569';\nconst DEFAULT_TOOLTIP_TEXT_COLOR = '#fff';\n\nconst MovingTooltipPlugin = () : IPlugin => {\n\n  let $component: HTMLElement | null = null;\n  let $container: HTMLElement | null = null;\n  let getters: IPluginGetters | null = null;\n\n  let enabled = false;\n  let distanceToPointer = DISTANCE_TO_POINTER_DEFAULT; // px\n  let tooltipWidth = DEFAULT_TOOLTIP_WIDTH;\n  let tooltipHeight = DEFAULT_TOOLTIP_HEIGHT;\n  let tooltipBg = DEFAULT_TOOLTIP_BG;\n  let tooltipTextColor = DEFAULT_TOOLTIP_TEXT_COLOR;\n\n  let $tooltips: (HTMLElement | undefined)[] = [];\n  let $tooltipsRow: HTMLElement | null = null;\n  let resizeObserver: ResizeObserver | null = null;\n\n  const updateRowClass = () => {\n    $tooltipsRow?.classList.toggle('is-after', distanceToPointer <= 0);\n  };\n\n  const createTooltipsRow = () => {\n    const $box = $component?.shadowRoot?.querySelector('.range-slider-box')  as HTMLElement;\n    $tooltipsRow = document.createElement('div');\n    $tooltipsRow.classList.add('tooltips');\n    $box.prepend($tooltipsRow);\n    updateRowClass();\n  };\n\n  const createTooltip = (className: string) => {\n    const $tooltip = document.createElement('div');\n    $tooltip.className = className;\n    return $tooltip;\n  };\n\n  const updateTooltip = ($tooltip: HTMLElement, type: string, left: string, top: string) => {\n    if(!$tooltip) return;\n\n    if(type === 'vertical'){\n      const diff = Math.abs($component?.getBoundingClientRect().x - $container.getBoundingClientRect().x);\n      $tooltip.style.left = `${ diff - distanceToPointer }px`;\n      $tooltip.style.top = top ?? '0';\n    }\n    else{\n      const diff = Math.abs($component?.getBoundingClientRect().y - $container.getBoundingClientRect().y);\n      $tooltip.style.left = left ?? '0';\n      $tooltip.style.top = `${ diff - distanceToPointer }px`;\n    }\n\n    $tooltip.style.width = `${ tooltipWidth }px`;\n    $tooltip.style.height = `${ tooltipHeight }px`;\n    $tooltip.style.background = tooltipBg;\n    $tooltip.style.color = tooltipTextColor;\n  };\n\n  const updateTooltips = () => {\n    const values = getters?.getValues() ?? [];\n    const $pointers = getters?.getPointerElements() ?? [];\n    const type = getters?.getType() ?? 'horizontal';\n\n    if(!values) return;\n\n    for(let i=0; i<values.length; i++){\n      const $tooltip = $tooltips[i];\n      $tooltip.textContent = (values[i] ?? '').toString();\n      updateTooltip($tooltip, type, $pointers[i].style.left, $pointers[i].style.top);\n    }\n  };\n\n  const createTooltips = () => {\n    const values = getters?.getValues() ?? [];\n\n    if(!values) return;\n\n    for(let i=0; i<values.length; i++){\n      const $tooltip = createTooltip(`tooltip tooltip-${ i + 1 }`);\n      $tooltip.style.position = 'absolute';\n      $tooltips.push($tooltip);\n      $tooltipsRow?.prepend($tooltip);\n    }\n\n    updateTooltips();\n  };\n\n  const initResizeObserver = () => {\n    resizeObserver = new ResizeObserver(entries => {\n      for (const entry of entries) {\n        updateTooltips();\n      }\n    });\n    resizeObserver.observe($component);\n  };\n\n  const toggleEnabled = (_enabled: boolean) => {\n    enabled = _enabled;\n\n    if(!enabled){\n      destroy();\n    }\n    else{\n      createTooltipsRow();\n      createTooltips();\n      initResizeObserver();\n    }\n  };\n\n  const setDistanceToPointer = (newDistance: number) => {\n    distanceToPointer = newDistance;\n    updateTooltips();\n  };\n\n  const setTooltipWidth = (newWidth: number) => {\n    tooltipWidth = newWidth;\n    updateTooltips();\n  };\n\n  const setTooltipHeight = (newHeight: number) => {\n    tooltipHeight = newHeight;\n    updateTooltips();\n  };\n\n  const setTooltipBg = (newValue) => {\n    tooltipBg = newValue;\n    updateTooltips();\n  };\n\n  const setTooltipTextColor = (newValue) => {\n    tooltipTextColor = newValue;\n    updateTooltips();\n  };\n\n  const update = (data: IPluginUpdateData) => {\n\n    if(!enabled || !data.values) return;\n\n    const $pointers = getters?.getPointerElements() ?? [];\n    const type = getters?.getType() ?? 'horizontal';\n\n    for(let i=0; i<data.values.length; i++){\n      const value = data.values[i];\n      const $tooltip = $tooltips[i];\n\n      if(value === undefined && !!$tooltip){\n        // remove the tooltip\n        $tooltip.remove();\n        $tooltip[i] = undefined;\n        continue;\n      }\n\n      if(value !== undefined && !$tooltip){\n\n        // create the tooltip\n        const $tooltip = createTooltip(`tooltip tooltip-${ i + 1 }`);\n        $tooltip.textContent = (value ?? '').toString();\n        $tooltip.style.position = 'absolute';\n        updateTooltip($tooltip, type, $pointers[i].style.left, $pointers[i].style.top);\n\n        $tooltips[i] = $tooltip;\n        $tooltipsRow?.append($tooltip);\n      }\n\n      if(!$tooltip) continue;\n      $tooltip.textContent = (value ?? '').toString();\n      updateTooltip($tooltip, type, $pointers[i].style.left, $pointers[i].style.top);\n    }\n  };\n\n  const destroy = () => {\n    $tooltipsRow?.remove();\n\n    for(const $tooltip of $tooltips){\n      if(!$tooltip) continue;\n      $tooltip.remove();\n    }\n\n    $tooltips = [];\n\n    resizeObserver?.disconnect();\n  };\n\n  return {\n\n    /**\n     * Required: unique plugin name\n     */\n    get name() {\n      return 'Moving Tooltip';\n    },\n\n    /**\n     * Optional: plugin initialization\n     */\n    init: (\n      _$component,\n      _requestUpdate,\n      _setters: IPluginSetters,\n      _getters: IPluginGetters\n    ) => {\n      $component = _$component;\n      $container = $component.shadowRoot?.querySelector('.container');\n      getters = _getters;\n\n      distanceToPointer = getNumber(_$component.getAttribute('moving-tooltip-distance-to-pointer'), DISTANCE_TO_POINTER_DEFAULT);\n      tooltipWidth = getNumber(_$component.getAttribute('moving-tooltip-width'), DEFAULT_TOOLTIP_WIDTH);\n      tooltipHeight = getNumber(_$component.getAttribute('moving-tooltip-height'), DEFAULT_TOOLTIP_HEIGHT);\n      tooltipBg = _$component.getAttribute('moving-tooltip-bg') || DEFAULT_TOOLTIP_BG;\n      tooltipTextColor = _$component.getAttribute('moving-tooltip-text-color') || DEFAULT_TOOLTIP_TEXT_COLOR;\n      toggleEnabled(getBoolean(_$component.getAttribute('moving-tooltip')));\n    },\n\n    /**\n     * Optional:\n     * this will be called each time\n     * range slider updates pointer positions or other properties\n     */\n    update,\n\n    /**\n     * Optional:\n     * this will be called each time observed HTML attribute changes;\n     * observed attributes are defined in window.tcRangeSliderObservedAttr array above.\n     */\n    onAttrChange: (_attrName: string, _newValue: string) => {\n      if(_attrName === 'moving-tooltip'){\n        toggleEnabled(getBoolean(_newValue));\n      }\n\n      if(_attrName === 'moving-tooltip-distance-to-pointer'){\n        setDistanceToPointer(getNumber(_newValue, DISTANCE_TO_POINTER_DEFAULT));\n      }\n\n      if(_attrName === 'moving-tooltip-width'){\n        setTooltipWidth(getNumber(_newValue, DEFAULT_TOOLTIP_WIDTH));\n      }\n\n      if(_attrName === 'moving-tooltip-height'){\n        setTooltipHeight(getNumber(_newValue, DEFAULT_TOOLTIP_HEIGHT));\n      }\n\n      if(_attrName === 'moving-tooltip-bg'){\n        setTooltipBg(_newValue);\n      }\n\n      if(_attrName === 'moving-tooltip-text-color'){\n        setTooltipTextColor(_newValue);\n      }\n    },\n\n    /**\n     * Optional:\n     * List of getters and setter that can be used to create slider API.\n     */\n    gettersAndSetters: [\n      {\n        name: 'movingTooltip',\n        attributes: {\n          get () {\n            return enabled ?? false;\n          },\n\n          set: (_enabled) => {\n            toggleEnabled(getBoolean(_enabled));\n          },\n        }\n      },\n\n      {\n        name: 'distanceToPointer',\n        attributes: {\n          get () {\n            return distanceToPointer ?? false;\n          },\n\n          set: (_value) => {\n            setDistanceToPointer(getNumber(_value, DISTANCE_TO_POINTER_DEFAULT));\n          },\n        }\n      },\n\n      {\n        name: 'tooltipWidth',\n        attributes: {\n          get () {\n            return tooltipWidth;\n          },\n\n          set: (_value) => {\n            setTooltipWidth(getNumber(_value, DEFAULT_TOOLTIP_WIDTH));\n          },\n        }\n      },\n\n      {\n        name: 'tooltipHeight',\n        attributes: {\n          get () {\n            return tooltipHeight;\n          },\n\n          set: (_value) => {\n            setTooltipHeight(getNumber(_value, DEFAULT_TOOLTIP_HEIGHT));\n          },\n        }\n      },\n\n      {\n        name: 'tooltipBg',\n        attributes: {\n          get () {\n            return tooltipBg;\n          },\n\n          set: (_value) => {\n            setTooltipBg(_value);\n          },\n        }\n      },\n\n      {\n        name: 'tooltipTextColor',\n        attributes: {\n          get () {\n            return tooltipTextColor;\n          },\n\n          set: (_value) => {\n            setTooltipTextColor(_value);\n          },\n        }\n      },\n    ],\n\n    css: `\n.tooltip{\n  background: #475569;\n  color: #fff;\n  font-size: 0.8rem;\n  border-radius: 3px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  transform: translate(-50%, -50%);\n}  \n\n.tooltip::after {\n    content: '';\n    position: absolute;\n    width: 20%;\n    height: 20%;\n    transform: translate(0%, -50%) rotate(45deg);\n    background-color: inherit;\n    z-index: -1;\n    top: 100%;\n}\n\n.is-after .tooltip::after {\n  top: 0;\n}\n\n.type-vertical .tooltip::after{\n  transform: translate(-50%, 0%) rotate(45deg);\n  left: 100%;\n  top: auto;\n}\n\n.type-vertical .is-after .tooltip::after{\n  left: 0%;\n}\n    `,\n\n    destroy,\n  };\n};\n\n/**\n * Required: add current plugin to the plugins list.\n */\nwindow.tcRangeSliderPlugins.push(MovingTooltipPlugin);\n\nexport default MovingTooltipPlugin;\n\n/**\n * export dynamic properties\n */\nexport interface IMovingTooltipPlugin extends RangeSlider{\n  movingTooltip: boolean;\n  distanceToPointer: number;\n  tooltipWidth: number;\n  tooltipHeight: number;\n  tooltipBg: string;\n  tooltipTextColor: string;\n}\n"],
  "mappings": "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",
  "names": ["isNumber", "input", "getNumber", "defaultValue", "getBoolean", "val", "DISTANCE_TO_POINTER_DEFAULT", "DEFAULT_TOOLTIP_WIDTH", "DEFAULT_TOOLTIP_HEIGHT", "DEFAULT_TOOLTIP_BG", "DEFAULT_TOOLTIP_TEXT_COLOR", "MovingTooltipPlugin", "$component", "$container", "getters", "enabled", "distanceToPointer", "tooltipWidth", "tooltipHeight", "tooltipBg", "tooltipTextColor", "$tooltips", "$tooltipsRow", "resizeObserver", "updateRowClass", "createTooltipsRow", "_a", "$box", "createTooltip", "className", "$tooltip", "updateTooltip", "type", "left", "top", "diff", "updateTooltips", "_b", "_c", "_d", "values", "$pointers", "i", "createTooltips", "initResizeObserver", "entries", "entry", "toggleEnabled", "_enabled", "destroy", "setDistanceToPointer", "newDistance", "setTooltipWidth", "newWidth", "setTooltipHeight", "newHeight", "setTooltipBg", "newValue", "setTooltipTextColor", "update", "data", "value", "_$component", "_requestUpdate", "_setters", "_getters", "getNumber", "getBoolean", "_attrName", "_newValue", "_value", "moving_tooltip_plugin_default"]
}
