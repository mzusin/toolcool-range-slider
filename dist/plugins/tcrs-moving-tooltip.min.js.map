{
  "version": 3,
  "sources": ["../../src/core/domain/math-provider.ts", "../../src/plugins/moving-tooltip-plugin/index.ts"],
  "sourcesContent": ["/**\n * scale a range [min,max] to [a,b]\n * f(x) = (b - a) * (x - min) / (max - min) + a\n */\nexport const convertRange = (min: number, max: number, a: number, b: number, x: number) => {\n  const temp = (max - min);\n  if(temp === 0) return a;\n  return ((b - a) * (x - min)) / temp + a;\n};\n\n// eslint-disable-next-line\nexport const isNumber = (input: any) => {\n  return !isNaN(parseFloat(input)) && isFinite(input);\n};\n\n// the below function should receive any\n// eslint-disable-next-line\nexport const getNumber = (input: any, defaultValue: any) : number => {\n  return isNumber(input) ? Number(input) : defaultValue;\n};\n\n/**\n * Round up to the next multiple of X,\n * where X is the step provided by the user.\n */\nexport const roundToStep = (num: number, step: number) => {\n  return step === 0 ? 0 : Math.round(num / step) * step;\n};\n\n/**\n * round to decimal places\n * https://stackoverflow.com/questions/11832914/how-to-round-to-at-most-2-decimal-places-if-necessary\n */\nexport const setDecimalPlaces = (num: number, decimalPlaces = Infinity) => {\n  if (decimalPlaces === Infinity) return num;\n\n  const coeff = 10 ** decimalPlaces;\n  return Math.round(num * coeff) / coeff;\n};\n\nexport const getBoolean = (val: string | null | undefined | boolean) => {\n  if(val === null || val === undefined) return false;\n  if(typeof val === 'boolean') return val;\n  return val.trim().toLowerCase() === 'true';\n};\n", "import { IPlugin, IPluginGetters, IPluginSetters, IPluginUpdateData } from '../../core/plugins/interfaces';\nimport RangeSlider from '../../core';\nimport { getBoolean, getNumber } from '../../core/domain/math-provider';\n\n/**\n * Moving Tooltip Plugin.\n * Important: the plugin script should be included BEFORE the core script.\n */\n\n/**\n * Required: init ToolCool Range Slider plugins namespace if not defined yet\n */\nwindow.tcRangeSliderPlugins = window.tcRangeSliderPlugins || [];\n\nconst DISTANCE_TO_POINTER_DEFAULT = 40; // px\nconst DEFAULT_TOOLTIP_WIDTH = 35;\nconst DEFAULT_TOOLTIP_HEIGHT = 30;\nconst DEFAULT_TOOLTIP_BG = '#475569';\nconst DEFAULT_TOOLTIP_TEXT_COLOR = '#fff';\nconst DEFAULT_Z_INDEX = 20;\n\nconst MovingTooltipPlugin = () : IPlugin => {\n\n  let $component: HTMLElement | null = null;\n  let getters: IPluginGetters | null = null;\n\n  let enabled = false;\n  let distanceToPointer = DISTANCE_TO_POINTER_DEFAULT; // px\n  let tooltipWidth = DEFAULT_TOOLTIP_WIDTH;\n  let tooltipHeight = DEFAULT_TOOLTIP_HEIGHT;\n  let tooltipBg = DEFAULT_TOOLTIP_BG;\n  let tooltipTextColor = DEFAULT_TOOLTIP_TEXT_COLOR;\n  let tooltipUnits = '';\n  let unitType = '';\n\n  let $tooltips: (HTMLElement | undefined)[] = [];\n  let $tooltipsRow: HTMLElement | null = null;\n  let resizeObserver: ResizeObserver | null = null;\n\n  const updateRowClass = () => {\n    $tooltipsRow?.classList.toggle('is-after', distanceToPointer <= 0);\n  };\n\n  const createTooltipsRow = () => {\n    const $slider = $component?.shadowRoot?.querySelector('#range-slider') as HTMLElement;\n    $tooltipsRow = document.createElement('div');\n    $tooltipsRow.classList.add('tooltips');\n    $slider.prepend($tooltipsRow);\n    updateRowClass();\n  };\n\n  const createTooltip = (className: string) => {\n    const $tooltip = document.createElement('div');\n    $tooltip.style.zIndex = DEFAULT_Z_INDEX.toString();\n    $tooltip.className = className;\n    return $tooltip;\n  };\n\n  const updateTooltip = ($tooltip: HTMLElement, type: string, left: string, top: string, zIndex: string|number) => {\n    if(!$tooltip) return;\n\n    if(type === 'vertical'){\n      $tooltip.style.left = `${ -distanceToPointer }px`;\n      $tooltip.style.top = top ?? '0';\n    }\n    else{\n      $tooltip.style.left = left ?? '0';\n      $tooltip.style.top = `${ -distanceToPointer }px`;\n    }\n\n    $tooltip.style.width = `${ tooltipWidth }px`;\n    $tooltip.style.height = `${ tooltipHeight }px`;\n    $tooltip.style.background = tooltipBg;\n    $tooltip.style.color = tooltipTextColor;\n    $tooltip.style.zIndex = zIndex.toString();\n  };\n\n  const getTooltipText = (text: string) => {\n    return unitType === 'prefix' ? `${ tooltipUnits }${ text }` : `${ text }${ tooltipUnits }`;\n  };\n\n  const updateTooltips = () => {\n    const values = getters?.getValues() ?? [];\n    const $pointers = getters?.getPointerElements() ?? [];\n    const type = getters?.getType() ?? 'horizontal';\n\n    if(!values) return;\n\n    for(let i=0; i<values.length; i++){\n      const $tooltip = $tooltips[i];\n      if(!$tooltip) continue;\n\n      const text = (values[i] ?? '').toString();\n      $tooltip.textContent = getTooltipText(text);\n      updateTooltip($tooltip, type, $pointers[i].style.left, $pointers[i].style.top, $pointers[i].style.zIndex);\n    }\n  };\n\n  const createTooltips = () => {\n    const values = getters?.getValues() ?? [];\n\n    if(!values) return;\n\n    for(let i=0; i<values.length; i++){\n      const $tooltip = createTooltip(`tooltip tooltip-${ i + 1 }`);\n      $tooltip.style.position = 'absolute';\n      $tooltips.push($tooltip);\n      $tooltipsRow?.prepend($tooltip);\n    }\n\n    updateTooltips();\n  };\n\n  const initResizeObserver = () => {\n    if(!$component) return;\n    resizeObserver = new ResizeObserver(entries => {\n      // eslint-disable-next-line\n      for (const _entry of entries) {\n        updateTooltips();\n      }\n    });\n    resizeObserver.observe($component);\n  };\n\n  const toggleEnabled = (_enabled: boolean) => {\n    enabled = _enabled;\n\n    if(!enabled){\n      destroy();\n    }\n    else{\n      createTooltipsRow();\n      createTooltips();\n      initResizeObserver();\n    }\n  };\n\n  const setDistanceToPointer = (newDistance: number) => {\n    distanceToPointer = newDistance;\n    updateTooltips();\n  };\n\n  const setTooltipWidth = (newWidth: number) => {\n    tooltipWidth = newWidth;\n    updateTooltips();\n  };\n\n  const setTooltipHeight = (newHeight: number) => {\n    tooltipHeight = newHeight;\n    updateTooltips();\n  };\n\n  const setTooltipBg = (newValue: string) => {\n    tooltipBg = newValue;\n    updateTooltips();\n  };\n\n  const setTooltipTextColor = (newValue: string) => {\n    tooltipTextColor = newValue;\n    updateTooltips();\n  };\n\n  const setTooltipUnits = (newValue: string) => {\n    tooltipUnits = newValue;\n    updateTooltips();\n  };\n\n  const setUnitType = (newValue: string) => {\n    unitType = newValue;\n    updateTooltips();\n  };\n\n  const update = (data: IPluginUpdateData) => {\n\n    if(!enabled || !data.values) return;\n\n    const $pointers = getters?.getPointerElements() ?? [];\n    const type = getters?.getType() ?? 'horizontal';\n\n    for(let i=0; i<data.values.length; i++) {\n      const value = data.values[i];\n      const $tooltip = $tooltips[i];\n\n      if(value === undefined && !!$tooltip){\n        // remove the tooltip\n        $tooltip.remove();\n        $tooltips[i] = undefined;\n        continue;\n      }\n\n      if(value !== undefined && !$tooltip){\n\n        // create the tooltip\n        const $tooltip = createTooltip(`tooltip tooltip-${ i + 1 }`);\n        const text = (value ?? '').toString();\n        $tooltip.textContent = getTooltipText(text);\n        $tooltip.style.position = 'absolute';\n        updateTooltip($tooltip, type, $pointers[i].style.left, $pointers[i].style.top, $pointers[i].style.zIndex);\n\n        $tooltips[i] = $tooltip;\n        $tooltipsRow?.append($tooltip);\n      }\n\n      if(!$tooltip) continue;\n\n      const text = (value ?? '').toString();\n      $tooltip.textContent = getTooltipText(text);\n      updateTooltip($tooltip, type, $pointers[i].style.left, $pointers[i].style.top, $pointers[i].style.zIndex);\n    }\n  };\n\n  const destroy = () => {\n    $tooltipsRow?.remove();\n\n    for(const $tooltip of $tooltips){\n      if(!$tooltip) continue;\n      $tooltip.remove();\n    }\n\n    $tooltips = [];\n\n    resizeObserver?.disconnect();\n  };\n\n  return {\n\n    /**\n     * Required: unique plugin name\n     */\n    get name() {\n      return 'Moving Tooltip';\n    },\n\n    /**\n     * Optional: plugin initialization\n     */\n    init: (\n      _$component,\n      _requestUpdate,\n      _setters: IPluginSetters,\n      _getters: IPluginGetters\n    ) => {\n      $component = _$component;\n      getters = _getters;\n\n      distanceToPointer = getNumber(_$component.getAttribute('moving-tooltip-distance-to-pointer'), DISTANCE_TO_POINTER_DEFAULT);\n      tooltipWidth = getNumber(_$component.getAttribute('moving-tooltip-width'), DEFAULT_TOOLTIP_WIDTH);\n      tooltipHeight = getNumber(_$component.getAttribute('moving-tooltip-height'), DEFAULT_TOOLTIP_HEIGHT);\n      tooltipBg = _$component.getAttribute('moving-tooltip-bg') || DEFAULT_TOOLTIP_BG;\n      tooltipTextColor = _$component.getAttribute('moving-tooltip-text-color') || DEFAULT_TOOLTIP_TEXT_COLOR;\n      tooltipUnits = _$component.getAttribute('moving-tooltip-units') || '';\n      unitType = _$component.getAttribute('moving-tooltip-units-type') || '';\n      toggleEnabled(getBoolean(_$component.getAttribute('moving-tooltip')));\n    },\n\n    /**\n     * Optional:\n     * this will be called each time\n     * range slider updates pointer positions or other properties\n     */\n    update,\n\n    /**\n     * Optional:\n     * this will be called each time observed HTML attribute changes;\n     * observed attributes are defined in window.tcRangeSliderObservedAttr array above.\n     */\n    onAttrChange: (_attrName: string, _newValue: string) => {\n      if(_attrName === 'moving-tooltip'){\n        toggleEnabled(getBoolean(_newValue));\n      }\n\n      if(_attrName === 'moving-tooltip-distance-to-pointer'){\n        setDistanceToPointer(getNumber(_newValue, DISTANCE_TO_POINTER_DEFAULT));\n      }\n\n      if(_attrName === 'moving-tooltip-width'){\n        setTooltipWidth(getNumber(_newValue, DEFAULT_TOOLTIP_WIDTH));\n      }\n\n      if(_attrName === 'moving-tooltip-height'){\n        setTooltipHeight(getNumber(_newValue, DEFAULT_TOOLTIP_HEIGHT));\n      }\n\n      if(_attrName === 'moving-tooltip-bg'){\n        setTooltipBg(_newValue);\n      }\n\n      if(_attrName === 'moving-tooltip-text-color'){\n        setTooltipTextColor(_newValue);\n      }\n\n      if(_attrName === 'moving-tooltip-units'){\n        setTooltipUnits(_newValue);\n      }\n\n      if(_attrName === 'moving-tooltip-units-type'){\n        setUnitType(_newValue);\n      }\n    },\n\n    /**\n     * Optional:\n     * List of getters and setter that can be used to create slider API.\n     */\n    gettersAndSetters: [\n      {\n        name: 'movingTooltip',\n        attributes: {\n          get () {\n            return enabled ?? false;\n          },\n\n          set: (_enabled) => {\n            toggleEnabled(getBoolean(_enabled));\n          },\n        }\n      },\n\n      {\n        name: 'distanceToPointer',\n        attributes: {\n          get () {\n            return distanceToPointer ?? false;\n          },\n\n          set: (_value) => {\n            setDistanceToPointer(getNumber(_value, DISTANCE_TO_POINTER_DEFAULT));\n          },\n        }\n      },\n\n      {\n        name: 'tooltipWidth',\n        attributes: {\n          get () {\n            return tooltipWidth;\n          },\n\n          set: (_value) => {\n            setTooltipWidth(getNumber(_value, DEFAULT_TOOLTIP_WIDTH));\n          },\n        }\n      },\n\n      {\n        name: 'tooltipHeight',\n        attributes: {\n          get () {\n            return tooltipHeight;\n          },\n\n          set: (_value) => {\n            setTooltipHeight(getNumber(_value, DEFAULT_TOOLTIP_HEIGHT));\n          },\n        }\n      },\n\n      {\n        name: 'tooltipBg',\n        attributes: {\n          get () {\n            return tooltipBg;\n          },\n\n          set: (_value) => {\n            setTooltipBg(_value);\n          },\n        }\n      },\n\n      {\n        name: 'tooltipTextColor',\n        attributes: {\n          get () {\n            return tooltipTextColor;\n          },\n\n          set: (_value) => {\n            setTooltipTextColor(_value);\n          },\n        }\n      },\n\n      {\n        name: 'tooltipUnits',\n        attributes: {\n          get () {\n            return tooltipUnits;\n          },\n\n          set: (_value) => {\n            setTooltipUnits(_value);\n          },\n        }\n      },\n\n      {\n        name: 'tooltipUnitType',\n        attributes: {\n          get () {\n            return unitType;\n          },\n\n          set: (_value) => {\n            setUnitType(_value);\n          },\n        }\n      },\n    ],\n\n    css: `\n.tooltip{\n  background: #475569;\n  color: #fff;\n  font-size: 0.8rem;\n  border-radius: 3px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  transform: translate(-50%, -50%);\n  pointer-events: none;\n  z-index: ${ DEFAULT_Z_INDEX };\n}  \n\n.tooltip::after {\n    content: '';\n    position: absolute;\n    width: 20%;\n    height: 20%;\n    transform: translate(0%, -50%) rotate(45deg);\n    background-color: inherit;\n    z-index: -1;\n    top: 100%;\n}\n\n.is-after .tooltip::after {\n  top: 0;\n}\n\n.type-vertical .tooltip::after{\n  transform: translate(-50%, 0%) rotate(45deg);\n  left: 100%;\n  top: auto;\n}\n\n.type-vertical .is-after .tooltip::after{\n  left: 0%;\n}\n\n.animate-on-click .tooltip{\n    transition: all var(--animate-onclick);\n}\n    `,\n\n    destroy,\n  };\n};\n\n/**\n * Required: add current plugin to the plugins list.\n */\nwindow.tcRangeSliderPlugins.push(MovingTooltipPlugin);\n\nexport default MovingTooltipPlugin;\n\n/**\n * export dynamic properties\n */\nexport interface IMovingTooltipPlugin extends RangeSlider{\n  movingTooltip: boolean;\n  distanceToPointer: number;\n  tooltipWidth: number;\n  tooltipHeight: number;\n  tooltipBg: string;\n  tooltipTextColor: string;\n  tooltipUnits: string;\n  tooltipUnitType: string;\n}\n"],
  "mappings": "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",
  "names": ["isNumber", "input", "getNumber", "defaultValue", "getBoolean", "val", "DISTANCE_TO_POINTER_DEFAULT", "DEFAULT_TOOLTIP_WIDTH", "DEFAULT_TOOLTIP_HEIGHT", "DEFAULT_TOOLTIP_BG", "DEFAULT_TOOLTIP_TEXT_COLOR", "DEFAULT_Z_INDEX", "MovingTooltipPlugin", "$component", "getters", "enabled", "distanceToPointer", "tooltipWidth", "tooltipHeight", "tooltipBg", "tooltipTextColor", "tooltipUnits", "unitType", "$tooltips", "$tooltipsRow", "resizeObserver", "updateRowClass", "createTooltipsRow", "_a", "$slider", "createTooltip", "className", "$tooltip", "updateTooltip", "type", "left", "top", "zIndex", "getTooltipText", "text", "updateTooltips", "_b", "_c", "_d", "values", "$pointers", "i", "createTooltips", "initResizeObserver", "entries", "_entry", "toggleEnabled", "_enabled", "destroy", "setDistanceToPointer", "newDistance", "setTooltipWidth", "newWidth", "setTooltipHeight", "newHeight", "setTooltipBg", "newValue", "setTooltipTextColor", "setTooltipUnits", "setUnitType", "update", "data", "value", "_$component", "_requestUpdate", "_setters", "_getters", "getNumber", "getBoolean", "_attrName", "_newValue", "_value", "moving_tooltip_plugin_default"]
}
