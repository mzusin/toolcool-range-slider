{
  "version": 3,
  "sources": ["../../src/plugins/binding-labels-plugin/index.ts"],
  "sourcesContent": ["import { IPlugin, IPluginGetters, IPluginSetters, IPluginUpdateData } from '../../core/plugins/interfaces';\n\n/**\n * Binding Labels Plugin.\n * Important: the plugin script should be included BEFORE the core script.\n */\n\n/**\n * Required: init ToolCool Range Slider plugins namespace if not defined yet\n */\nwindow.tcRangeSliderPlugins = window.tcRangeSliderPlugins || [];\n\nconst BindingLabelsPlugin = () : IPlugin => {\n\n  let getters: IPluginGetters | null = null;\n  let $component: HTMLElement | null = null;\n  let requestUpdate: (() => void) | null = null;\n\n  const paths: (string | undefined)[] = [];\n  const $labels: (HTMLElement | undefined)[] = [];\n\n  const updateLabel = (index: number, newPath: string) => {\n    const $newLabel = document.querySelector(newPath) as HTMLElement;\n    $labels[index]?.remove();\n    $labels[index] = $newLabel ?? undefined;\n\n    if(typeof requestUpdate === 'function'){\n      requestUpdate();\n    }\n  };\n\n  const initLabels = () => {\n\n    const values = getters?.getValues() ?? [];\n    for(let i=0; i<values.length; i++){\n\n      // find labels path for the given index -------------------------\n      let labelPath = '';\n\n      if(i === 0){\n        labelPath = $component?.getAttribute(`value-label`) ?? '';\n        if(!labelPath){\n          labelPath = $component?.getAttribute(`value0-label`) ?? '';\n        }\n        if(!labelPath){\n          labelPath = $component?.getAttribute(`value1-label`) ?? '';\n        }\n      }\n      else{\n        labelPath = $component?.getAttribute(`value${ i + 1 }-label`) ?? '';\n      }\n\n      if(!labelPath){\n        $labels[i] = undefined;\n        paths[i] = undefined;\n        continue;\n      }\n\n      // create label\n      const $label = document.querySelector(labelPath) as HTMLElement;\n      if(!$label){\n        $labels[i] = undefined;\n        paths[i] = undefined;\n        continue;\n      }\n\n      $labels[i] = $label;\n      paths[i] = labelPath;\n\n      // set current value\n      $label.textContent = values[i]?.toString() ?? '';\n\n      const apiProp = `value${ i + 1 }Label`;\n      if(!Object.prototype.hasOwnProperty.call($component, apiProp)){\n        Object.defineProperty($component, apiProp, {\n          get () {\n            return paths[i];\n          },\n\n          set: (val) => {\n            updateLabel(i, val);\n          },\n        });\n      }\n    }\n\n    if(typeof requestUpdate === 'function'){\n      requestUpdate();\n    }\n  };\n\n  return {\n    /**\n     * Required: unique plugin name\n     */\n    get name() {\n      return 'Binding Labels';\n    },\n\n    /**\n     * Optional: plugin initialization\n     */\n    init: (\n      _$component,\n      _requestUpdate,\n      _setters: IPluginSetters,\n      _getters: IPluginGetters\n    ) => {\n      $component = _$component;\n      requestUpdate = _requestUpdate;\n      getters = _getters;\n\n      initLabels();\n    },\n\n    /**\n     * Optional:\n     * this will be called each time\n     * range slider updates pointer positions\n     */\n    update: (data: IPluginUpdateData) => {\n      for(let i=0; i<data.values.length; i++){\n        const $label = $labels[i];\n        if(!$label) continue;\n\n        const value = data.values[i] ?? '';\n        $label.textContent = value.toString();\n      }\n    },\n\n    /**\n     * Optional:\n     * this will be called each time observed HTML attribute changes;\n     * observed attributes are defined in window.tcRangeSliderObservedAttr array above.\n     */\n    onAttrChange: (_attrName: string, _newValue: string) => {\n\n      if(/^value([0-9]*)-label$/.test(_attrName) && typeof requestUpdate === 'function'){\n        requestUpdate();\n      }\n    },\n\n    /**\n     * Optional:\n     * List of getters and setter that can be used to create slider API.\n     * For example, the code below will call the setter function:\n     * slider1.valueLabel = '.value-13';\n     * And this line will call the getter function:\n     * console.log(slider1.valueLabel);\n     */\n    gettersAndSetters: [\n      /*{\n        name: 'valueLabel',\n        attributes: {\n          get () {\n            return referenceLabel1;\n          },\n\n          set: (_referenceLabel1) => {\n            setReferenceLabel1(_referenceLabel1);\n          },\n        }\n      },\n      {\n        name: 'value2Label',\n        attributes: {\n          get () {\n            return referenceLabel2;\n          },\n\n          set: (_referenceLabel2) => {\n            setReferenceLabel2(_referenceLabel2);\n          },\n        }\n      }*/\n    ],\n  };\n};\n\n/**\n * Required: add current plugin to the plugins list.\n */\nwindow.tcRangeSliderPlugins.push(BindingLabelsPlugin);\n\nexport default BindingLabelsPlugin;"],
  "mappings": ";;;;;;;MAUA,OAAO,qBAAuB,OAAO,sBAAwB,CAAC,EAE9D,IAAMA,EAAsB,IAAgB,CAE1C,IAAIC,EAAiC,KACjCC,EAAiC,KACjCC,EAAqC,KAEnCC,EAAgC,CAAC,EACjCC,EAAuC,CAAC,EAExCC,EAAc,CAACC,EAAeC,IAAoB,CArB1D,IAAAC,EAsBI,IAAMC,EAAY,SAAS,cAAcF,CAAO,GAChDC,EAAAJ,EAAQE,KAAR,MAAAE,EAAgB,SAChBJ,EAAQE,GAASG,GAAA,KAAAA,EAAa,OAE3B,OAAOP,GAAkB,YAC1BA,EAAc,CAElB,EAEMQ,EAAa,IAAM,CA/B3B,IAAAF,EAAAG,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAiCI,IAAMC,GAAST,EAAAR,GAAA,YAAAA,EAAS,cAAT,KAAAQ,EAAwB,CAAC,EACxC,QAAQU,EAAE,EAAGA,EAAED,EAAO,OAAQC,IAAI,CAGhC,IAAIC,EAAY,GAehB,GAbGD,IAAM,GACPC,GAAYR,EAAAV,GAAA,YAAAA,EAAY,aAAa,iBAAzB,KAAAU,EAA2C,GACnDQ,IACFA,GAAYP,EAAAX,GAAA,YAAAA,EAAY,aAAa,kBAAzB,KAAAW,EAA4C,IAEtDO,IACFA,GAAYN,EAAAZ,GAAA,YAAAA,EAAY,aAAa,kBAAzB,KAAAY,EAA4C,KAI1DM,GAAYL,EAAAb,GAAA,YAAAA,EAAY,aAAa,QAASiB,EAAI,aAAtC,KAAAJ,EAAqD,GAGhE,CAACK,EAAU,CACZf,EAAQc,GAAK,OACbf,EAAMe,GAAK,OACX,QACF,CAGA,IAAME,EAAS,SAAS,cAAcD,CAAS,EAC/C,GAAG,CAACC,EAAO,CACThB,EAAQc,GAAK,OACbf,EAAMe,GAAK,OACX,QACF,CAEAd,EAAQc,GAAKE,EACbjB,EAAMe,GAAKC,EAGXC,EAAO,aAAcJ,GAAAD,EAAAE,EAAOC,KAAP,YAAAH,EAAW,aAAX,KAAAC,EAAyB,GAE9C,IAAMK,EAAU,QAASH,EAAI,SACzB,OAAO,UAAU,eAAe,KAAKjB,EAAYoB,CAAO,GAC1D,OAAO,eAAepB,EAAYoB,EAAS,CACzC,KAAO,CACL,OAAOlB,EAAMe,EACf,EAEA,IAAMI,GAAQ,CACZjB,EAAYa,EAAGI,CAAG,CACpB,CACF,CAAC,CAEL,CAEG,OAAOpB,GAAkB,YAC1BA,EAAc,CAElB,EAEA,MAAO,CAIL,IAAI,MAAO,CACT,MAAO,gBACT,EAKA,KAAM,CACJqB,EACAC,EACAC,EACAC,IACG,CACHzB,EAAasB,EACbrB,EAAgBsB,EAChBxB,EAAU0B,EAEVhB,EAAW,CACb,EAOA,OAASiB,GAA4B,CAxHzC,IAAAnB,EAyHM,QAAQU,EAAE,EAAGA,EAAES,EAAK,OAAO,OAAQT,IAAI,CACrC,IAAME,EAAShB,EAAQc,GACvB,GAAG,CAACE,EAAQ,SAEZ,IAAMQ,GAAQpB,EAAAmB,EAAK,OAAOT,KAAZ,KAAAV,EAAkB,GAChCY,EAAO,YAAcQ,EAAM,SAAS,CACtC,CACF,EAOA,aAAc,CAACC,EAAmBC,IAAsB,CAEnD,wBAAwB,KAAKD,CAAS,GAAK,OAAO3B,GAAkB,YACrEA,EAAc,CAElB,EAUA,kBAAmB,CAyBnB,CACF,CACF,EAKA,OAAO,qBAAqB,KAAKH,CAAmB,EAEpD,IAAOgC,EAAQhC",
  "names": ["BindingLabelsPlugin", "getters", "$component", "requestUpdate", "paths", "$labels", "updateLabel", "index", "newPath", "_a", "$newLabel", "initLabels", "_b", "_c", "_d", "_e", "_f", "_g", "values", "i", "labelPath", "$label", "apiProp", "val", "_$component", "_requestUpdate", "_setters", "_getters", "data", "value", "_attrName", "_newValue", "binding_labels_plugin_default"]
}
