{
  "version": 3,
  "sources": ["../../src/plugins/binding-labels-plugin/index.ts"],
  "sourcesContent": ["import { IPlugin, IPluginGetters, IPluginSetters, IPluginUpdateData } from '../../core/plugins/interfaces';\n\n/**\n * Binding Labels Plugin.\n * Important: the plugin script should be included BEFORE the core script.\n */\n\n/**\n * Required: init ToolCool Range Slider plugins namespace if not defined yet\n */\nwindow.tcRangeSliderPlugins = window.tcRangeSliderPlugins || [];\n\n/**\n * Optional: array of attribute names to monitor for changes\n * Read more: https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements\n */\nwindow.tcRangeSliderObservedAttr = window.tcRangeSliderObservedAttr || [];\nwindow.tcRangeSliderObservedAttr.push('value-label');\nwindow.tcRangeSliderObservedAttr.push('value2-label');\n\nconst BindingLabelsPlugin = () : IPlugin => {\n\n  let requestUpdate: (() => void) | null = null;\n\n  let referenceLabel1: string | null = null;\n  let referenceLabel2: string | null = null;\n\n  let $referenceLabel1: HTMLElement | null = null;\n  let $referenceLabel2: HTMLElement | null = null;\n\n  const setReferenceLabel1 = (_referenceLabel1: string | null) => {\n    referenceLabel1 = _referenceLabel1;\n    $referenceLabel1 = _referenceLabel1 ? document.querySelector(_referenceLabel1) : null;\n\n    if(requestUpdate && typeof requestUpdate === 'function'){\n      requestUpdate();\n    }\n  };\n\n  const setReferenceLabel2 = (_referenceLabel2: string | null) => {\n    referenceLabel2 = _referenceLabel2;\n    $referenceLabel2 = _referenceLabel2 ? document.querySelector(_referenceLabel2) : null;\n\n    if(requestUpdate && typeof requestUpdate === 'function'){\n      requestUpdate();\n    }\n  };\n\n  return {\n    /**\n     * Required: unique plugin name\n     */\n    get name() {\n      return 'Binding Labels';\n    },\n\n    /**\n     * Optional: plugin initialization\n     */\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    init: (\n      _$component,\n      _requestUpdate,\n      _setters: IPluginSetters,\n      _getters: IPluginGetters\n    ) => {\n      requestUpdate = _requestUpdate;\n\n      setReferenceLabel1(_$component.getAttribute('value-label'));\n      setReferenceLabel2(_$component.getAttribute('value2-label'));\n    },\n\n    /**\n     * Optional:\n     * this will be called each time\n     * range slider updates pointer positions\n     */\n    update: (data: IPluginUpdateData) => {\n      const textValue1 = data.values[0];\n      const textValue2 = data.values[1];\n\n      if($referenceLabel1 && textValue1 !== undefined){\n        $referenceLabel1.textContent = textValue1.toString();\n      }\n\n      if($referenceLabel2 && textValue2 !== undefined){\n        $referenceLabel2.textContent = textValue2.toString();\n      }\n    },\n\n    /**\n     * Optional:\n     * this will be called each time observed HTML attribute changes;\n     * observed attributes are defined in window.tcRangeSliderObservedAttr array above.\n     */\n    onAttrChange: (_attrName: string, _oldValue: string, _newValue: string) => {\n\n      switch (_attrName){\n        case 'value-label': {\n          setReferenceLabel1(_newValue);\n          break;\n        }\n\n        case 'value2-label': {\n          setReferenceLabel2(_newValue);\n          break;\n        }\n      }\n    },\n\n    /**\n     * Optional:\n     * List of getters and setter that can be used to create slider API.\n     * For example, the code below will call the setter function:\n     * slider1.valueLabel = '.value-13';\n     * And this line will call the getter function:\n     * console.log(slider1.valueLabel);\n     */\n    gettersAndSetters: [\n      {\n        name: 'valueLabel',\n        attributes: {\n          get () {\n            return referenceLabel1;\n          },\n\n          set: (_referenceLabel1) => {\n            setReferenceLabel1(_referenceLabel1);\n          },\n        }\n      },\n      {\n        name: 'value2Label',\n        attributes: {\n          get () {\n            return referenceLabel2;\n          },\n\n          set: (_referenceLabel2) => {\n            setReferenceLabel2(_referenceLabel2);\n          },\n        }\n      }\n    ],\n  };\n};\n\n/**\n * Required: add current plugin to the plugins list.\n */\nwindow.tcRangeSliderPlugins.push(BindingLabelsPlugin);\n\nexport default BindingLabelsPlugin;"],
  "mappings": ";;;;;;;MAUA,OAAO,qBAAuB,OAAO,sBAAwB,CAAC,EAM9D,OAAO,0BAA4B,OAAO,2BAA6B,CAAC,EACxE,OAAO,0BAA0B,KAAK,aAAa,EACnD,OAAO,0BAA0B,KAAK,cAAc,EAEpD,IAAMA,EAAsB,IAAgB,CAE1C,IAAIC,EAAqC,KAErCC,EAAiC,KACjCC,EAAiC,KAEjCC,EAAuC,KACvCC,EAAuC,KAErCC,EAAsBC,GAAoC,CAC9DL,EAAkBK,EAClBH,EAAmBG,EAAmB,SAAS,cAAcA,CAAgB,EAAI,KAE9EN,GAAiB,OAAOA,GAAkB,YAC3CA,EAAc,CAElB,EAEMO,EAAsBC,GAAoC,CAC9DN,EAAkBM,EAClBJ,EAAmBI,EAAmB,SAAS,cAAcA,CAAgB,EAAI,KAE9ER,GAAiB,OAAOA,GAAkB,YAC3CA,EAAc,CAElB,EAEA,MAAO,CAIL,IAAI,MAAO,CACT,MAAO,gBACT,EAMA,KAAM,CACJS,EACAC,EACAC,EACAC,IACG,CACHZ,EAAgBU,EAEhBL,EAAmBI,EAAY,aAAa,aAAa,CAAC,EAC1DF,EAAmBE,EAAY,aAAa,cAAc,CAAC,CAC7D,EAOA,OAASI,GAA4B,CACnC,IAAMC,EAAaD,EAAK,OAAO,GACzBE,EAAaF,EAAK,OAAO,GAE5BV,GAAoBW,IAAe,SACpCX,EAAiB,YAAcW,EAAW,SAAS,GAGlDV,GAAoBW,IAAe,SACpCX,EAAiB,YAAcW,EAAW,SAAS,EAEvD,EAOA,aAAc,CAACC,EAAmBC,EAAmBC,IAAsB,CAEzE,OAAQF,OACD,cAAe,CAClBX,EAAmBa,CAAS,EAC5B,KACF,KAEK,eAAgB,CACnBX,EAAmBW,CAAS,EAC5B,KACF,EAEJ,EAUA,kBAAmB,CACjB,CACE,KAAM,aACN,WAAY,CACV,KAAO,CACL,OAAOjB,CACT,EAEA,IAAMK,GAAqB,CACzBD,EAAmBC,CAAgB,CACrC,CACF,CACF,EACA,CACE,KAAM,cACN,WAAY,CACV,KAAO,CACL,OAAOJ,CACT,EAEA,IAAMM,GAAqB,CACzBD,EAAmBC,CAAgB,CACrC,CACF,CACF,CACF,CACF,CACF,EAKA,OAAO,qBAAqB,KAAKT,CAAmB,EAEpD,IAAOoB,EAAQpB",
  "names": ["BindingLabelsPlugin", "requestUpdate", "referenceLabel1", "referenceLabel2", "$referenceLabel1", "$referenceLabel2", "setReferenceLabel1", "_referenceLabel1", "setReferenceLabel2", "_referenceLabel2", "_$component", "_requestUpdate", "_setters", "_getters", "data", "textValue1", "textValue2", "_attrName", "_oldValue", "_newValue", "binding_labels_plugin_default"]
}
