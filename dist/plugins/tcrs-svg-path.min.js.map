{
  "version": 3,
  "sources": ["../../node_modules/svgpath/lib/path_parse.js", "../../node_modules/svgpath/lib/matrix.js", "../../node_modules/svgpath/lib/transform_parse.js", "../../node_modules/svgpath/lib/a2c.js", "../../node_modules/svgpath/lib/ellipse.js", "../../node_modules/svgpath/lib/svgpath.js", "../../node_modules/svgpath/index.js", "../../node_modules/svg-path-bbox/dist/index.js", "../../node_modules/svg-path-bbox/dist/wrapper.js", "../../src/plugins/svg-path-plugin/index.ts"],
  "sourcesContent": ["'use strict';\n\n\nvar paramCounts = { a: 7, c: 6, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, z: 0 };\n\nvar SPECIAL_SPACES = [\n  0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006,\n  0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF\n];\n\nfunction isSpace(ch) {\n  return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029) || // Line terminators\n    // White spaces\n    (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||\n    (ch >= 0x1680 && SPECIAL_SPACES.indexOf(ch) >= 0);\n}\n\nfunction isCommand(code) {\n  /*eslint-disable no-bitwise*/\n  switch (code | 0x20) {\n    case 0x6D/* m */:\n    case 0x7A/* z */:\n    case 0x6C/* l */:\n    case 0x68/* h */:\n    case 0x76/* v */:\n    case 0x63/* c */:\n    case 0x73/* s */:\n    case 0x71/* q */:\n    case 0x74/* t */:\n    case 0x61/* a */:\n    case 0x72/* r */:\n      return true;\n  }\n  return false;\n}\n\nfunction isArc(code) {\n  return (code | 0x20) === 0x61;\n}\n\nfunction isDigit(code) {\n  return (code >= 48 && code <= 57);   // 0..9\n}\n\nfunction isDigitStart(code) {\n  return (code >= 48 && code <= 57) || /* 0..9 */\n          code === 0x2B || /* + */\n          code === 0x2D || /* - */\n          code === 0x2E;   /* . */\n}\n\n\nfunction State(path) {\n  this.index  = 0;\n  this.path   = path;\n  this.max    = path.length;\n  this.result = [];\n  this.param  = 0.0;\n  this.err    = '';\n  this.segmentStart = 0;\n  this.data   = [];\n}\n\nfunction skipSpaces(state) {\n  while (state.index < state.max && isSpace(state.path.charCodeAt(state.index))) {\n    state.index++;\n  }\n}\n\n\nfunction scanFlag(state) {\n  var ch = state.path.charCodeAt(state.index);\n\n  if (ch === 0x30/* 0 */) {\n    state.param = 0;\n    state.index++;\n    return;\n  }\n\n  if (ch === 0x31/* 1 */) {\n    state.param = 1;\n    state.index++;\n    return;\n  }\n\n  state.err = 'SvgPath: arc flag can be 0 or 1 only (at pos ' + state.index + ')';\n}\n\n\nfunction scanParam(state) {\n  var start = state.index,\n      index = start,\n      max = state.max,\n      zeroFirst = false,\n      hasCeiling = false,\n      hasDecimal = false,\n      hasDot = false,\n      ch;\n\n  if (index >= max) {\n    state.err = 'SvgPath: missed param (at pos ' + index + ')';\n    return;\n  }\n  ch = state.path.charCodeAt(index);\n\n  if (ch === 0x2B/* + */ || ch === 0x2D/* - */) {\n    index++;\n    ch = (index < max) ? state.path.charCodeAt(index) : 0;\n  }\n\n  // This logic is shamelessly borrowed from Esprima\n  // https://github.com/ariya/esprimas\n  //\n  if (!isDigit(ch) && ch !== 0x2E/* . */) {\n    state.err = 'SvgPath: param should start with 0..9 or `.` (at pos ' + index + ')';\n    return;\n  }\n\n  if (ch !== 0x2E/* . */) {\n    zeroFirst = (ch === 0x30/* 0 */);\n    index++;\n\n    ch = (index < max) ? state.path.charCodeAt(index) : 0;\n\n    if (zeroFirst && index < max) {\n      // decimal number starts with '0' such as '09' is illegal.\n      if (ch && isDigit(ch)) {\n        state.err = 'SvgPath: numbers started with `0` such as `09` are illegal (at pos ' + start + ')';\n        return;\n      }\n    }\n\n    while (index < max && isDigit(state.path.charCodeAt(index))) {\n      index++;\n      hasCeiling = true;\n    }\n    ch = (index < max) ? state.path.charCodeAt(index) : 0;\n  }\n\n  if (ch === 0x2E/* . */) {\n    hasDot = true;\n    index++;\n    while (isDigit(state.path.charCodeAt(index))) {\n      index++;\n      hasDecimal = true;\n    }\n    ch = (index < max) ? state.path.charCodeAt(index) : 0;\n  }\n\n  if (ch === 0x65/* e */ || ch === 0x45/* E */) {\n    if (hasDot && !hasCeiling && !hasDecimal) {\n      state.err = 'SvgPath: invalid float exponent (at pos ' + index + ')';\n      return;\n    }\n\n    index++;\n\n    ch = (index < max) ? state.path.charCodeAt(index) : 0;\n    if (ch === 0x2B/* + */ || ch === 0x2D/* - */) {\n      index++;\n    }\n    if (index < max && isDigit(state.path.charCodeAt(index))) {\n      while (index < max && isDigit(state.path.charCodeAt(index))) {\n        index++;\n      }\n    } else {\n      state.err = 'SvgPath: invalid float exponent (at pos ' + index + ')';\n      return;\n    }\n  }\n\n  state.index = index;\n  state.param = parseFloat(state.path.slice(start, index)) + 0.0;\n}\n\n\nfunction finalizeSegment(state) {\n  var cmd, cmdLC;\n\n  // Process duplicated commands (without comand name)\n\n  // This logic is shamelessly borrowed from Raphael\n  // https://github.com/DmitryBaranovskiy/raphael/\n  //\n  cmd   = state.path[state.segmentStart];\n  cmdLC = cmd.toLowerCase();\n\n  var params = state.data;\n\n  if (cmdLC === 'm' && params.length > 2) {\n    state.result.push([ cmd, params[0], params[1] ]);\n    params = params.slice(2);\n    cmdLC = 'l';\n    cmd = (cmd === 'm') ? 'l' : 'L';\n  }\n\n  if (cmdLC === 'r') {\n    state.result.push([ cmd ].concat(params));\n  } else {\n\n    while (params.length >= paramCounts[cmdLC]) {\n      state.result.push([ cmd ].concat(params.splice(0, paramCounts[cmdLC])));\n      if (!paramCounts[cmdLC]) {\n        break;\n      }\n    }\n  }\n}\n\n\nfunction scanSegment(state) {\n  var max = state.max,\n      cmdCode, is_arc, comma_found, need_params, i;\n\n  state.segmentStart = state.index;\n  cmdCode = state.path.charCodeAt(state.index);\n  is_arc = isArc(cmdCode);\n\n  if (!isCommand(cmdCode)) {\n    state.err = 'SvgPath: bad command ' + state.path[state.index] + ' (at pos ' + state.index + ')';\n    return;\n  }\n\n  need_params = paramCounts[state.path[state.index].toLowerCase()];\n\n  state.index++;\n  skipSpaces(state);\n\n  state.data = [];\n\n  if (!need_params) {\n    // Z\n    finalizeSegment(state);\n    return;\n  }\n\n  comma_found = false;\n\n  for (;;) {\n    for (i = need_params; i > 0; i--) {\n      if (is_arc && (i === 3 || i === 4)) scanFlag(state);\n      else scanParam(state);\n\n      if (state.err.length) {\n        return;\n      }\n      state.data.push(state.param);\n\n      skipSpaces(state);\n      comma_found = false;\n\n      if (state.index < max && state.path.charCodeAt(state.index) === 0x2C/* , */) {\n        state.index++;\n        skipSpaces(state);\n        comma_found = true;\n      }\n    }\n\n    // after ',' param is mandatory\n    if (comma_found) {\n      continue;\n    }\n\n    if (state.index >= state.max) {\n      break;\n    }\n\n    // Stop on next segment\n    if (!isDigitStart(state.path.charCodeAt(state.index))) {\n      break;\n    }\n  }\n\n  finalizeSegment(state);\n}\n\n\n/* Returns array of segments:\n *\n * [\n *   [ command, coord1, coord2, ... ]\n * ]\n */\nmodule.exports = function pathParse(svgPath) {\n  var state = new State(svgPath);\n  var max = state.max;\n\n  skipSpaces(state);\n\n  while (state.index < max && !state.err.length) {\n    scanSegment(state);\n  }\n\n  if (state.err.length) {\n    state.result = [];\n\n  } else if (state.result.length) {\n\n    if ('mM'.indexOf(state.result[0][0]) < 0) {\n      state.err = 'SvgPath: string should start with `M` or `m`';\n      state.result = [];\n    } else {\n      state.result[0][0] = 'M';\n    }\n  }\n\n  return {\n    err: state.err,\n    segments: state.result\n  };\n};\n", "'use strict';\n\n// combine 2 matrixes\n// m1, m2 - [a, b, c, d, e, g]\n//\nfunction combine(m1, m2) {\n  return [\n    m1[0] * m2[0] + m1[2] * m2[1],\n    m1[1] * m2[0] + m1[3] * m2[1],\n    m1[0] * m2[2] + m1[2] * m2[3],\n    m1[1] * m2[2] + m1[3] * m2[3],\n    m1[0] * m2[4] + m1[2] * m2[5] + m1[4],\n    m1[1] * m2[4] + m1[3] * m2[5] + m1[5]\n  ];\n}\n\n\nfunction Matrix() {\n  if (!(this instanceof Matrix)) { return new Matrix(); }\n  this.queue = [];   // list of matrixes to apply\n  this.cache = null; // combined matrix cache\n}\n\n\nMatrix.prototype.matrix = function (m) {\n  if (m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1 && m[4] === 0 && m[5] === 0) {\n    return this;\n  }\n  this.cache = null;\n  this.queue.push(m);\n  return this;\n};\n\n\nMatrix.prototype.translate = function (tx, ty) {\n  if (tx !== 0 || ty !== 0) {\n    this.cache = null;\n    this.queue.push([ 1, 0, 0, 1, tx, ty ]);\n  }\n  return this;\n};\n\n\nMatrix.prototype.scale = function (sx, sy) {\n  if (sx !== 1 || sy !== 1) {\n    this.cache = null;\n    this.queue.push([ sx, 0, 0, sy, 0, 0 ]);\n  }\n  return this;\n};\n\n\nMatrix.prototype.rotate = function (angle, rx, ry) {\n  var rad, cos, sin;\n\n  if (angle !== 0) {\n    this.translate(rx, ry);\n\n    rad = angle * Math.PI / 180;\n    cos = Math.cos(rad);\n    sin = Math.sin(rad);\n\n    this.queue.push([ cos, sin, -sin, cos, 0, 0 ]);\n    this.cache = null;\n\n    this.translate(-rx, -ry);\n  }\n  return this;\n};\n\n\nMatrix.prototype.skewX = function (angle) {\n  if (angle !== 0) {\n    this.cache = null;\n    this.queue.push([ 1, 0, Math.tan(angle * Math.PI / 180), 1, 0, 0 ]);\n  }\n  return this;\n};\n\n\nMatrix.prototype.skewY = function (angle) {\n  if (angle !== 0) {\n    this.cache = null;\n    this.queue.push([ 1, Math.tan(angle * Math.PI / 180), 0, 1, 0, 0 ]);\n  }\n  return this;\n};\n\n\n// Flatten queue\n//\nMatrix.prototype.toArray = function () {\n  if (this.cache) {\n    return this.cache;\n  }\n\n  if (!this.queue.length) {\n    this.cache = [ 1, 0, 0, 1, 0, 0 ];\n    return this.cache;\n  }\n\n  this.cache = this.queue[0];\n\n  if (this.queue.length === 1) {\n    return this.cache;\n  }\n\n  for (var i = 1; i < this.queue.length; i++) {\n    this.cache = combine(this.cache, this.queue[i]);\n  }\n\n  return this.cache;\n};\n\n\n// Apply list of matrixes to (x,y) point.\n// If `isRelative` set, `translate` component of matrix will be skipped\n//\nMatrix.prototype.calc = function (x, y, isRelative) {\n  var m;\n\n  // Don't change point on empty transforms queue\n  if (!this.queue.length) { return [ x, y ]; }\n\n  // Calculate final matrix, if not exists\n  //\n  // NB. if you deside to apply transforms to point one-by-one,\n  // they should be taken in reverse order\n\n  if (!this.cache) {\n    this.cache = this.toArray();\n  }\n\n  m = this.cache;\n\n  // Apply matrix to point\n  return [\n    x * m[0] + y * m[2] + (isRelative ? 0 : m[4]),\n    x * m[1] + y * m[3] + (isRelative ? 0 : m[5])\n  ];\n};\n\n\nmodule.exports = Matrix;\n", "'use strict';\n\n\nvar Matrix = require('./matrix');\n\nvar operations = {\n  matrix: true,\n  scale: true,\n  rotate: true,\n  translate: true,\n  skewX: true,\n  skewY: true\n};\n\nvar CMD_SPLIT_RE    = /\\s*(matrix|translate|scale|rotate|skewX|skewY)\\s*\\(\\s*(.+?)\\s*\\)[\\s,]*/;\nvar PARAMS_SPLIT_RE = /[\\s,]+/;\n\n\nmodule.exports = function transformParse(transformString) {\n  var matrix = new Matrix();\n  var cmd, params;\n\n  // Split value into ['', 'translate', '10 50', '', 'scale', '2', '', 'rotate',  '-45', '']\n  transformString.split(CMD_SPLIT_RE).forEach(function (item) {\n\n    // Skip empty elements\n    if (!item.length) { return; }\n\n    // remember operation\n    if (typeof operations[item] !== 'undefined') {\n      cmd = item;\n      return;\n    }\n\n    // extract params & att operation to matrix\n    params = item.split(PARAMS_SPLIT_RE).map(function (i) {\n      return +i || 0;\n    });\n\n    // If params count is not correct - ignore command\n    switch (cmd) {\n      case 'matrix':\n        if (params.length === 6) {\n          matrix.matrix(params);\n        }\n        return;\n\n      case 'scale':\n        if (params.length === 1) {\n          matrix.scale(params[0], params[0]);\n        } else if (params.length === 2) {\n          matrix.scale(params[0], params[1]);\n        }\n        return;\n\n      case 'rotate':\n        if (params.length === 1) {\n          matrix.rotate(params[0], 0, 0);\n        } else if (params.length === 3) {\n          matrix.rotate(params[0], params[1], params[2]);\n        }\n        return;\n\n      case 'translate':\n        if (params.length === 1) {\n          matrix.translate(params[0], 0);\n        } else if (params.length === 2) {\n          matrix.translate(params[0], params[1]);\n        }\n        return;\n\n      case 'skewX':\n        if (params.length === 1) {\n          matrix.skewX(params[0]);\n        }\n        return;\n\n      case 'skewY':\n        if (params.length === 1) {\n          matrix.skewY(params[0]);\n        }\n        return;\n    }\n  });\n\n  return matrix;\n};\n", "// Convert an arc to a sequence of cubic b\u00E9zier curves\n//\n'use strict';\n\n\nvar TAU = Math.PI * 2;\n\n\n/* eslint-disable space-infix-ops */\n\n// Calculate an angle between two unit vectors\n//\n// Since we measure angle between radii of circular arcs,\n// we can use simplified math (without length normalization)\n//\nfunction unit_vector_angle(ux, uy, vx, vy) {\n  var sign = (ux * vy - uy * vx < 0) ? -1 : 1;\n  var dot  = ux * vx + uy * vy;\n\n  // Add this to work with arbitrary vectors:\n  // dot /= Math.sqrt(ux * ux + uy * uy) * Math.sqrt(vx * vx + vy * vy);\n\n  // rounding errors, e.g. -1.0000000000000002 can screw up this\n  if (dot >  1.0) { dot =  1.0; }\n  if (dot < -1.0) { dot = -1.0; }\n\n  return sign * Math.acos(dot);\n}\n\n\n// Convert from endpoint to center parameterization,\n// see http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n//\n// Return [cx, cy, theta1, delta_theta]\n//\nfunction get_arc_center(x1, y1, x2, y2, fa, fs, rx, ry, sin_phi, cos_phi) {\n  // Step 1.\n  //\n  // Moving an ellipse so origin will be the middlepoint between our two\n  // points. After that, rotate it to line up ellipse axes with coordinate\n  // axes.\n  //\n  var x1p =  cos_phi*(x1-x2)/2 + sin_phi*(y1-y2)/2;\n  var y1p = -sin_phi*(x1-x2)/2 + cos_phi*(y1-y2)/2;\n\n  var rx_sq  =  rx * rx;\n  var ry_sq  =  ry * ry;\n  var x1p_sq = x1p * x1p;\n  var y1p_sq = y1p * y1p;\n\n  // Step 2.\n  //\n  // Compute coordinates of the centre of this ellipse (cx', cy')\n  // in the new coordinate system.\n  //\n  var radicant = (rx_sq * ry_sq) - (rx_sq * y1p_sq) - (ry_sq * x1p_sq);\n\n  if (radicant < 0) {\n    // due to rounding errors it might be e.g. -1.3877787807814457e-17\n    radicant = 0;\n  }\n\n  radicant /=   (rx_sq * y1p_sq) + (ry_sq * x1p_sq);\n  radicant = Math.sqrt(radicant) * (fa === fs ? -1 : 1);\n\n  var cxp = radicant *  rx/ry * y1p;\n  var cyp = radicant * -ry/rx * x1p;\n\n  // Step 3.\n  //\n  // Transform back to get centre coordinates (cx, cy) in the original\n  // coordinate system.\n  //\n  var cx = cos_phi*cxp - sin_phi*cyp + (x1+x2)/2;\n  var cy = sin_phi*cxp + cos_phi*cyp + (y1+y2)/2;\n\n  // Step 4.\n  //\n  // Compute angles (theta1, delta_theta).\n  //\n  var v1x =  (x1p - cxp) / rx;\n  var v1y =  (y1p - cyp) / ry;\n  var v2x = (-x1p - cxp) / rx;\n  var v2y = (-y1p - cyp) / ry;\n\n  var theta1 = unit_vector_angle(1, 0, v1x, v1y);\n  var delta_theta = unit_vector_angle(v1x, v1y, v2x, v2y);\n\n  if (fs === 0 && delta_theta > 0) {\n    delta_theta -= TAU;\n  }\n  if (fs === 1 && delta_theta < 0) {\n    delta_theta += TAU;\n  }\n\n  return [ cx, cy, theta1, delta_theta ];\n}\n\n//\n// Approximate one unit arc segment with b\u00E9zier curves,\n// see http://math.stackexchange.com/questions/873224\n//\nfunction approximate_unit_arc(theta1, delta_theta) {\n  var alpha = 4/3 * Math.tan(delta_theta/4);\n\n  var x1 = Math.cos(theta1);\n  var y1 = Math.sin(theta1);\n  var x2 = Math.cos(theta1 + delta_theta);\n  var y2 = Math.sin(theta1 + delta_theta);\n\n  return [ x1, y1, x1 - y1*alpha, y1 + x1*alpha, x2 + y2*alpha, y2 - x2*alpha, x2, y2 ];\n}\n\nmodule.exports = function a2c(x1, y1, x2, y2, fa, fs, rx, ry, phi) {\n  var sin_phi = Math.sin(phi * TAU / 360);\n  var cos_phi = Math.cos(phi * TAU / 360);\n\n  // Make sure radii are valid\n  //\n  var x1p =  cos_phi*(x1-x2)/2 + sin_phi*(y1-y2)/2;\n  var y1p = -sin_phi*(x1-x2)/2 + cos_phi*(y1-y2)/2;\n\n  if (x1p === 0 && y1p === 0) {\n    // we're asked to draw line to itself\n    return [];\n  }\n\n  if (rx === 0 || ry === 0) {\n    // one of the radii is zero\n    return [];\n  }\n\n\n  // Compensate out-of-range radii\n  //\n  rx = Math.abs(rx);\n  ry = Math.abs(ry);\n\n  var lambda = (x1p * x1p) / (rx * rx) + (y1p * y1p) / (ry * ry);\n  if (lambda > 1) {\n    rx *= Math.sqrt(lambda);\n    ry *= Math.sqrt(lambda);\n  }\n\n\n  // Get center parameters (cx, cy, theta1, delta_theta)\n  //\n  var cc = get_arc_center(x1, y1, x2, y2, fa, fs, rx, ry, sin_phi, cos_phi);\n\n  var result = [];\n  var theta1 = cc[2];\n  var delta_theta = cc[3];\n\n  // Split an arc to multiple segments, so each segment\n  // will be less than \u03C4/4 (= 90\u00B0)\n  //\n  var segments = Math.max(Math.ceil(Math.abs(delta_theta) / (TAU / 4)), 1);\n  delta_theta /= segments;\n\n  for (var i = 0; i < segments; i++) {\n    result.push(approximate_unit_arc(theta1, delta_theta));\n    theta1 += delta_theta;\n  }\n\n  // We have a bezier approximation of a unit circle,\n  // now need to transform back to the original ellipse\n  //\n  return result.map(function (curve) {\n    for (var i = 0; i < curve.length; i += 2) {\n      var x = curve[i + 0];\n      var y = curve[i + 1];\n\n      // scale\n      x *= rx;\n      y *= ry;\n\n      // rotate\n      var xp = cos_phi*x - sin_phi*y;\n      var yp = sin_phi*x + cos_phi*y;\n\n      // translate\n      curve[i + 0] = xp + cc[0];\n      curve[i + 1] = yp + cc[1];\n    }\n\n    return curve;\n  });\n};\n", "'use strict';\n\n/* eslint-disable space-infix-ops */\n\n// The precision used to consider an ellipse as a circle\n//\nvar epsilon = 0.0000000001;\n\n// To convert degree in radians\n//\nvar torad = Math.PI / 180;\n\n// Class constructor :\n//  an ellipse centred at 0 with radii rx,ry and x - axis - angle ax.\n//\nfunction Ellipse(rx, ry, ax) {\n  if (!(this instanceof Ellipse)) { return new Ellipse(rx, ry, ax); }\n  this.rx = rx;\n  this.ry = ry;\n  this.ax = ax;\n}\n\n// Apply a linear transform m to the ellipse\n// m is an array representing a matrix :\n//    -         -\n//   | m[0] m[2] |\n//   | m[1] m[3] |\n//    -         -\n//\nEllipse.prototype.transform = function (m) {\n  // We consider the current ellipse as image of the unit circle\n  // by first scale(rx,ry) and then rotate(ax) ...\n  // So we apply ma =  m x rotate(ax) x scale(rx,ry) to the unit circle.\n  var c = Math.cos(this.ax * torad), s = Math.sin(this.ax * torad);\n  var ma = [\n    this.rx * (m[0]*c + m[2]*s),\n    this.rx * (m[1]*c + m[3]*s),\n    this.ry * (-m[0]*s + m[2]*c),\n    this.ry * (-m[1]*s + m[3]*c)\n  ];\n\n  // ma * transpose(ma) = [ J L ]\n  //                      [ L K ]\n  // L is calculated later (if the image is not a circle)\n  var J = ma[0]*ma[0] + ma[2]*ma[2],\n      K = ma[1]*ma[1] + ma[3]*ma[3];\n\n  // the discriminant of the characteristic polynomial of ma * transpose(ma)\n  var D = ((ma[0]-ma[3])*(ma[0]-ma[3]) + (ma[2]+ma[1])*(ma[2]+ma[1])) *\n          ((ma[0]+ma[3])*(ma[0]+ma[3]) + (ma[2]-ma[1])*(ma[2]-ma[1]));\n\n  // the \"mean eigenvalue\"\n  var JK = (J + K) / 2;\n\n  // check if the image is (almost) a circle\n  if (D < epsilon * JK) {\n    // if it is\n    this.rx = this.ry = Math.sqrt(JK);\n    this.ax = 0;\n    return this;\n  }\n\n  // if it is not a circle\n  var L = ma[0]*ma[1] + ma[2]*ma[3];\n\n  D = Math.sqrt(D);\n\n  // {l1,l2} = the two eigen values of ma * transpose(ma)\n  var l1 = JK + D/2,\n      l2 = JK - D/2;\n  // the x - axis - rotation angle is the argument of the l1 - eigenvector\n  /*eslint-disable indent*/\n  this.ax = (Math.abs(L) < epsilon && Math.abs(l1 - K) < epsilon) ?\n    90\n  :\n    Math.atan(Math.abs(L) > Math.abs(l1 - K) ?\n      (l1 - J) / L\n    :\n      L / (l1 - K)\n    ) * 180 / Math.PI;\n  /*eslint-enable indent*/\n\n  // if ax > 0 => rx = sqrt(l1), ry = sqrt(l2), else exchange axes and ax += 90\n  if (this.ax >= 0) {\n    // if ax in [0,90]\n    this.rx = Math.sqrt(l1);\n    this.ry = Math.sqrt(l2);\n  } else {\n    // if ax in ]-90,0[ => exchange axes\n    this.ax += 90;\n    this.rx = Math.sqrt(l2);\n    this.ry = Math.sqrt(l1);\n  }\n\n  return this;\n};\n\n// Check if the ellipse is (almost) degenerate, i.e. rx = 0 or ry = 0\n//\nEllipse.prototype.isDegenerate = function () {\n  return (this.rx < epsilon * this.ry || this.ry < epsilon * this.rx);\n};\n\nmodule.exports = Ellipse;\n", "// SVG Path transformations library\n//\n// Usage:\n//\n//    SvgPath('...')\n//      .translate(-150, -100)\n//      .scale(0.5)\n//      .translate(-150, -100)\n//      .toFixed(1)\n//      .toString()\n//\n\n'use strict';\n\n\nvar pathParse      = require('./path_parse');\nvar transformParse = require('./transform_parse');\nvar matrix         = require('./matrix');\nvar a2c            = require('./a2c');\nvar ellipse        = require('./ellipse');\n\n\n// Class constructor\n//\nfunction SvgPath(path) {\n  if (!(this instanceof SvgPath)) { return new SvgPath(path); }\n\n  var pstate = pathParse(path);\n\n  // Array of path segments.\n  // Each segment is array [command, param1, param2, ...]\n  this.segments = pstate.segments;\n\n  // Error message on parse error.\n  this.err      = pstate.err;\n\n  // Transforms stack for lazy evaluation\n  this.__stack    = [];\n}\n\nSvgPath.from = function (src) {\n  if (typeof src === 'string') return new SvgPath(src);\n\n  if (src instanceof SvgPath) {\n    // Create empty object\n    var s = new SvgPath('');\n\n    // Clone properies\n    s.err = src.err;\n    s.segments = src.segments.map(function (sgm) { return sgm.slice(); });\n    s.__stack = src.__stack.map(function (m) {\n      return matrix().matrix(m.toArray());\n    });\n\n    return s;\n  }\n\n  throw new Error('SvgPath.from: invalid param type ' + src);\n};\n\n\nSvgPath.prototype.__matrix = function (m) {\n  var self = this, i;\n\n  // Quick leave for empty matrix\n  if (!m.queue.length) { return; }\n\n  this.iterate(function (s, index, x, y) {\n    var p, result, name, isRelative;\n\n    switch (s[0]) {\n\n      // Process 'assymetric' commands separately\n      case 'v':\n        p      = m.calc(0, s[1], true);\n        result = (p[0] === 0) ? [ 'v', p[1] ] : [ 'l', p[0], p[1] ];\n        break;\n\n      case 'V':\n        p      = m.calc(x, s[1], false);\n        result = (p[0] === m.calc(x, y, false)[0]) ? [ 'V', p[1] ] : [ 'L', p[0], p[1] ];\n        break;\n\n      case 'h':\n        p      = m.calc(s[1], 0, true);\n        result = (p[1] === 0) ? [ 'h', p[0] ] : [ 'l', p[0], p[1] ];\n        break;\n\n      case 'H':\n        p      = m.calc(s[1], y, false);\n        result = (p[1] === m.calc(x, y, false)[1]) ? [ 'H', p[0] ] : [ 'L', p[0], p[1] ];\n        break;\n\n      case 'a':\n      case 'A':\n        // ARC is: ['A', rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]\n\n        // Drop segment if arc is empty (end point === start point)\n        /*if ((s[0] === 'A' && s[6] === x && s[7] === y) ||\n            (s[0] === 'a' && s[6] === 0 && s[7] === 0)) {\n          return [];\n        }*/\n\n        // Transform rx, ry and the x-axis-rotation\n        var ma = m.toArray();\n        var e = ellipse(s[1], s[2], s[3]).transform(ma);\n\n        // flip sweep-flag if matrix is not orientation-preserving\n        if (ma[0] * ma[3] - ma[1] * ma[2] < 0) {\n          s[5] = s[5] ? '0' : '1';\n        }\n\n        // Transform end point as usual (without translation for relative notation)\n        p = m.calc(s[6], s[7], s[0] === 'a');\n\n        // Empty arcs can be ignored by renderer, but should not be dropped\n        // to avoid collisions with `S A S` and so on. Replace with empty line.\n        if ((s[0] === 'A' && s[6] === x && s[7] === y) ||\n            (s[0] === 'a' && s[6] === 0 && s[7] === 0)) {\n          result = [ s[0] === 'a' ? 'l' : 'L', p[0], p[1] ];\n          break;\n        }\n\n        // if the resulting ellipse is (almost) a segment ...\n        if (e.isDegenerate()) {\n          // replace the arc by a line\n          result = [ s[0] === 'a' ? 'l' : 'L', p[0], p[1] ];\n        } else {\n          // if it is a real ellipse\n          // s[0], s[4] and s[5] are not modified\n          result = [ s[0], e.rx, e.ry, e.ax, s[4], s[5], p[0], p[1] ];\n        }\n\n        break;\n\n      case 'm':\n        // Edge case. The very first `m` should be processed as absolute, if happens.\n        // Make sense for coord shift transforms.\n        isRelative = index > 0;\n\n        p = m.calc(s[1], s[2], isRelative);\n        result = [ 'm', p[0], p[1] ];\n        break;\n\n      default:\n        name       = s[0];\n        result     = [ name ];\n        isRelative = (name.toLowerCase() === name);\n\n        // Apply transformations to the segment\n        for (i = 1; i < s.length; i += 2) {\n          p = m.calc(s[i], s[i + 1], isRelative);\n          result.push(p[0], p[1]);\n        }\n    }\n\n    self.segments[index] = result;\n  }, true);\n};\n\n\n// Apply stacked commands\n//\nSvgPath.prototype.__evaluateStack = function () {\n  var m, i;\n\n  if (!this.__stack.length) { return; }\n\n  if (this.__stack.length === 1) {\n    this.__matrix(this.__stack[0]);\n    this.__stack = [];\n    return;\n  }\n\n  m = matrix();\n  i = this.__stack.length;\n\n  while (--i >= 0) {\n    m.matrix(this.__stack[i].toArray());\n  }\n\n  this.__matrix(m);\n  this.__stack = [];\n};\n\n\n// Convert processed SVG Path back to string\n//\nSvgPath.prototype.toString = function () {\n  var result = '', prevCmd = '', cmdSkipped = false;\n\n  this.__evaluateStack();\n\n  for (var i = 0, len = this.segments.length; i < len; i++) {\n    var segment = this.segments[i];\n    var cmd = segment[0];\n\n    // Command not repeating => store\n    if (cmd !== prevCmd || cmd === 'm' || cmd === 'M') {\n      // workaround for FontForge SVG importing bug, keep space between \"z m\".\n      if (cmd === 'm' && prevCmd === 'z') result += ' ';\n      result += cmd;\n\n      cmdSkipped = false;\n    } else {\n      cmdSkipped = true;\n    }\n\n    // Store segment params\n    for (var pos = 1; pos < segment.length; pos++) {\n      var val = segment[pos];\n      // Space can be skipped\n      // 1. After command (always)\n      // 2. For negative value (with '-' at start)\n      if (pos === 1) {\n        if (cmdSkipped && val >= 0) result += ' ';\n      } else if (val >= 0) result += ' ';\n\n      result += val;\n    }\n\n    prevCmd = cmd;\n  }\n\n  return result;\n};\n\n\n// Translate path to (x [, y])\n//\nSvgPath.prototype.translate = function (x, y) {\n  this.__stack.push(matrix().translate(x, y || 0));\n  return this;\n};\n\n\n// Scale path to (sx [, sy])\n// sy = sx if not defined\n//\nSvgPath.prototype.scale = function (sx, sy) {\n  this.__stack.push(matrix().scale(sx, (!sy && (sy !== 0)) ? sx : sy));\n  return this;\n};\n\n\n// Rotate path around point (sx [, sy])\n// sy = sx if not defined\n//\nSvgPath.prototype.rotate = function (angle, rx, ry) {\n  this.__stack.push(matrix().rotate(angle, rx || 0, ry || 0));\n  return this;\n};\n\n\n// Skew path along the X axis by `degrees` angle\n//\nSvgPath.prototype.skewX = function (degrees) {\n  this.__stack.push(matrix().skewX(degrees));\n  return this;\n};\n\n\n// Skew path along the Y axis by `degrees` angle\n//\nSvgPath.prototype.skewY = function (degrees) {\n  this.__stack.push(matrix().skewY(degrees));\n  return this;\n};\n\n\n// Apply matrix transform (array of 6 elements)\n//\nSvgPath.prototype.matrix = function (m) {\n  this.__stack.push(matrix().matrix(m));\n  return this;\n};\n\n\n// Transform path according to \"transform\" attr of SVG spec\n//\nSvgPath.prototype.transform = function (transformString) {\n  if (!transformString.trim()) {\n    return this;\n  }\n  this.__stack.push(transformParse(transformString));\n  return this;\n};\n\n\n// Round coords with given decimal precition.\n// 0 by default (to integers)\n//\nSvgPath.prototype.round = function (d) {\n  var contourStartDeltaX = 0, contourStartDeltaY = 0, deltaX = 0, deltaY = 0, l;\n\n  d = d || 0;\n\n  this.__evaluateStack();\n\n  this.segments.forEach(function (s) {\n    var isRelative = (s[0].toLowerCase() === s[0]);\n\n    switch (s[0]) {\n      case 'H':\n      case 'h':\n        if (isRelative) { s[1] += deltaX; }\n        deltaX = s[1] - s[1].toFixed(d);\n        s[1] = +s[1].toFixed(d);\n        return;\n\n      case 'V':\n      case 'v':\n        if (isRelative) { s[1] += deltaY; }\n        deltaY = s[1] - s[1].toFixed(d);\n        s[1] = +s[1].toFixed(d);\n        return;\n\n      case 'Z':\n      case 'z':\n        deltaX = contourStartDeltaX;\n        deltaY = contourStartDeltaY;\n        return;\n\n      case 'M':\n      case 'm':\n        if (isRelative) {\n          s[1] += deltaX;\n          s[2] += deltaY;\n        }\n\n        deltaX = s[1] - s[1].toFixed(d);\n        deltaY = s[2] - s[2].toFixed(d);\n\n        contourStartDeltaX = deltaX;\n        contourStartDeltaY = deltaY;\n\n        s[1] = +s[1].toFixed(d);\n        s[2] = +s[2].toFixed(d);\n        return;\n\n      case 'A':\n      case 'a':\n        // [cmd, rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]\n        if (isRelative) {\n          s[6] += deltaX;\n          s[7] += deltaY;\n        }\n\n        deltaX = s[6] - s[6].toFixed(d);\n        deltaY = s[7] - s[7].toFixed(d);\n\n        s[1] = +s[1].toFixed(d);\n        s[2] = +s[2].toFixed(d);\n        s[3] = +s[3].toFixed(d + 2); // better precision for rotation\n        s[6] = +s[6].toFixed(d);\n        s[7] = +s[7].toFixed(d);\n        return;\n\n      default:\n        // a c l q s t\n        l = s.length;\n\n        if (isRelative) {\n          s[l - 2] += deltaX;\n          s[l - 1] += deltaY;\n        }\n\n        deltaX = s[l - 2] - s[l - 2].toFixed(d);\n        deltaY = s[l - 1] - s[l - 1].toFixed(d);\n\n        s.forEach(function (val, i) {\n          if (!i) { return; }\n          s[i] = +s[i].toFixed(d);\n        });\n        return;\n    }\n  });\n\n  return this;\n};\n\n\n// Apply iterator function to all segments. If function returns result,\n// current segment will be replaced to array of returned segments.\n// If empty array is returned, current regment will be deleted.\n//\nSvgPath.prototype.iterate = function (iterator, keepLazyStack) {\n  var segments = this.segments,\n      replacements = {},\n      needReplace = false,\n      lastX = 0,\n      lastY = 0,\n      countourStartX = 0,\n      countourStartY = 0;\n  var i, j, newSegments;\n\n  if (!keepLazyStack) {\n    this.__evaluateStack();\n  }\n\n  segments.forEach(function (s, index) {\n\n    var res = iterator(s, index, lastX, lastY);\n\n    if (Array.isArray(res)) {\n      replacements[index] = res;\n      needReplace = true;\n    }\n\n    var isRelative = (s[0] === s[0].toLowerCase());\n\n    // calculate absolute X and Y\n    switch (s[0]) {\n      case 'm':\n      case 'M':\n        lastX = s[1] + (isRelative ? lastX : 0);\n        lastY = s[2] + (isRelative ? lastY : 0);\n        countourStartX = lastX;\n        countourStartY = lastY;\n        return;\n\n      case 'h':\n      case 'H':\n        lastX = s[1] + (isRelative ? lastX : 0);\n        return;\n\n      case 'v':\n      case 'V':\n        lastY = s[1] + (isRelative ? lastY : 0);\n        return;\n\n      case 'z':\n      case 'Z':\n        // That make sence for multiple contours\n        lastX = countourStartX;\n        lastY = countourStartY;\n        return;\n\n      default:\n        lastX = s[s.length - 2] + (isRelative ? lastX : 0);\n        lastY = s[s.length - 1] + (isRelative ? lastY : 0);\n    }\n  });\n\n  // Replace segments if iterator return results\n\n  if (!needReplace) { return this; }\n\n  newSegments = [];\n\n  for (i = 0; i < segments.length; i++) {\n    if (typeof replacements[i] !== 'undefined') {\n      for (j = 0; j < replacements[i].length; j++) {\n        newSegments.push(replacements[i][j]);\n      }\n    } else {\n      newSegments.push(segments[i]);\n    }\n  }\n\n  this.segments = newSegments;\n\n  return this;\n};\n\n\n// Converts segments from relative to absolute\n//\nSvgPath.prototype.abs = function () {\n\n  this.iterate(function (s, index, x, y) {\n    var name = s[0],\n        nameUC = name.toUpperCase(),\n        i;\n\n    // Skip absolute commands\n    if (name === nameUC) { return; }\n\n    s[0] = nameUC;\n\n    switch (name) {\n      case 'v':\n        // v has shifted coords parity\n        s[1] += y;\n        return;\n\n      case 'a':\n        // ARC is: ['A', rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]\n        // touch x, y only\n        s[6] += x;\n        s[7] += y;\n        return;\n\n      default:\n        for (i = 1; i < s.length; i++) {\n          s[i] += i % 2 ? x : y; // odd values are X, even - Y\n        }\n    }\n  }, true);\n\n  return this;\n};\n\n\n// Converts segments from absolute to relative\n//\nSvgPath.prototype.rel = function () {\n\n  this.iterate(function (s, index, x, y) {\n    var name = s[0],\n        nameLC = name.toLowerCase(),\n        i;\n\n    // Skip relative commands\n    if (name === nameLC) { return; }\n\n    // Don't touch the first M to avoid potential confusions.\n    if (index === 0 && name === 'M') { return; }\n\n    s[0] = nameLC;\n\n    switch (name) {\n      case 'V':\n        // V has shifted coords parity\n        s[1] -= y;\n        return;\n\n      case 'A':\n        // ARC is: ['A', rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]\n        // touch x, y only\n        s[6] -= x;\n        s[7] -= y;\n        return;\n\n      default:\n        for (i = 1; i < s.length; i++) {\n          s[i] -= i % 2 ? x : y; // odd values are X, even - Y\n        }\n    }\n  }, true);\n\n  return this;\n};\n\n\n// Converts arcs to cubic b\u00E9zier curves\n//\nSvgPath.prototype.unarc = function () {\n  this.iterate(function (s, index, x, y) {\n    var new_segments, nextX, nextY, result = [], name = s[0];\n\n    // Skip anything except arcs\n    if (name !== 'A' && name !== 'a') { return null; }\n\n    if (name === 'a') {\n      // convert relative arc coordinates to absolute\n      nextX = x + s[6];\n      nextY = y + s[7];\n    } else {\n      nextX = s[6];\n      nextY = s[7];\n    }\n\n    new_segments = a2c(x, y, nextX, nextY, s[4], s[5], s[1], s[2], s[3]);\n\n    // Degenerated arcs can be ignored by renderer, but should not be dropped\n    // to avoid collisions with `S A S` and so on. Replace with empty line.\n    if (new_segments.length === 0) {\n      return [ [ s[0] === 'a' ? 'l' : 'L', s[6], s[7] ] ];\n    }\n\n    new_segments.forEach(function (s) {\n      result.push([ 'C', s[2], s[3], s[4], s[5], s[6], s[7] ]);\n    });\n\n    return result;\n  });\n\n  return this;\n};\n\n\n// Converts smooth curves (with missed control point) to generic curves\n//\nSvgPath.prototype.unshort = function () {\n  var segments = this.segments;\n  var prevControlX, prevControlY, prevSegment;\n  var curControlX, curControlY;\n\n  // TODO: add lazy evaluation flag when relative commands supported\n\n  this.iterate(function (s, idx, x, y) {\n    var name = s[0], nameUC = name.toUpperCase(), isRelative;\n\n    // First command MUST be M|m, it's safe to skip.\n    // Protect from access to [-1] for sure.\n    if (!idx) { return; }\n\n    if (nameUC === 'T') { // quadratic curve\n      isRelative = (name === 't');\n\n      prevSegment = segments[idx - 1];\n\n      if (prevSegment[0] === 'Q') {\n        prevControlX = prevSegment[1] - x;\n        prevControlY = prevSegment[2] - y;\n      } else if (prevSegment[0] === 'q') {\n        prevControlX = prevSegment[1] - prevSegment[3];\n        prevControlY = prevSegment[2] - prevSegment[4];\n      } else {\n        prevControlX = 0;\n        prevControlY = 0;\n      }\n\n      curControlX = -prevControlX;\n      curControlY = -prevControlY;\n\n      if (!isRelative) {\n        curControlX += x;\n        curControlY += y;\n      }\n\n      segments[idx] = [\n        isRelative ? 'q' : 'Q',\n        curControlX, curControlY,\n        s[1], s[2]\n      ];\n\n    } else if (nameUC === 'S') { // cubic curve\n      isRelative = (name === 's');\n\n      prevSegment = segments[idx - 1];\n\n      if (prevSegment[0] === 'C') {\n        prevControlX = prevSegment[3] - x;\n        prevControlY = prevSegment[4] - y;\n      } else if (prevSegment[0] === 'c') {\n        prevControlX = prevSegment[3] - prevSegment[5];\n        prevControlY = prevSegment[4] - prevSegment[6];\n      } else {\n        prevControlX = 0;\n        prevControlY = 0;\n      }\n\n      curControlX = -prevControlX;\n      curControlY = -prevControlY;\n\n      if (!isRelative) {\n        curControlX += x;\n        curControlY += y;\n      }\n\n      segments[idx] = [\n        isRelative ? 'c' : 'C',\n        curControlX, curControlY,\n        s[1], s[2], s[3], s[4]\n      ];\n    }\n  });\n\n  return this;\n};\n\n\nmodule.exports = SvgPath;\n", "'use strict';\n\nmodule.exports = require('./lib/svgpath');\n", "\"use strict\";\nexports.__esModule = true;\nvar svgPath = require(\"svgpath\");\n// Precision for consider cubic polynom as quadratic one\nvar CBEZIER_MINMAX_EPSILON = 0.00000001;\n// https://github.com/kpym/SVGPathy/blob/acd1a50c626b36d81969f6e98e8602e128ba4302/lib/box.js#L89\nfunction minmaxQ(A) {\n    var min = Math.min(A[0], A[2]), max = Math.max(A[0], A[2]);\n    if (A[1] > A[0] ? A[2] >= A[1] : A[2] <= A[1]) {\n        // if no extremum in ]0,1[\n        return [min, max];\n    }\n    // check if the extremum E is min or max\n    var E = (A[0] * A[2] - A[1] * A[1]) / (A[0] - 2 * A[1] + A[2]);\n    return E < min ? [E, max] : [min, E];\n}\n// https://github.com/kpym/SVGPathy/blob/acd1a50c626b36d81969f6e98e8602e128ba4302/lib/box.js#L127\nfunction minmaxC(A) {\n    var K = A[0] - 3 * A[1] + 3 * A[2] - A[3];\n    // if the polynomial is (almost) quadratic and not cubic\n    if (Math.abs(K) < CBEZIER_MINMAX_EPSILON) {\n        if (A[0] === A[3] && A[0] === A[1]) {\n            // no curve, point targeting same location\n            return [A[0], A[3]];\n        }\n        return minmaxQ([\n            A[0],\n            -0.5 * A[0] + 1.5 * A[1],\n            A[0] - 3 * A[1] + 3 * A[2],\n        ]);\n    }\n    // the reduced discriminant of the derivative\n    var T = -A[0] * A[2] +\n        A[0] * A[3] -\n        A[1] * A[2] -\n        A[1] * A[3] +\n        A[1] * A[1] +\n        A[2] * A[2];\n    // if the polynomial is monotone in [0,1]\n    if (T <= 0) {\n        return [Math.min(A[0], A[3]), Math.max(A[0], A[3])];\n    }\n    var S = Math.sqrt(T);\n    // potential extrema\n    var min = Math.min(A[0], A[3]), max = Math.max(A[0], A[3]);\n    var L = A[0] - 2 * A[1] + A[2];\n    // check local extrema\n    for (var R = (L + S) / K, i = 1; i <= 2; R = (L - S) / K, i++) {\n        if (R > 0 && R < 1) {\n            // if the extrema is for R in [0,1]\n            var Q = A[0] * (1 - R) * (1 - R) * (1 - R) +\n                A[1] * 3 * (1 - R) * (1 - R) * R +\n                A[2] * 3 * (1 - R) * R * R +\n                A[3] * R * R * R;\n            if (Q < min) {\n                min = Q;\n            }\n            if (Q > max) {\n                max = Q;\n            }\n        }\n    }\n    return [min, max];\n}\n/**\n * Compute bounding boxes of SVG paths.\n * @param {String} d SVG path for which their bounding box will be computed.\n * @returns {BBox}\n */\nfunction svgPathBbox(d) {\n    var min = [Infinity, Infinity], max = [-Infinity, -Infinity];\n    svgPath(d)\n        .abs()\n        .unarc()\n        .unshort()\n        .iterate(function (seg, _, x, y) {\n        switch (seg[0]) {\n            case \"M\":\n            case \"L\": {\n                if (min[0] > seg[1]) {\n                    min[0] = seg[1];\n                }\n                if (min[1] > seg[2]) {\n                    min[1] = seg[2];\n                }\n                if (max[0] < seg[1]) {\n                    max[0] = seg[1];\n                }\n                if (max[1] < seg[2]) {\n                    max[1] = seg[2];\n                }\n                break;\n            }\n            case \"V\": {\n                if (min[1] > seg[1]) {\n                    min[1] = seg[1];\n                }\n                if (max[1] < seg[1]) {\n                    max[1] = seg[1];\n                }\n                break;\n            }\n            case \"H\": {\n                if (min[0] > seg[1]) {\n                    min[0] = seg[1];\n                }\n                if (max[0] < seg[1]) {\n                    max[0] = seg[1];\n                }\n                break;\n            }\n            case \"C\": {\n                var cxMinMax = minmaxC([x, seg[1], seg[3], seg[5]]);\n                if (min[0] > cxMinMax[0]) {\n                    min[0] = cxMinMax[0];\n                }\n                if (max[0] < cxMinMax[1]) {\n                    max[0] = cxMinMax[1];\n                }\n                var cyMinMax = minmaxC([y, seg[2], seg[4], seg[6]]);\n                if (min[1] > cyMinMax[0]) {\n                    min[1] = cyMinMax[0];\n                }\n                if (max[1] < cyMinMax[1]) {\n                    max[1] = cyMinMax[1];\n                }\n                break;\n            }\n            case \"Q\": {\n                var qxMinMax = minmaxQ([x, seg[1], seg[3]]);\n                if (min[0] > qxMinMax[0]) {\n                    min[0] = qxMinMax[0];\n                }\n                if (max[0] < qxMinMax[1]) {\n                    max[0] = qxMinMax[1];\n                }\n                var qyMinMax = minmaxQ([y, seg[2], seg[4]]);\n                if (min[1] > qyMinMax[0]) {\n                    min[1] = qyMinMax[0];\n                }\n                if (max[1] < qyMinMax[1]) {\n                    max[1] = qyMinMax[1];\n                }\n                break;\n            }\n        }\n    }, true);\n    return [min[0], min[1], max[0], max[1]];\n}\nexports[\"default\"] = svgPathBbox;\n", "module.exports = require(\"./index.js\").default;", "import { IPlugin, IPluginGetters, IPluginSetters, IPluginUpdateData } from '../../core/plugins/interfaces';\nimport svgPathBbox from 'svg-path-bbox';\n\n/**\n * SVG Path Plugin.\n * SVG should consist of one SVG path!!!\n * Important: the plugin script should be included BEFORE the core script.\n */\n\n/**\n * Required: init ToolCool Range Slider plugins namespace if not defined yet\n */\nwindow.tcRangeSliderPlugins = window.tcRangeSliderPlugins || [];\n\n/*\nTODO:\ndocs - current color for fill and not only!\n */\nconst SVGPathPlugin = () : IPlugin => {\n\n  let $component: HTMLElement | null = null;\n  let getters: IPluginGetters | null = null;\n  let requestUpdate: () => void;\n\n  let $initialFill: HTMLElement | null = null;\n  let $svg: SVGSVGElement | null = null;\n  let $svgCopy: SVGSVGElement | null = null;\n  let $fill: HTMLElement | null = null;\n  let $path: SVGPathElement | null = null;\n  let $svgPanel: HTMLElement | null = null;\n\n  let resizeObserver: ResizeObserver | null = null;\n\n  const initResizeObserver = () => {\n    if(!$component) return;\n    resizeObserver = new ResizeObserver(entries => {\n      // eslint-disable-next-line\n      for (const _entry of entries) {\n        $svgPanel?.remove();\n        initSVGPanel();\n        window.setTimeout(() => {\n          requestUpdate();\n        });\n      }\n    });\n    resizeObserver.observe($component);\n  };\n\n  const updateFill = () => {\n    if(!$initialFill || !$fill || !$svgCopy) return;\n\n    if(getters?.getType() === 'vertical'){\n      $fill.style.height = $initialFill.style.height;\n      $fill.style.top = $initialFill.style.top;\n      $fill.style.bottom = $initialFill.style.bottom;\n\n      if(getters?.isBottomToTop()){\n        if(getters?.getPercents().length > 1){\n          $svgCopy.style.transform = `translateY(-${ $initialFill.style.top })`;\n        }\n        else{\n          const height = Number($initialFill.style.height.replace('%', ''));\n          $svgCopy.style.transform = `translateY(-${ 100 - height }%)`;\n        }\n      }\n      else{\n        $svgCopy.style.transform = `translateY(-${ $initialFill.style.top })`;\n      }\n    }\n    else{\n      $fill.style.width = $initialFill.style.width;\n      $fill.style.right = $initialFill.style.right;\n      $fill.style.left = $initialFill.style.left;\n\n      if(getters?.isRightToLeft()){\n        if(getters?.getPercents().length > 1){\n          $svgCopy.style.transform = `translateX(-${ $initialFill.style.left })`;\n        }\n        else{\n          const width = Number($initialFill.style.width.replace('%', ''));\n          $svgCopy.style.transform = `translateX(-${ 100 - width }%)`;\n        }\n      }\n      else{\n        $svgCopy.style.transform = `translateX(-${ $initialFill.style.left })`;\n      }\n    }\n  };\n\n  const initSVGPanel = () => {\n    if(!$svg) return;\n\n    const $panel = $component?.shadowRoot?.querySelector('.panel') as HTMLElement;\n    if(!$panel) return;\n\n    $panel.style.display = 'none';\n\n    $svgPanel = document.createElement('div');\n    $svgPanel.classList.add('svg-panel');\n    $svgPanel.append($svg);\n\n    $fill = document.createElement('div');\n    $fill.classList.add('svg-fill');\n\n    $svgCopy = $svg.cloneNode(true) as SVGSVGElement;\n    $fill.append($svgCopy);\n\n    updateFill();\n\n    $svgPanel.append($fill);\n    $panel.before($svgPanel);\n\n    const rect = $svg.getBoundingClientRect();\n    $svgCopy.style.width = `${ rect.width }px`;\n    $svgCopy.style.height = `${ rect.height }px`;\n  };\n\n  const getSvgAbsoluteDistance = (percent: number, svgLength: number) => {\n    return percent * svgLength / 100;\n  };\n\n  const initPointerPositions = () => {\n    if(!$svgPanel || !$svg || !$path) return;\n\n    const $pointers = getters?.getPointerElements() ?? [];\n    const percents = getters?.getPercents() ?? [];\n    const svgLength = $path.getTotalLength();\n\n    const svgRectAfterResize = $svgPanel.getBoundingClientRect();\n    const box = svgPathBbox($path.getAttribute('d') || '');\n\n    const aspectX = svgRectAfterResize.width / box[2];\n    const aspectY = svgRectAfterResize.height / box[3];\n\n    for(let i=0; i<percents.length; i++){\n      const $pointer = $pointers[i];\n      if(!$pointer) continue;\n      \n      // const pointerRect = $pointer.getBoundingClientRect();\n\n      const percent = percents[i];\n\n      const distance = getSvgAbsoluteDistance(percent, svgLength);\n      const svgPoint = $path.getPointAtLength(distance);\n      let x = svgPoint.x;\n      let y = svgPoint.y;\n\n      if(getters?.getType() === 'vertical'){\n        //\n        //y -= pointerRect.height / 2;\n        if(getters?.isBottomToTop()){\n          $pointer.style.bottom = `${ y * aspectY }px`;\n          $pointer.style.top = `auto`;\n        }\n        else{\n          $pointer.style.top = `${ y * aspectY }px`;\n          $pointer.style.bottom = `auto`;\n        }\n\n        $pointer.style.left = `${ x * aspectX }px`;\n        $pointer.style.right = `auto`;\n      }\n      else{\n        //x -= pointerRect.width / 2;\n        //y -= pointerRect.height;\n        if(getters?.isRightToLeft()){\n          $pointer.style.right = `${ x * aspectX }px`;\n          $pointer.style.left = `auto`;\n        }\n        else{\n          $pointer.style.left = `${ x * aspectX }px`;\n          $pointer.style.right = `auto`;\n        }\n        $pointer.style.top = `${ y * aspectY }px`;\n        $pointer.style.bottom = `auto`;\n      }\n    }\n  };\n\n  const update = (_data: IPluginUpdateData) => {\n    initPointerPositions();\n    updateFill();\n  };\n\n  const destroy = () => {\n    $svgPanel?.remove();\n    resizeObserver?.disconnect();\n  };\n\n  return {\n    /**\n     * Required: unique plugin name\n     */\n    get name() {\n      return 'SVG Path';\n    },\n\n    /**\n     * Optional: plugin initialization\n     */\n    init: (\n      _$component,\n      _requestUpdate,\n      _setters: IPluginSetters,\n      _getters: IPluginGetters\n    ) => {\n      $component = _$component;\n      getters = _getters;\n      requestUpdate = _requestUpdate;\n\n      $svg = _$component.querySelector('svg');\n      if(!$svg) return;\n\n      $path = $svg.querySelector('path');\n      if(!$path) return;\n\n      $initialFill = $component?.shadowRoot?.querySelector('.panel-fill') as HTMLElement;\n      if(!$initialFill) return;\n\n      initSVGPanel();\n      initResizeObserver();\n      window.setTimeout(() => {\n        _requestUpdate();\n      });\n    },\n\n    /**\n     * Optional:\n     * this will be called each time\n     * range slider updates pointer positions\n     */\n    update,\n\n    /**\n     * Optional:\n     * this will be called when\n     * the web component will be removed from the DOM.\n     */\n    destroy,\n\n    css: `\n.svg-panel{\n  position: absolute;\n  z-index: 10;\n  width: 100%;\n  color: var(--panel-bg, #2d4373);\n  overflow: hidden;\n  transition: none !important;\n} \n\n.svg-panel svg{\n  width: 100%;\n  height: 100%;\n  display: flex;\n}   \n\n.panel-fill{\n  display: none;\n}\n\n.svg-fill{\n   position: absolute;\n   top: 0;\n   left: 0;\n   width: 100%;\n   height: 100%;\n   overflow: hidden;\n}\n\n.svg-fill svg{\n  color: var(--panel-bg-fill,#000);\n}\n\n.pointer{\n /*transform: none !important;*/\n transition: none !important;\n}\n\n    `,\n  };\n};\n\n/**\n * Required: add current plugin to the plugins list.\n */\nwindow.tcRangeSliderPlugins.push(SVGPathPlugin);\n\nexport default SVGPathPlugin;"],
  "mappings": "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",
  "names": ["require_path_parse", "__commonJSMin", "exports", "module", "paramCounts", "SPECIAL_SPACES", "isSpace", "ch", "isCommand", "code", "isArc", "isDigit", "isDigitStart", "State", "path", "skipSpaces", "state", "scanFlag", "scanParam", "start", "index", "max", "zeroFirst", "hasCeiling", "hasDecimal", "hasDot", "finalizeSegment", "cmd", "cmdLC", "params", "scanSegment", "cmdCode", "is_arc", "comma_found", "need_params", "svgPath", "require_matrix", "__commonJSMin", "exports", "module", "combine", "m1", "m2", "Matrix", "m", "tx", "ty", "sx", "sy", "angle", "rx", "ry", "rad", "cos", "sin", "i", "x", "y", "isRelative", "require_transform_parse", "__commonJSMin", "exports", "module", "Matrix", "operations", "CMD_SPLIT_RE", "PARAMS_SPLIT_RE", "transformString", "matrix", "cmd", "params", "item", "require_a2c", "__commonJSMin", "exports", "module", "TAU", "unit_vector_angle", "ux", "uy", "vx", "vy", "sign", "dot", "get_arc_center", "x1", "y1", "x2", "y2", "fa", "fs", "rx", "ry", "sin_phi", "cos_phi", "x1p", "y1p", "rx_sq", "ry_sq", "x1p_sq", "y1p_sq", "radicant", "cxp", "cyp", "cx", "cy", "v1x", "v1y", "v2x", "v2y", "theta1", "delta_theta", "approximate_unit_arc", "alpha", "phi", "lambda", "cc", "result", "segments", "i", "curve", "x", "y", "xp", "yp", "require_ellipse", "__commonJSMin", "exports", "module", "epsilon", "torad", "Ellipse", "rx", "ry", "ax", "m", "c", "s", "ma", "J", "K", "D", "JK", "L", "l1", "l2", "require_svgpath", "__commonJSMin", "exports", "module", "pathParse", "transformParse", "matrix", "a2c", "ellipse", "SvgPath", "path", "pstate", "src", "s", "sgm", "m", "self", "i", "index", "x", "y", "p", "result", "name", "isRelative", "ma", "e", "prevCmd", "cmdSkipped", "len", "segment", "cmd", "pos", "val", "sx", "sy", "angle", "rx", "ry", "degrees", "transformString", "d", "contourStartDeltaX", "contourStartDeltaY", "deltaX", "deltaY", "l", "iterator", "keepLazyStack", "segments", "replacements", "needReplace", "lastX", "lastY", "countourStartX", "countourStartY", "j", "newSegments", "res", "nameUC", "nameLC", "new_segments", "nextX", "nextY", "prevControlX", "prevControlY", "prevSegment", "curControlX", "curControlY", "idx", "require_svgpath", "__commonJSMin", "exports", "module", "require_dist", "__commonJSMin", "exports", "svgPath", "CBEZIER_MINMAX_EPSILON", "minmaxQ", "A", "min", "max", "E", "minmaxC", "K", "T", "S", "L", "R", "i", "Q", "svgPathBbox", "d", "seg", "_", "x", "y", "cxMinMax", "cyMinMax", "qxMinMax", "qyMinMax", "require_wrapper", "__commonJSMin", "exports", "module", "import_svg_path_bbox", "SVGPathPlugin", "$component", "getters", "requestUpdate", "$initialFill", "$svg", "$svgCopy", "$fill", "$path", "$svgPanel", "resizeObserver", "initResizeObserver", "entries", "_entry", "initSVGPanel", "updateFill", "height", "width", "_a", "$panel", "rect", "getSvgAbsoluteDistance", "percent", "svgLength", "initPointerPositions", "_b", "$pointers", "percents", "svgRectAfterResize", "box", "svgPathBbox", "aspectX", "aspectY", "i", "$pointer", "distance", "svgPoint", "x", "y", "_$component", "_requestUpdate", "_setters", "_getters", "_data", "svg_path_plugin_default"]
}
