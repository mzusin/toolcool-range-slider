{
  "version": 3,
  "sources": ["../../src/core/domain/math-provider.ts", "../../src/plugins/generated-labels-plugin/index.ts"],
  "sourcesContent": ["/**\n * scale a range [min,max] to [a,b]\n * f(x) = (b - a) * (x - min) / (max - min) + a\n */\nexport const convertRange = (min: number, max: number, a: number, b: number, x: number) => {\n  const temp = (max - min);\n  if(temp === 0) return a;\n  return ((b - a) * (x - min)) / temp + a;\n};\n\n// eslint-disable-next-line\nexport const isNumber = (input: any) => {\n  return !isNaN(parseFloat(input)) && isFinite(input);\n};\n\n// the below function should receive any\n// eslint-disable-next-line\nexport const getNumber = (input: any, defaultValue: any) : number => {\n  return isNumber(input) ? Number(input) : defaultValue;\n};\n\n/**\n * Round up to the next multiple of X,\n * where X is the step provided by the user.\n */\nexport const roundToStep = (num: number, step: number) => {\n  return step === 0 ? 0 : Math.round(num / step) * step;\n};\n\n/**\n * round to decimal places\n * https://stackoverflow.com/questions/11832914/how-to-round-to-at-most-2-decimal-places-if-necessary\n */\nexport const setDecimalPlaces = (num: number, decimalPlaces = Infinity) => {\n  if (decimalPlaces === Infinity) return num;\n\n  const coeff = 10 ** decimalPlaces;\n  return Math.round(num * coeff) / coeff;\n};\n\nexport const getBoolean = (val: string | null | undefined | boolean) => {\n  if(val === null || val === undefined) return false;\n  if(typeof val === 'boolean') return val;\n  return val.trim().toLowerCase() === 'true';\n};\n", "import { IPlugin, IPluginGetters, IPluginSetters, IPluginUpdateData } from '../../core/plugins/interfaces';\nimport { getBoolean } from '../../core/domain/math-provider';\nimport RangeSlider from '../../core';\n\n/**\n * Generated Labels Plugin.\n * Important: the plugin script should be included BEFORE the core script.\n */\n\n/**\n * Required: init ToolCool Range Slider plugins namespace if not defined yet\n */\nwindow.tcRangeSliderPlugins = window.tcRangeSliderPlugins || [];\n\nconst MIN_LABEL_CODE_NAME = 'min-label';\nconst MAX_LABEL_CODE_NAME = 'max-label';\nconst DEFAULT_TEXT_COLOR = '#1E293B';\n\ntype generateLabelsFormatType = ((value: string | number | undefined) => string) | undefined;\n\nconst GeneratedLabelsPlugin = () : IPlugin => {\n\n  let $component: HTMLElement | null = null;\n  let $slider :HTMLElement | null = null;\n  let getters: IPluginGetters | null = null;\n  let requestUpdate: () => void | null;\n\n  let enabled = false;\n  let textColor = DEFAULT_TEXT_COLOR;\n  let units = '';\n  let generateLabelsFormat : generateLabelsFormatType = undefined;\n\n  let $labelsRow: HTMLElement | null = null;\n  let $min: HTMLElement | null = null;\n  let $max: HTMLElement | null = null;\n  let $labels: (HTMLElement | undefined)[] = [];\n\n  const createLabelsRow = () => {\n    const $box = $component?.shadowRoot?.querySelector('.range-slider-box')  as HTMLElement;\n    $labelsRow = document.createElement('div');\n    $labelsRow.classList.add('labels-row');\n    $box.prepend($labelsRow);\n  };\n\n  const createLabel = (className: string) => {\n    const $label = document.createElement('label');\n    $label.className = className;\n    $label.setAttribute('for', 'range-slider');\n    return $label;\n  };\n\n  const createLabels = () => {\n\n    $min = createLabel(MIN_LABEL_CODE_NAME);\n    $min.textContent = getLabelText(getters?.getTextMin(), units);\n\n    $max = createLabel(MAX_LABEL_CODE_NAME);\n    $max.textContent = getLabelText(getters?.getTextMax(), units);\n\n    $slider?.before($min);\n    $slider?.after($max);\n\n    const values = getters?.getValues();\n    if(!values) return;\n\n    for(let i=0; i<values.length; i++){\n\n      const $label = createLabel(`value${ i + 1 }-label generated-label`);\n      $label.textContent = getLabelText(values[i], units);\n      $labels.push($label);\n\n      $labelsRow?.append($label);\n    }\n  };\n\n  const destroy = () => {\n    for(const $label of $labels){\n      if(!$label) continue;\n      $label.remove();\n    }\n\n    $min?.remove();\n    $max?.remove();\n    $labelsRow?.remove();\n\n    $labels = [];\n  };\n\n  const toggleEnabled = (_enabled: boolean) => {\n    enabled = _enabled;\n\n    if(!enabled){\n      destroy();\n    }\n    else{\n      createLabelsRow();\n      createLabels();\n    }\n  };\n\n  const setTextColor = (newValue: string) => {\n\n    textColor = newValue;\n    for(const $label of $labels){\n      if(!$label) continue;\n      $label.style.color = textColor ?? DEFAULT_TEXT_COLOR;\n    }\n\n    if($min){\n      $min.style.color = textColor ?? DEFAULT_TEXT_COLOR;\n    }\n\n    if($max){\n      $max.style.color = textColor ?? DEFAULT_TEXT_COLOR;\n    }\n  };\n\n  const setUnits = (newValue: string) => {\n    units = newValue;\n    if(requestUpdate) requestUpdate();\n  };\n\n  const updateClasses = () => {\n    if(!getters || !$labelsRow) return;\n    $labelsRow.classList.toggle('is-reversed', getters.isRightToLeft() || getters.isBottomToTop());\n  };\n\n  const getLabelText = (value: string | number | undefined, units: string) => {\n    const val = `${ (value ?? '').toString() }${ units }`;\n    return (!!generateLabelsFormat && (typeof generateLabelsFormat === 'function')) ? generateLabelsFormat(value) : val;\n  };\n\n  const update = (data: IPluginUpdateData) => {\n\n    if(!enabled || !data.values) return;\n\n    updateClasses();\n\n    for(let i=0; i<data.values.length; i++){\n      const value = data.values[i];\n      const $label = $labels[i];\n\n      if(value === undefined && !!$label){\n        // remove the label\n        $label.remove();\n        $labels[i] = undefined;\n        continue;\n      }\n\n      if(value !== undefined && !$label){\n\n        // create the label\n        const $label = createLabel(`value${ i + 1 }-label generated-label`);\n        $label.textContent = getLabelText(value, units);\n        $labels[i] = $label;\n\n        // add the label to the proper place\n        if(data.values.length <= 0){\n          $labelsRow?.append($label);\n        }\n        else{\n          if(i === 0){\n            $labelsRow?.append($label);\n          }\n          else{\n            // get the previous label\n            const $prev = $labels[i - 1];\n            $prev?.after($label);\n          }\n        }\n        continue;\n      }\n\n      if(!$label) continue;\n      $label.textContent = getLabelText(value, units);\n    }\n\n    if($min){\n      $min.textContent = getLabelText(data.textMin, units);\n    }\n\n    if($max){\n      $max.textContent = getLabelText(data.textMax, units);\n    }\n\n    setTextColor(textColor);\n  };\n\n  return {\n\n    /**\n     * Required: unique plugin name\n     */\n    get name() {\n      return 'Generated Labels';\n    },\n\n    /**\n     * Optional: plugin initialization\n     */\n    init: (\n      _$component,\n      _requestUpdate,\n      _setters: IPluginSetters,\n      _getters: IPluginGetters\n    ) => {\n      $component = _$component;\n      getters = _getters;\n      $slider = _$component.shadowRoot?.getElementById('range-slider') as HTMLElement;\n      requestUpdate = _requestUpdate;\n\n      textColor = $component.getAttribute('generate-labels-text-color') ?? DEFAULT_TEXT_COLOR;\n      units = $component.getAttribute('generate-labels-units') ?? '';\n      toggleEnabled(getBoolean($component.getAttribute('generate-labels')));\n\n      updateClasses();\n      setTextColor(textColor);\n\n      //console.log($slider.generateLabelsFormat)\n    },\n\n    /**\n     * Optional:\n     * this will be called each time\n     * range slider updates pointer positions or other properties\n     */\n    update,\n\n    /**\n     * Optional:\n     * this will be called each time observed HTML attribute changes;\n     * observed attributes are defined in window.tcRangeSliderObservedAttr array above.\n     */\n    onAttrChange: (_attrName: string, _newValue: string) => {\n      if(_attrName === 'generate-labels'){\n        toggleEnabled(getBoolean(_newValue));\n      }\n\n      if(_attrName === 'generate-labels-text-color'){\n        setTextColor(_newValue);\n      }\n\n      if(_attrName === 'generate-labels-units'){\n        setUnits(_newValue);\n      }\n    },\n\n    /**\n     * Optional:\n     * List of getters and setter that can be used to create slider API.\n     */\n    gettersAndSetters: [\n      {\n        name: 'generateLabels',\n        attributes: {\n          get () {\n            return enabled ?? false;\n          },\n\n          set: (_enabled) => {\n            toggleEnabled(getBoolean(_enabled));\n          },\n        }\n      },\n      {\n        name: 'textColor',\n        attributes: {\n          get () {\n            return textColor ?? '';\n          },\n\n          set: (newValue) => {\n            setTextColor(newValue);\n          },\n        }\n      },\n      {\n        name: 'generateLabelsTextColor',\n        attributes: {\n          get () {\n            return textColor ?? '';\n          },\n\n          set: (newValue) => {\n            setTextColor(newValue);\n          },\n        }\n      },\n      {\n        name: 'units',\n        attributes: {\n          get () {\n            return units ?? '';\n          },\n\n          set: (newValue) => {\n            setUnits(newValue);\n          },\n        }\n      },\n      {\n        name: 'generateLabelsUnits',\n        attributes: {\n          get () {\n            return units ?? '';\n          },\n\n          set: (newValue) => {\n            setUnits(newValue);\n          },\n        }\n      },\n      {\n        name: 'generateLabelsFormat',\n        attributes: {\n          get () {\n            return generateLabelsFormat;\n          },\n\n          set: (newFunc) => {\n            generateLabelsFormat = newFunc;\n            if(requestUpdate) requestUpdate();\n          },\n        }\n      },\n    ],\n\n    /**\n     * Optional:\n     * Small groups of CSS rules can be passed here as a string.\n     * Bigger CSS files should be passed via css-links=\"file1.css;file2.css;\" property.\n     */\n    css: `\n    .labels-row{\n      text-align: center;\n      display: flex;\n      justify-content: center;\n    }\n    \n    .is-reversed,\n    .is-reversed + .row{\n      flex-direction: row-reverse;\n    }\n    \n    .type-vertical{\n      position: relative;\n    }\n    \n    .type-vertical .labels-row{\n      flex-direction: column;\n      position: absolute;\n      top: 50%;\n      right: -100%;\n      transform: translateY(-50%);\n    }\n    \n    .type-vertical .is-reversed,\n    .type-vertical .is-reversed + .row{\n      flex-direction: column-reverse;\n    }\n    \n    .max-label,\n    .min-label{\n      margin: 0 1rem;\n      width: 2rem;\n      text-align: center;\n      white-space: nowrap;\n    }\n    \n    .generated-label{\n      text-align: center;\n      margin: 0 0.5rem;\n      white-space: nowrap;\n    }\n    `,\n\n    destroy,\n  };\n};\n\n/**\n * Required: add current plugin to the plugins list.\n */\nwindow.tcRangeSliderPlugins.push(GeneratedLabelsPlugin);\n\nexport default GeneratedLabelsPlugin;\n\n/**\n * export dynamic properties\n */\nexport interface IGeneratedLabelsPlugin extends RangeSlider{\n  generateLabels: boolean;\n\n  /** @deprecated */\n  textColor: string;\n\n  generateLabelsTextColor: string;\n\n  /** @deprecated */\n  units: string;\n\n  generateLabelsUnits: string;\n\n  generateLabelsFormat: (value: string | number | undefined) => string;\n}"],
  "mappings": "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",
  "names": ["getBoolean", "val", "MIN_LABEL_CODE_NAME", "MAX_LABEL_CODE_NAME", "DEFAULT_TEXT_COLOR", "GeneratedLabelsPlugin", "$component", "$slider", "getters", "requestUpdate", "enabled", "textColor", "units", "generateLabelsFormat", "$labelsRow", "$min", "$max", "$labels", "createLabelsRow", "_a", "$box", "createLabel", "className", "$label", "createLabels", "getLabelText", "values", "i", "destroy", "toggleEnabled", "_enabled", "setTextColor", "newValue", "setUnits", "updateClasses", "value", "val", "_$component", "_requestUpdate", "_setters", "_getters", "_b", "_c", "getBoolean", "data", "$prev", "_attrName", "_newValue", "newFunc", "generated_labels_plugin_default"]
}
