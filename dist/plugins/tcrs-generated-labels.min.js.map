{
  "version": 3,
  "sources": ["../../src/core/domain/math-provider.ts", "../../src/plugins/generated-labels-plugin/index.ts"],
  "sourcesContent": ["/**\n * scale a range [min,max] to [a,b]\n * f(x) = (b - a) * (x - min) / (max - min) + a\n */\nexport const convertRange = (min: number, max: number, a: number, b: number, x: number) => {\n  const temp = (max - min);\n  if(temp === 0) return a;\n  return ((b - a) * (x - min)) / temp + a;\n};\n\n// eslint-disable-next-line\nexport const isNumber = (input: any) => {\n  return !isNaN(parseFloat(input)) && isFinite(input);\n};\n\n// the below function should receive any\n// eslint-disable-next-line\nexport const getNumber = (input: any, defaultValue: any) : number => {\n  return isNumber(input) ? Number(input) : defaultValue;\n};\n\n/**\n * Round up to the next multiple of X,\n * where X is the step provided by the user.\n */\nexport const roundToStep = (num: number, step: number) => {\n  return step === 0 ? 0 : Math.round(num / step) * step;\n};\n\n/**\n * round to decimal places\n * https://stackoverflow.com/questions/11832914/how-to-round-to-at-most-2-decimal-places-if-necessary\n */\nexport const setDecimalPlaces = (num: number, decimalPlaces = Infinity) => {\n  if (decimalPlaces === Infinity) return num;\n\n  const coeff = 10 ** decimalPlaces;\n  return Math.round(num * coeff) / coeff;\n};\n\nexport const getBoolean = (val: string | null | undefined | boolean) => {\n  if(val === null || val === undefined) return false;\n  if(typeof val === 'boolean') return val;\n  return val.trim().toLowerCase() === 'true';\n};\n", "import { IPlugin, IPluginGetters, IPluginSetters, IPluginUpdateData } from '../../core/plugins/interfaces';\nimport { getBoolean } from '../../core/domain/math-provider';\nimport RangeSlider from '../../core';\n\n/**\n * Generated Labels Plugin.\n * Important: the plugin script should be included BEFORE the core script.\n */\n\n/**\n * Required: init ToolCool Range Slider plugins namespace if not defined yet\n */\nwindow.tcRangeSliderPlugins = window.tcRangeSliderPlugins || [];\n\nconst MIN_LABEL_CODE_NAME = 'min-label';\nconst MAX_LABEL_CODE_NAME = 'max-label';\n\nconst GeneratedLabelsPlugin = () : IPlugin => {\n\n  let $component: HTMLElement | null = null;\n  let $slider :HTMLElement | null = null;\n  let getters: IPluginGetters | null = null;\n\n  let enabled = false;\n\n  let $labelsRow: HTMLElement | null = null;\n  let $min: HTMLElement | null = null;\n  let $max: HTMLElement | null = null;\n  let $labels: (HTMLElement | undefined)[] = [];\n\n  const createLabelsRow = () => {\n    const $box = $component?.shadowRoot?.querySelector('.range-slider-box')  as HTMLElement;\n    $labelsRow = document.createElement('div');\n    $labelsRow.classList.add('labels-row');\n    $box.prepend($labelsRow);\n  };\n\n  const createLabel = (className: string) => {\n    const $label = document.createElement('label');\n    $label.className = className;\n    $label.setAttribute('for', 'range-slider');\n    return $label;\n  };\n\n  const createLabels = () => {\n    const isReversedOrder = getters?.isRightToLeft() || getters?.isBottomToTop();\n\n    $min = createLabel(MIN_LABEL_CODE_NAME);\n    $min.textContent = getters?.getTextMin().toString() ?? '';\n\n    $max = createLabel(MAX_LABEL_CODE_NAME);\n    $max.textContent = getters?.getTextMax().toString() ?? '';\n\n    if(!isReversedOrder){\n      $slider?.before($min);\n      $slider?.after($max);\n    }\n    else{\n      $slider?.after($min);\n      $slider?.before($max);\n    }\n\n    const values = getters?.getValues();\n    if(!values) return;\n\n    for(let i=0; i<values.length; i++){\n\n      const $label = createLabel(`value${ i + 1 }-label generated-label`);\n      $label.textContent = (values[i] ?? '').toString();\n      $labels.push($label);\n\n      if(!isReversedOrder){\n        $labelsRow?.append($label);\n      }\n      else{\n        $labelsRow?.prepend($label);\n      }\n    }\n  };\n\n  const destroy = () => {\n    for(const $label of $labels){\n      if(!$label) continue;\n      $label.remove();\n    }\n\n    $min?.remove();\n    $max?.remove();\n\n    $labels = [];\n  };\n\n  const toggleEnabled = (_enabled: boolean) => {\n    enabled = _enabled;\n\n    if(!enabled){\n      destroy();\n    }\n    else{\n      createLabelsRow();\n      createLabels();\n    }\n  };\n\n  const update = (data: IPluginUpdateData) => {\n    if(!enabled || !data.values) return;\n\n    for(let i=0; i<data.values.length; i++){\n      const value = data.values[i];\n      const $label = $labels[i];\n\n      if(value === undefined && !!$label){\n        // remove the label\n        $label.remove();\n        $labels[i] = undefined;\n        continue;\n      }\n\n      if(value !== undefined && !$label){\n        // create the label\n        const $label = createLabel(`value${ i + 1 }-label generated-label`);\n        $label.textContent = (value ?? '').toString();\n        $labels[i] = $label;\n\n        // add the label to the proper place\n        if(data.values.length <= 0){\n          $labelsRow?.append($label);\n        }\n        else{\n          const isReversedOrder = getters?.isRightToLeft() || getters?.isBottomToTop();\n\n          if(i === 0){\n            if(!isReversedOrder){\n              $labelsRow?.prepend($label);\n            }\n            else{\n              $labelsRow?.append($label);\n            }\n          }\n          else{\n            // get the previous label\n            const $prev = $label[i - 1];\n            if(!isReversedOrder){\n              $prev.after($label);\n            }\n            else{\n              $prev.before($label);\n            }\n          }\n        }\n        continue;\n      }\n\n      if(!$label) continue;\n      $label.textContent = (value ?? '').toString();\n    }\n\n    if($min){\n      $min.textContent = (data.textMin ?? '').toString();\n    }\n\n    if($max){\n      $max.textContent = (data.textMax ?? '').toString();\n    }\n  };\n\n  return {\n\n    /**\n     * Required: unique plugin name\n     */\n    get name() {\n      return 'Generated Labels';\n    },\n\n    /**\n     * Optional: plugin initialization\n     */\n    init: (\n      _$component,\n      _requestUpdate,\n      _setters: IPluginSetters,\n      _getters: IPluginGetters\n    ) => {\n      $component = _$component;\n      getters = _getters;\n      $slider = _$component.shadowRoot?.getElementById('range-slider') as HTMLElement;\n\n      toggleEnabled(getBoolean($component.getAttribute('generate-labels')));\n    },\n\n    /**\n     * Optional:\n     * this will be called each time\n     * range slider updates pointer positions\n     */\n    update,\n\n    /**\n     * Optional:\n     * this will be called each time observed HTML attribute changes;\n     * observed attributes are defined in window.tcRangeSliderObservedAttr array above.\n     */\n    onAttrChange: (_attrName: string, _newValue: string) => {\n      if(_attrName === 'generate-labels'){\n        toggleEnabled(getBoolean(_newValue));\n      }\n    },\n\n    /**\n     * Optional:\n     * List of getters and setter that can be used to create slider API.\n     */\n    gettersAndSetters: [\n      {\n        name: 'generateLabels',\n        attributes: {\n          get () {\n            return enabled ?? false;\n          },\n\n          set: (_enabled) => {\n            toggleEnabled(getBoolean(_enabled));\n          },\n        }\n      },\n    ],\n\n    /**\n     * Optional:\n     * Small groups of CSS rules can be passed here as a string.\n     * Bigger CSS files should be passed via css-links=\"file1.css;file2.css;\" property.\n     */\n    css: `\n    .labels-row{\n      text-align: center;\n      display: flex;\n      justify-content: center;\n    }\n    \n    .type-vertical{\n      position: relative;\n    }\n    \n    .type-vertical .labels-row{\n      flex-direction: column;\n      position: absolute;\n      top: 50%;\n      right: -100%;\n      transform: translateY(-50%);\n    }\n    \n    .max-label,\n    .min-label{\n      margin: 0 1rem;\n      width: 2rem;\n      text-align: center;\n      white-space: nowrap;\n    }\n    \n    .generated-label{\n      text-align: center;\n      margin: 0 0.5rem;\n      white-space: nowrap;\n    }\n    `,\n\n    destroy,\n  };\n};\n\n/**\n * Required: add current plugin to the plugins list.\n */\nwindow.tcRangeSliderPlugins.push(GeneratedLabelsPlugin);\n\nexport default GeneratedLabelsPlugin;\n\n/**\n * export dynamic properties\n */\nexport interface IGeneratedLabelsPlugin extends RangeSlider{\n  generateLabels: boolean;\n}"],
  "mappings": "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",
  "names": ["getBoolean", "val", "MIN_LABEL_CODE_NAME", "MAX_LABEL_CODE_NAME", "GeneratedLabelsPlugin", "$component", "$slider", "getters", "enabled", "$labelsRow", "$min", "$max", "$labels", "createLabelsRow", "_a", "$box", "createLabel", "className", "$label", "createLabels", "_b", "_c", "isReversedOrder", "values", "i", "destroy", "toggleEnabled", "_enabled", "_$component", "_requestUpdate", "_setters", "_getters", "getBoolean", "data", "value", "$prev", "_attrName", "_newValue", "generated_labels_plugin_default"]
}
