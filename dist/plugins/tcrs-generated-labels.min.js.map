{
  "version": 3,
  "sources": ["../../src/core/domain/math-provider.ts", "../../src/plugins/generated-labels-plugin/index.ts"],
  "sourcesContent": ["/**\n * scale a range [min,max] to [a,b]\n * f(x) = (b - a) * (x - min) / (max - min) + a\n */\nexport const convertRange = (min: number, max: number, a: number, b: number, x: number) => {\n  const temp = (max - min);\n  if(temp === 0) return a;\n  return ((b - a) * (x - min)) / temp + a;\n};\n\n// eslint-disable-next-line\nexport const isNumber = (input: any) => {\n  return !isNaN(parseFloat(input)) && isFinite(input);\n};\n\n// the below function should receive any\n// eslint-disable-next-line\nexport const getNumber = (input: any, defaultValue: any) : number => {\n  return isNumber(input) ? Number(input) : defaultValue;\n};\n\n/**\n * Round up to the next multiple of X,\n * where X is the step provided by the user.\n */\nexport const roundToStep = (num: number, step: number) => {\n  return step === 0 ? 0 : Math.round(num / step) * step;\n};\n\n/**\n * round to decimal places\n * https://stackoverflow.com/questions/11832914/how-to-round-to-at-most-2-decimal-places-if-necessary\n */\nexport const setDecimalPlaces = (num: number, decimalPlaces = Infinity) => {\n  if (decimalPlaces === Infinity) return num;\n\n  const coeff = 10 ** decimalPlaces;\n  return Math.round(num * coeff) / coeff;\n};\n\nexport const getBoolean = (val: string | null | undefined | boolean) => {\n  if(val === null || val === undefined) return false;\n  if(typeof val === 'boolean') return val;\n  return val.trim().toLowerCase() === 'true';\n};\n", "import { IPlugin, IPluginGetters, IPluginSetters, IPluginUpdateData } from '../../core/plugins/interfaces';\nimport { getBoolean } from '../../core/domain/math-provider';\n\n/**\n * Generated Labels Plugin.\n * Important: the plugin script should be included BEFORE the core script.\n */\n\n/**\n * Required: init ToolCool Range Slider plugins namespace if not defined yet\n */\nwindow.tcRangeSliderPlugins = window.tcRangeSliderPlugins || [];\n\nconst VALUE_LABEL1_CODE_NAME = 'value-label';\nconst VALUE_LABEL2_CODE_NAME = 'value2-label';\nconst MIN_LABEL_CODE_NAME = 'min-label';\nconst MAX_LABEL_CODE_NAME = 'max-label';\n\nconst GeneratedLabelsPlugin = () : IPlugin => {\n\n  let getters: IPluginGetters | null = null;\n  let $component: HTMLElement | null = null;\n  let $slider: HTMLElement | null = null;\n  let $labelsRow: HTMLElement | null = null;\n  let generatedLabelsEnabled = false;\n\n  let $genValue1Label: HTMLElement | null = null;\n  let $genValue2Label: HTMLElement | null = null;\n  let $genMinLabel: HTMLElement | null = null;\n  let $genMaxLabel: HTMLElement | null = null;\n\n  // ---------- HELPERS ------------------------------\n\n  const createLabel = (codeName: string) => {\n    const $label = document.createElement('label');\n    $label.classList.add(codeName);\n    $label.setAttribute('for', 'range-slider');\n    return $label;\n  };\n\n  const getOuterSlot = (codeName: string) => {\n    return $component?.querySelector(`[slot=\"${ codeName }\"]`);\n  };\n\n  const getInnerSlot = (codeName: string) => {\n    return $component?.shadowRoot?.querySelector(`slot[name=\"${ codeName }\"]`);\n  };\n\n  const getLabelFromSlot = (codeName: string) => {\n    const $slot = getOuterSlot(codeName);\n\n    if(!$slot) return null;\n    return $slot.querySelector(`.${ codeName }`) as HTMLElement;\n  };\n\n  const setLabelsOrder = (rtlOrBtt: boolean) => {\n\n    const label1hasSlot = getOuterSlot(VALUE_LABEL1_CODE_NAME) !== null;\n    const label2hasSlot = getOuterSlot(VALUE_LABEL2_CODE_NAME) !== null;\n    const minHasSlot = getOuterSlot(MIN_LABEL_CODE_NAME) !== null;\n    const maxHasSlot = getOuterSlot(MAX_LABEL_CODE_NAME) !== null;\n\n    const $label1Slot = getInnerSlot(VALUE_LABEL1_CODE_NAME);\n    const $label2Slot = getInnerSlot(VALUE_LABEL2_CODE_NAME);\n    const $minSlot = getInnerSlot(MIN_LABEL_CODE_NAME);\n    const $maxSlot = getInnerSlot(MAX_LABEL_CODE_NAME);\n\n    if(rtlOrBtt){\n\n      if($genValue1Label && $genValue2Label && !label1hasSlot && !label2hasSlot){\n        $genValue2Label.after($genValue1Label);\n      }\n      else{\n        if($label1Slot && $label2Slot){\n          $label2Slot.after($label1Slot);\n        }\n      }\n\n      if($genMinLabel){\n        if(minHasSlot && $minSlot){\n          $slider?.after($minSlot);\n        }\n        else{\n          $slider?.after($genMinLabel);\n        }\n      }\n\n      if($genMaxLabel){\n        if(maxHasSlot && $maxSlot){\n          $slider?.before($maxSlot);\n        }\n        else{\n          $slider?.before($genMaxLabel);\n        }\n      }\n    }\n    else{\n\n      if($genMinLabel){\n        if(minHasSlot && $minSlot){\n          $slider?.before($minSlot);\n        }\n        else{\n          $slider?.before($genMinLabel);\n        }\n      }\n\n      if($genMaxLabel){\n        if(maxHasSlot && $maxSlot){\n          $slider?.after($maxSlot);\n        }\n        else{\n          $slider?.after($genMaxLabel);\n        }\n      }\n\n      if($genValue1Label && $genValue2Label && !label1hasSlot && !label2hasSlot){\n        $genValue1Label.after($genValue2Label);\n      }\n      else{\n        if($label1Slot && $label2Slot){\n          $label1Slot.after($label2Slot);\n        }\n      }\n    }\n  };\n\n  const createLabels = (\n    textValue1: string | number | undefined,\n    textValue2: string | number | undefined,\n    rtlOrBtt: boolean,\n    min: number | string | undefined,\n    max: number | string | undefined\n  ) => {\n\n    if(!$genValue1Label){\n      // create first generated label ---------------------\n      $genValue1Label = getLabelFromSlot(VALUE_LABEL1_CODE_NAME);\n      if(!$genValue1Label){\n        $genValue1Label = createLabel(VALUE_LABEL1_CODE_NAME);\n        $labelsRow?.append($genValue1Label);\n      }\n    }\n\n    if(!$genValue2Label){\n      // create second generated label --------------------\n      if(textValue2 !== undefined){\n        $genValue2Label = getLabelFromSlot(VALUE_LABEL2_CODE_NAME);\n        if(!$genValue2Label){\n          $genValue2Label = createLabel(VALUE_LABEL2_CODE_NAME);\n          $labelsRow?.append($genValue2Label);\n        }\n      }\n    }\n\n    if(!$genMinLabel){\n      $genMinLabel = getLabelFromSlot(MIN_LABEL_CODE_NAME);\n      if(!$genMinLabel){\n        $genMinLabel = createLabel(MIN_LABEL_CODE_NAME);\n        $slider?.after($genMinLabel);\n      }\n    }\n\n    if(!$genMaxLabel){\n      $genMaxLabel = getLabelFromSlot(MAX_LABEL_CODE_NAME);\n      if(!$genMaxLabel){\n        $genMaxLabel = createLabel(MAX_LABEL_CODE_NAME);\n        $slider?.after($genMaxLabel);\n      }\n    }\n\n    setLabelsOrder(rtlOrBtt);\n    updateValues(textValue1, textValue2, min, max);\n  };\n\n  const removeGeneratedLabels = () => {\n    if($genValue1Label){\n      $genValue1Label.remove();\n      $genValue1Label = null;\n    }\n\n    if($genValue2Label){\n      $genValue2Label.remove();\n      $genValue2Label = null;\n    }\n\n    if($genMaxLabel){\n      $genMaxLabel.remove();\n      $genMaxLabel = null;\n    }\n\n    if($genMinLabel){\n      $genMinLabel.remove();\n      $genMinLabel = null;\n    }\n  };\n\n  const createOrRemove = () => {\n    if(!getters) return;\n\n    const values = getters.getValues();\n    const textValue1 = values[0];\n    const textValue2 = values[1];\n\n    if(generatedLabelsEnabled){\n      createLabels(textValue1, textValue2, getters.isRightToLeft() || getters.isBottomToTop(), getters.getTextMin(), getters.getTextMax());\n    }\n    else{\n      removeGeneratedLabels();\n    }\n  };\n\n  const setGenLabelsEnabled = (enabled: boolean) => {\n    if(enabled === generatedLabelsEnabled) return;\n\n    generatedLabelsEnabled = enabled;\n    createOrRemove();\n  };\n\n  const updateValues = (\n    textValue1: string | number | undefined,\n    textValue2: string | number | undefined,\n    min: number | string | undefined,\n    max: number | string | undefined) => {\n\n    if($genValue1Label && textValue1 !== undefined){\n      $genValue1Label.textContent = textValue1.toString();\n    }\n\n    if($genValue2Label && textValue2 !== undefined){\n      $genValue2Label.textContent = textValue2.toString();\n    }\n\n    if($genMinLabel){\n      $genMinLabel.textContent = min === undefined ? '' : min.toString();\n    }\n\n    if($genMaxLabel){\n      $genMaxLabel.textContent = max === undefined ? '' : max.toString();\n    }\n  };\n\n  return {\n\n    /**\n     * Required: unique plugin name\n     */\n    get name() {\n      return 'Generated Labels';\n    },\n\n    /**\n     * Optional: plugin initialization\n     */\n    init: (\n      _$component,\n      _requestUpdate,\n      _setters: IPluginSetters,\n      _getters: IPluginGetters\n    ) => {\n      getters = _getters;\n      $component = _$component;\n      $slider = _$component.shadowRoot?.getElementById('range-slider') as HTMLElement;\n\n      // generate labels row with slots\n      const $box = _$component.shadowRoot?.querySelector('.range-slider-box')  as HTMLElement;\n      $labelsRow = document.createElement('div');\n      $labelsRow.classList.add('labels-row');\n      $labelsRow.innerHTML = `\n        <slot name=\"value-label\"></slot>\n        <slot name=\"value2-label\"></slot>\n      `;\n      $box.prepend($labelsRow);\n\n      // generate min / max slots\n      const $min = document.createElement('slot');\n      $min.setAttribute('name', 'min-label');\n      $slider.before($min);\n\n      const $max = document.createElement('slot');\n      $max.setAttribute('name', 'max-label');\n      $slider.after($max);\n\n      setGenLabelsEnabled(getBoolean($component.getAttribute('generate-labels')));\n\n      createOrRemove();\n    },\n\n    /**\n     * Optional:\n     * this will be called each time\n     * range slider updates pointer positions\n     */\n    update: (data: IPluginUpdateData) => {\n      updateValues(data.values[0], data.values[1], data.textMin, data.textMax);\n    },\n\n    /**\n     * Optional:\n     * this will be called each time observed HTML attribute changes;\n     * observed attributes are defined in window.tcRangeSliderObservedAttr array above.\n     */\n    onAttrChange: (_attrName: string, _newValue: string) => {\n      if(_attrName === 'generate-labels'){\n        setGenLabelsEnabled(getBoolean(_newValue));\n      }\n    },\n\n    /**\n     * Optional:\n     * List of getters and setter that can be used to create slider API.\n     */\n    gettersAndSetters: [\n      {\n        name: 'generateLabels',\n        attributes: {\n          get () {\n            return generatedLabelsEnabled ?? false;\n          },\n\n          set: (_enabled) => {\n            setGenLabelsEnabled(getBoolean(_enabled));\n          },\n        }\n      },\n    ],\n\n    /**\n     * Optional:\n     * Small groups of CSS rules can be passed here as a string.\n     * Bigger CSS files should be passed via css-links=\"file1.css;file2.css;\" property.\n     */\n    css: `\n      .labels-row{\n          text-align: center;\n          display: flex;\n          justify-content: center;\n      }\n      \n      .type-vertical .labels-row{\n          flex-direction: column;\n          order: 1;\n      }\n      \n      .max-label,\n      .min-label,\n      ::slotted([slot=\"max-label\"]),\n      ::slotted([slot=\"min-label\"]){\n          margin: 0 1rem;\n          width: 2rem;\n          text-align: center;\n          white-space: nowrap;\n      }\n      \n      .value-label,\n      .value2-label,\n      ::slotted([slot=\"value-label\"]),\n      ::slotted([slot=\"value2-label\"]){\n          text-align: center;\n          margin: 0 0.5rem;\n          white-space: nowrap;\n      }\n\n      .type-vertical .max-label,\n      .type-vertical .min-label,\n      .type-vertical ::slotted([slot=\"max-label\"]),\n      .type-vertical ::slotted([slot=\"min-label\"]){\n          margin: 1rem 0;\n          width: auto;\n      }\n    `,\n  };\n};\n\n/**\n * Required: add current plugin to the plugins list.\n */\nwindow.tcRangeSliderPlugins.push(GeneratedLabelsPlugin);\n\nexport default GeneratedLabelsPlugin;"],
  "mappings": "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",
  "names": ["getBoolean", "val", "VALUE_LABEL1_CODE_NAME", "VALUE_LABEL2_CODE_NAME", "MIN_LABEL_CODE_NAME", "MAX_LABEL_CODE_NAME", "GeneratedLabelsPlugin", "getters", "$component", "$slider", "$labelsRow", "generatedLabelsEnabled", "$genValue1Label", "$genValue2Label", "$genMinLabel", "$genMaxLabel", "createLabel", "codeName", "$label", "getOuterSlot", "getInnerSlot", "_a", "getLabelFromSlot", "$slot", "setLabelsOrder", "rtlOrBtt", "label1hasSlot", "label2hasSlot", "minHasSlot", "maxHasSlot", "$label1Slot", "$label2Slot", "$minSlot", "$maxSlot", "createLabels", "textValue1", "textValue2", "min", "max", "updateValues", "removeGeneratedLabels", "createOrRemove", "values", "setGenLabelsEnabled", "enabled", "_$component", "_requestUpdate", "_setters", "_getters", "_b", "$box", "$min", "$max", "getBoolean", "data", "_attrName", "_newValue", "_enabled", "generated_labels_plugin_default"]
}
