{
  "version": 3,
  "sources": ["../src/core/templates/main.html.js", "../src/core/enums/attributes-enum.ts", "../src/core/domain/math-provider.ts", "../src/core/dal/data-provider.ts", "../src/core/enums/type-enum.ts", "../src/core/ui/panel-fill.ts", "../src/core/domain/events-provider.ts", "../src/core/enums/css-vars-enum.ts", "../src/core/ui/styles.ts", "../src/core/enums/css-classes-enum.ts", "../src/core/ui/pointer.ts", "../src/core/domain/common-provider.ts", "../src/core/plugins/plugins-manager.ts", "../src/core/ui/slider.ts", "../src/core/domain/attributes-provider.ts", "../src/core/app/range-slider.ts", "../src/core/index.ts"],
  "sourcesContent": ["export default (styles, linkHrefs) => { return ` ${ linkHrefs && linkHrefs.length > 0 ? linkHrefs.map(linkHref => `<link rel=\"stylesheet\" href=\"${ linkHref }\" />`).join('') : '' } <style> ${styles} </style> <div class=\"range-slider-box\"> <div class=\"row\"> <div id=\"range-slider\" class=\"range-slider\"> <div class=\"container\"> <div class=\"panel\"></div> <div class=\"panel-fill\"></div> <div class=\"container\"> <div class=\"pointer\" tabindex=\"0\" role=\"slider\"> <div class=\"pointer-shape\"></div> </div> </div> </div> </div> </div> </div>`; }; ", "/**\n * Constants instead of typescript enums ---> smaller bundle size\n */\nexport const Value = 'value';\nexport const Value1 = 'value1';\nexport const Value2 = 'value2';\n\nexport const PointersOverlap = 'pointers-overlap';\nexport const PointersMinDistance = 'pointers-min-distance';\nexport const PointersMaxDistance = 'pointers-max-distance';\nexport const RangeDragging = 'range-dragging';\n\nexport const Data = 'data';\nexport const Min = 'min';\nexport const Max = 'max';\nexport const Step = 'step';\nexport const Round = 'round';\nexport const Type = 'type';\nexport const Theme = 'theme';\nexport const RightToLeft = 'rtl';\nexport const BottomToTop = 'btt';\n\nexport const Disabled = 'disabled';\nexport const KeyboardDisabled = 'keyboard-disabled';\nexport const Pointer1Disabled = 'pointer1-disabled';\nexport const Pointer2Disabled = 'pointer2-disabled';\n\nexport const SliderWidth = 'slider-width';\nexport const SliderHeight = 'slider-height';\nexport const SliderRadius = 'slider-radius';\n\nexport const SliderBg = 'slider-bg';\nexport const SliderBgHover = 'slider-bg-hover';\nexport const SliderBgFill = 'slider-bg-fill';\n\nexport const PointerWidth = 'pointer-width';\nexport const PointerHeight = 'pointer-height';\nexport const PointerRadius = 'pointer-radius';\nexport const PointerShape = 'pointer-shape';\nexport const PointerBg = 'pointer-bg';\nexport const PointerBgHover = 'pointer-bg-hover';\nexport const PointerBgFocus = 'pointer-bg-focus';\nexport const PointerShadow = 'pointer-shadow';\nexport const PointerShadowHover = 'pointer-shadow-hover';\nexport const PointerShadowFocus = 'pointer-shadow-focus';\nexport const PointerBorder = 'pointer-border';\nexport const PointerBorderHover = 'pointer-border-hover';\nexport const PointerBorderFocus = 'pointer-border-focus';\n\nexport const Pointer2Width = 'pointer2-width';\nexport const Pointer2Height = 'pointer2-height';\nexport const Pointer2Radius = 'pointer2-radius';\nexport const Pointer2Shape = 'pointer2-shape';\nexport const Pointer2Bg = 'pointer2-bg';\nexport const Pointer2BgHover = 'pointer2-bg-hover';\nexport const Pointer2BgFocus = 'pointer2-bg-focus';\nexport const Pointer2Shadow = 'pointer2-shadow';\nexport const Pointer2ShadowHover = 'pointer2-shadow-hover';\nexport const Pointer2ShadowFocus = 'pointer2-shadow-focus';\nexport const Pointer2Border = 'pointer2-border';\nexport const Pointer2BorderHover = 'pointer2-border-hover';\nexport const Pointer2BorderFocus = 'pointer2-border-focus';\n\nexport const AriaLabel1 = 'aria-label1';\nexport const AriaLabel2 = 'aria-label2';\n\nexport const AnimateOnClick = 'animate-onclick';\nexport const CSSLinks = 'css-links';\n\n/*export const enum AttributesEnum {\n  Value = 'value',\n  Value1 = 'value1',\n  Value2 = 'value2',\n\n  PointersOverlap = 'pointers-overlap',\n  PointersMinDistance = 'pointers-min-distance',\n  PointersMaxDistance = 'pointers-max-distance',\n  RangeDragging = 'range-dragging',\n\n  Data = 'data',\n  Min = 'min',\n  Max = 'max',\n  Step = 'step',\n  Round = 'round',\n  Type = 'type',\n  Theme = 'theme',\n  RightToLeft = 'rtl',\n  BottomToTop = 'btt',\n\n  Disabled = 'disabled',\n  KeyboardDisabled = 'keyboard-disabled',\n  Pointer1Disabled = 'pointer1-disabled',\n  Pointer2Disabled = 'pointer2-disabled',\n\n  SliderWidth = 'slider-width',\n  SliderHeight = 'slider-height',\n  SliderRadius = 'slider-radius',\n\n  SliderBg = 'slider-bg',\n  SliderBgHover = 'slider-bg-hover',\n  SliderBgFill = 'slider-bg-fill',\n\n  PointerWidth = 'pointer-width',\n  PointerHeight = 'pointer-height',\n  PointerRadius = 'pointer-radius',\n  PointerShape = 'pointer-shape',\n  PointerBg = 'pointer-bg',\n  PointerBgHover = 'pointer-bg-hover',\n  PointerBgFocus = 'pointer-bg-focus',\n  PointerShadow = 'pointer-shadow',\n  PointerShadowHover = 'pointer-shadow-hover',\n  PointerShadowFocus = 'pointer-shadow-focus',\n  PointerBorder = 'pointer-border',\n  PointerBorderHover = 'pointer-border-hover',\n  PointerBorderFocus = 'pointer-border-focus',\n\n  Pointer2Width = 'pointer2-width',\n  Pointer2Height = 'pointer2-height',\n  Pointer2Radius = 'pointer2-radius',\n  Pointer2Shape = 'pointer2-shape',\n  Pointer2Bg = 'pointer2-bg',\n  Pointer2BgHover = 'pointer2-bg-hover',\n  Pointer2BgFocus = 'pointer2-bg-focus',\n  Pointer2Shadow = 'pointer2-shadow',\n  Pointer2ShadowHover = 'pointer2-shadow-hover',\n  Pointer2ShadowFocus = 'pointer2-shadow-focus',\n  Pointer2Border = 'pointer2-border',\n  Pointer2BorderHover = 'pointer2-border-hover',\n  Pointer2BorderFocus = 'pointer2-border-focus',\n\n  AriaLabel1 = 'aria-label1',\n  AriaLabel2 = 'aria-label2',\n\n  AnimateOnClick = 'animate-onclick',\n  CSSLinks = 'css-links',\n}*/", "/**\n * scale a range [min,max] to [a,b]\n * f(x) = (b - a) * (x - min) / (max - min) + a\n */\nexport const convertRange = (min: number, max: number, a: number, b: number, x: number) => {\n  const temp = (max - min);\n  if(temp === 0) return a;\n  return ((b - a) * (x - min)) / temp + a;\n};\n\n// eslint-disable-next-line\nexport const isNumber = (input: any) => {\n  return !isNaN(parseFloat(input)) && isFinite(input);\n};\n\n// the below function should receive any\n// eslint-disable-next-line\nexport const getNumber = (input: any, defaultValue: any) : number => {\n  return isNumber(input) ? Number(input) : defaultValue;\n};\n\n/**\n * Round up to the next multiple of X,\n * where X is the step provided by the user.\n */\nexport const roundToStep = (num: number, step: number) => {\n  return step === 0 ? 0 : Math.round(num / step) * step;\n};\n\n/**\n * round to decimal places\n * https://stackoverflow.com/questions/11832914/how-to-round-to-at-most-2-decimal-places-if-necessary\n */\nexport const setDecimalPlaces = (num: number, decimalPlaces = Infinity) => {\n  if (decimalPlaces === Infinity) return num;\n\n  const coeff = 10 ** decimalPlaces;\n  return Math.round(num * coeff) / coeff;\n};\n\nexport const getBoolean = (val: string | null | undefined | boolean) => {\n  if(val === null || val === undefined) return false;\n  if(typeof val === 'boolean') return val;\n  return val.trim().toLowerCase() === 'true';\n};\n", "import { isNumber } from '../domain/math-provider';\n\nexport const parseData = (dataString: string | undefined | null): (string | number)[] | undefined => {\n  if (dataString === undefined || dataString === null) return undefined;\n\n  if(Array.isArray(dataString)) return dataString as (string | number)[];\n\n  const result = dataString.trim();\n  if (result === '') return undefined;\n\n  const parts = dataString.split(',');\n  const list: string[] = [];\n  let allValuesAreNumbers = true;\n\n  for (let i = 0; i < parts.length; i++) {\n    const part = parts[i].trim();\n    if (part === '') continue;\n\n    list.push(part);\n\n    if (!isNumber(part)) {\n      allValuesAreNumbers = false;\n    }\n  }\n\n  if (!allValuesAreNumbers) return list;\n\n  return list.map((item) => Number(item));\n};\n\nexport const findValueIndexInData = (val: string | number, data: (string | number)[] | undefined) => {\n  return data ? data.findIndex((item) => item === val || item.toString().trim() === val.toString().trim()) : -1;\n};", "/**\n * Constants instead of typescript enums ---> smaller bundle size\n */\nexport const Vertical = 'vertical';\nexport const Horizontal = 'horizontal';\n\n/*\nexport const enum TypeEnum {\n  Vertical = 'vertical',\n  Horizontal = 'horizontal',\n}*/", "import * as TypeEnum from '../enums/type-enum';\n\nexport interface IPanelFill {\n  updatePosition: (type: string, percent1: number, percent2: number | undefined, rightToLeft: boolean, bottomToTop: boolean) => void;\n}\n\nexport const PanelFill = ($fill: HTMLElement) : IPanelFill => {\n\n  const updatePosition = (type: string, percent1: number, percent2: number | undefined, rightToLeft: boolean, bottomToTop: boolean) => {\n\n    if (type === TypeEnum.Vertical) {\n      $fill.style.removeProperty('width');\n      $fill.style.removeProperty('right');\n      $fill.style.removeProperty('left');\n\n      if (percent2 !== undefined) {\n        $fill.style.height = `${Math.abs(percent1 - percent2)}%`;\n      }\n      else{\n        $fill.style.height = `${ percent1 }%`;\n      }\n\n      if (bottomToTop) {\n        $fill.style.bottom = '0%';\n\n        if (percent2 !== undefined) {\n          $fill.style.top = `${Math.min(100 - percent2, 100 - percent1)}%`;\n        }\n        else{\n          $fill.style.top = 'auto';\n        }\n      }\n      else {\n        $fill.style.bottom = 'auto';\n\n        if (percent2 !== undefined) {\n          $fill.style.top = `${Math.min(percent1, percent2)}%`;\n        }\n        else{\n          $fill.style.top = '0%';\n        }\n      }\n    }\n    else {\n      $fill.style.removeProperty('height');\n      $fill.style.removeProperty('top');\n      $fill.style.removeProperty('bottom');\n\n      if (percent2 !== undefined) {\n        $fill.style.width = `${ Math.abs(percent1 - percent2) }%`;\n      }\n      else{\n        $fill.style.width = `${ percent1 }%`;\n      }\n\n      if (rightToLeft) {\n        $fill.style.right = '0%';\n\n        if (percent2 !== undefined) {\n          $fill.style.left = `${ Math.min(100 - percent2, 100 - percent1) }%`;\n        }\n        else{\n          $fill.style.left = 'auto';\n        }\n      }\n      else {\n        $fill.style.right = 'auto';\n\n        if (percent2 !== undefined) {\n          $fill.style.left = `${ Math.min(percent1, percent2) }%`;\n        }\n        else{\n          $fill.style.left = '0%';\n        }\n      }\n    }\n  };\n\n  return {\n    updatePosition,\n  };\n};", "import { getNumber, isNumber } from './math-provider';\n\nexport const sendPointerClickedEvent = ($component: HTMLElement, $pointer: HTMLElement) => {\n  $component.dispatchEvent(\n    new CustomEvent('onPointerClicked', {\n      detail: {\n        $pointer: $pointer,\n      },\n    })\n  );\n};\n\nexport const sendMouseDownEvent = ($component: HTMLElement, evt: MouseEvent) => {\n  $component.dispatchEvent(\n    new CustomEvent('onMouseDown', {\n      detail: {\n        nativeEvent: evt,\n      },\n    })\n  );\n};\n\nexport const sendMouseUpEvent = ($component: HTMLElement, evt: MouseEvent) => {\n  $component.dispatchEvent(\n    new CustomEvent('onMouseUp', {\n      detail: {\n        nativeEvent: evt,\n      },\n    })\n  );\n};\n\nexport const sendOnKeyDownEvent = ($component: HTMLElement, evt: KeyboardEvent) => {\n  $component.dispatchEvent(\n    new CustomEvent('onKeyDown', {\n      detail: {\n        nativeEvent: evt,\n      },\n    })\n  );\n};\n\nexport interface IChangeEventDetail {\n  value?: number | string | undefined,\n  value2?: number | string | undefined,\n}\n\nexport const sendChangeEvent = ($component: HTMLElement, value1: string | number | undefined, value2: string | number | undefined) => {\n  const detail: IChangeEventDetail = {\n    value: isNumber(value1) ? getNumber(value1, value1) : value1,\n    value2: isNumber(value2) ? getNumber(value2, value2) : value2,\n  };\n\n  $component.dispatchEvent(\n    new CustomEvent('change', {\n      detail,\n    })\n  );\n};", "/**\n * Constants instead of typescript enums ---> smaller bundle size\n */\nexport const AnimateOnClick = '--animate-onclick';\nexport const SliderWidth = '--width';\nexport const SliderHeight = '--height';\nexport const SliderRadius = '--panel-bg-border-radius';\n\nexport const SliderBg = '--panel-bg';\nexport const SliderBgHover = '--panel-bg-hover';\nexport const SliderBgFill = '--panel-bg-fill';\n\nexport const PointerWidth = '--pointer-width';\nexport const PointerHeight = '--pointer-height';\nexport const PointerRadius = '--pointer-border-radius';\nexport const PointerBg = '--pointer-bg';\nexport const PointerBgHover = '--pointer-bg-hover';\nexport const PointerBgFocus = '--pointer-bg-focus';\nexport const PointerShadow = '--pointer-shadow';\nexport const PointerShadowHover = '--pointer-shadow-hover';\nexport const PointerShadowFocus = '--pointer-shadow-focus';\nexport const PointerBorder = '--pointer-border';\nexport const PointerBorderHover = '--pointer-border-hover';\nexport const PointerBorderFocus = '--pointer-border-focus';\n\n/*\nexport const enum CSSVariables {\n\n  AnimateOnClick = '--animate-onclick',\n  SliderWidth = '--width',\n  SliderHeight = '--height',\n  SliderRadius = '--panel-bg-border-radius',\n  \n  SliderBg = '--panel-bg',\n  SliderBgHover = '--panel-bg-hover',\n  SliderBgFill = '--panel-bg-fill',\n  \n  PointerWidth = '--pointer-width',\n  PointerHeight = '--pointer-height',\n  PointerRadius = '--pointer-border-radius',\n  PointerBg = '--pointer-bg',\n  PointerBgHover = '--pointer-bg-hover',\n  PointerBgFocus = '--pointer-bg-focus',\n  PointerShadow = '--pointer-shadow',\n  PointerShadowHover = '--pointer-shadow-hover',\n  PointerShadowFocus = '--pointer-shadow-focus',\n  PointerBorder = '--pointer-border',\n  PointerBorderHover = '--pointer-border-hover',\n  PointerBorderFocus = '--pointer-border-focus',\n}*/", "import * as AttributesEnum from '../enums/attributes-enum';\nimport * as CSSVariables from '../enums/css-vars-enum';\n\nexport interface IStyles {\n\n  setStyle: (key: string, value: string | null | undefined, index: number) => void;\n  getStyle: (key: string, index: number) => string | undefined;\n\n  theme: string | null;\n  pointerShape: string | null;\n  pointer2Shape: string | null;\n}\n\nexport const stylePropertiesList: [string, string, number, string][] = [\n  [CSSVariables.SliderWidth, AttributesEnum.SliderWidth, 1, 'sliderWidth'],\n  [CSSVariables.SliderHeight, AttributesEnum.SliderHeight, 1, 'sliderHeight'],\n  [CSSVariables.SliderRadius, AttributesEnum.SliderRadius, 1, 'sliderRadius'],\n\n  [CSSVariables.SliderBg, AttributesEnum.SliderBg, 1, 'sliderBg'],\n  [CSSVariables.SliderBgHover, AttributesEnum.SliderBgHover, 1, 'sliderBgHover'],\n  [CSSVariables.SliderBgFill, AttributesEnum.SliderBgFill, 1, 'sliderBgFill'],\n\n  [CSSVariables.PointerWidth, AttributesEnum.PointerWidth, 1, 'pointerWidth'],\n  [CSSVariables.PointerHeight, AttributesEnum.PointerHeight, 1, 'pointerHeight'],\n  [CSSVariables.PointerRadius, AttributesEnum.PointerRadius, 1, 'pointerRadius'],\n  [CSSVariables.PointerBg, AttributesEnum.PointerBg, 1, 'pointerBg'],\n  [CSSVariables.PointerBgHover, AttributesEnum.PointerBgHover, 1, 'pointerBgHover'],\n  [CSSVariables.PointerBgFocus, AttributesEnum.PointerBgFocus, 1, 'pointerBgFocus'],\n  [CSSVariables.PointerShadow, AttributesEnum.PointerShadow, 1, 'pointerShadow'],\n  [CSSVariables.PointerShadowHover, AttributesEnum.PointerShadowHover, 1, 'pointerShadowHover'],\n  [CSSVariables.PointerShadowFocus, AttributesEnum.PointerShadowFocus, 1, 'pointerShadowFocus'],\n  [CSSVariables.PointerBorder, AttributesEnum.PointerBorder, 1, 'pointerBorder'],\n  [CSSVariables.PointerBorderHover, AttributesEnum.PointerBorderHover, 1, 'pointerBorderHover'],\n  [CSSVariables.PointerBorderFocus, AttributesEnum.PointerBorderFocus, 1, 'pointerBorderFocus'],\n\n  [CSSVariables.PointerWidth, AttributesEnum.Pointer2Width, 2, 'pointer2Width'],\n  [CSSVariables.PointerHeight, AttributesEnum.Pointer2Height, 2, 'pointer2Height'],\n  [CSSVariables.PointerRadius, AttributesEnum.Pointer2Radius, 2, 'pointer2Radius'],\n  [CSSVariables.PointerBg, AttributesEnum.Pointer2Bg, 2, 'pointer2Bg'],\n  [CSSVariables.PointerBgHover, AttributesEnum.Pointer2BgHover, 2, 'pointer2BgHover'],\n  [CSSVariables.PointerBgFocus, AttributesEnum.Pointer2BgFocus, 2, 'pointer2BgFocus'],\n  [CSSVariables.PointerShadow, AttributesEnum.Pointer2Shadow, 2, 'pointer2Shadow'],\n  [CSSVariables.PointerShadowHover, AttributesEnum.Pointer2ShadowHover, 2, 'pointer2ShadowHover'],\n  [CSSVariables.PointerShadowFocus, AttributesEnum.Pointer2ShadowFocus, 2, 'pointer2ShadowFocus'],\n  [CSSVariables.PointerBorder, AttributesEnum.Pointer2Border, 2, 'pointer2Border'],\n  [CSSVariables.PointerBorderHover, AttributesEnum.Pointer2BorderHover, 2, 'pointer2BorderHover'],\n  [CSSVariables.PointerBorderFocus, AttributesEnum.Pointer2BorderFocus, 2, 'pointer2BorderFocus'],\n];\n\nexport const Styles = ($component: HTMLElement, $slider: HTMLElement, $pointer2: HTMLElement | undefined) : IStyles => {\n\n  let theme: string | null = null;\n  let pointerShape: string | null = null;\n  let pointer2Shape: string | null = null;\n\n  const stylesMap: Map<string, string> = new Map();\n\n  // ----- SETTERS ---------------------------\n\n  const removeClassesStartWith = (prefix: string) => {\n    const classList = [...$slider.classList];\n    for(const className of classList){\n      if(className.startsWith(prefix)){\n        $slider.classList.remove(className);\n      }\n    }\n  };\n\n  const setTheme = (val: string | null) => {\n    theme = val;\n    if(typeof val === 'string'){\n      $slider.classList.add(`theme-${ val }`);\n    }\n    else{\n      removeClassesStartWith('theme-');\n    }\n  };\n\n  const setPointerShape = (val: string | null, index: number) => {\n\n    if(index < 2){\n      pointerShape = val;\n\n      if(typeof val === 'string'){\n        $slider.classList.add('shape', `shape-${ val }`);\n      }\n      else{\n        removeClassesStartWith('shape-');\n      }\n    }\n    else{\n      pointer2Shape = val;\n\n      if(typeof val === 'string'){\n        $slider.classList.add('shape2', `shape2-${ val }`);\n      }\n      else{\n        removeClassesStartWith('shape2-');\n      }\n    }\n  };\n\n  const getKey = (key: string, index: number) => {\n    return `${ key }-${ index }`;\n  };\n\n  const setStyle = (key: string, value: string | null | undefined, index: number) => {\n\n    if(value === null || value === undefined){\n      if(stylesMap.has(getKey(key, index))){\n        stylesMap.delete(getKey(key, index));\n      }\n\n      if(index < 2){\n        $slider.style.removeProperty(key);\n      }\n      else{\n        $pointer2?.style.removeProperty(key);\n      }\n      return;\n    }\n\n    stylesMap.set(getKey(key, index), value);\n\n    if(index < 2){\n      $slider.style.setProperty(key, value);\n    }\n    else{\n      $pointer2?.style.setProperty(key, value);\n    }\n  };\n\n  const getStyle = (key: string, index: number) => {\n    return stylesMap.get(getKey(key, index));\n  };\n\n  // ---- initialization ---------------------\n  (() => {\n\n    for(const item of stylePropertiesList){\n      // '--pointer-width', 'pointer-width', 1, 'pointerWidth'\n      const [cssVariableName, attrName, index, apiProperty] = item;\n      const cssVariableValue = $component.getAttribute(attrName);\n      setStyle(cssVariableName, cssVariableValue, index);\n\n      try{\n        if(!$component.hasOwnProperty(apiProperty)){\n          Object.defineProperty($component, apiProperty, {\n            get () {\n              return getStyle(cssVariableName, index);\n            },\n\n            set: (_val) => {\n              setStyle(cssVariableName, _val, index);\n            },\n          });\n        }\n      }\n      catch (ex){\n        console.error(ex);\n      }\n    }\n\n    setTheme($component.getAttribute(AttributesEnum.Theme));\n    setPointerShape($component.getAttribute(AttributesEnum.PointerShape), 1);\n    setPointerShape($component.getAttribute(AttributesEnum.Pointer2Shape), 2);\n  })();\n\n  return {\n    setStyle,\n    getStyle,\n\n    get theme() {\n      return theme;\n    },\n\n    set theme(val){\n      setTheme(val);\n    },\n\n    get pointerShape() {\n      return pointerShape;\n    },\n\n    set pointerShape(val){\n      setPointerShape(val, 1);\n    },\n\n    get pointer2Shape() {\n      return pointer2Shape;\n    },\n\n    set pointer2Shape(val){\n      setPointerShape(val, 2);\n    },\n\n  };\n};", "/**\n * Constants instead of typescript enums ---> smaller bundle size\n */\nexport const AnimateOnClick = 'animate-on-click';\nexport const RangeDragging = 'range-dragging';\n\n/*\nexport const enum CssClasses {\n  AnimateOnClick = 'animate-on-click',\n  RangeDragging = 'range-dragging',\n}*/", "import * as TypeEnum from '../enums/type-enum';\nimport { sendOnKeyDownEvent, sendPointerClickedEvent } from '../domain/events-provider';\n\nexport interface IPointer {\n  readonly percent: number;\n  readonly $pointer: HTMLElement;\n\n  updatePosition: (percent: number, leftWall: number | undefined, rightWall: number | undefined, type: string, rightToLeft: boolean, bottomToTop: boolean) => void;\n\n  disabled: boolean;\n\n  isClicked: ($target: HTMLElement) => boolean;\n  setCallbacks: (\n    arrowLeft: (pointerIndex: number) => void,\n    arrowRight: (pointerIndex: number) => void,\n    arrowUp: (pointerIndex: number) => void,\n    arrowDown: (pointerIndex: number) => void\n  ) => void;\n\n  setAttr: (key: string, value: string | null | undefined) => void;\n  getAttr: (key: string) => string | null;\n\n  destroy: () => void;\n}\n\nexport const Pointer = ($component: HTMLElement, $pointer: HTMLElement, index: number) : IPointer => {\n\n  // the pointer value in % in the range [0, 100] -\n  // used to render the pointer position\n  let percent = 0;\n\n  let arrowLeft: (pointerIndex: number) => void;\n  let arrowRight: (pointerIndex: number) => void;\n  let arrowUp: (pointerIndex: number) => void;\n  let arrowDown: (pointerIndex: number) => void;\n\n  let disabled = false;\n\n  // -------------- APIs -------------------------\n  const updatePosition = (_percent: number, _leftWall: number | undefined, _rightWall: number | undefined, _type: string, _rightToLeft: boolean, _bottomToTop: boolean) => {\n    if(_rightWall !== undefined && _percent > _rightWall){\n      _percent = _rightWall;\n    }\n\n    if(_leftWall !== undefined && _percent < _leftWall){\n      _percent = _leftWall;\n    }\n\n    percent = _percent;\n    $pointer.focus();\n\n    // the below code should not change the global pointer percent,\n    // only its position on the panel\n    let percentPos = percent;\n    if((_type === TypeEnum.Vertical && _bottomToTop) ||\n      (_type === TypeEnum.Horizontal && _rightToLeft)) {\n      percentPos = 100 - percentPos;\n    }\n\n    if (_type === TypeEnum.Vertical) {\n      $pointer.style.top = `${ percentPos }%`;\n    }\n    else {\n      $pointer.style.left = `${ percentPos }%`;\n    }\n  };\n\n  const isClicked = ($target: HTMLElement) => {\n    return $target === $pointer || $pointer.contains($target);\n  };\n\n  const setCallbacks = (\n    _arrowLeft: (pointerIndex: number) => void,\n    _arrowRight: (pointerIndex: number) => void,\n    _arrowUp: (pointerIndex: number) => void,\n    _arrowDown: (pointerIndex: number) => void\n  ) => {\n    arrowLeft = _arrowLeft;\n    arrowRight = _arrowRight;\n    arrowUp = _arrowUp;\n    arrowDown = _arrowDown;\n  };\n\n  const setDisabled = (_disabled: boolean) => {\n    disabled = _disabled;\n    $pointer.classList.toggle('disabled', disabled);\n\n    if(disabled){\n      $pointer.setAttribute('aria-disabled', 'true');\n    }\n    else{\n      if ($pointer.hasAttribute('aria-disabled')) {\n        $pointer.removeAttribute('aria-disabled');\n      }\n    }\n  };\n\n  const setAttr = (key: string, value: string | null | undefined) => {\n    if(value === null || value === undefined){\n      $pointer.removeAttribute(key);\n    }\n    else{\n      $pointer.setAttribute(key, value);\n    }\n  };\n\n  const getAttr = (key: string) => {\n    return $pointer.getAttribute(key);\n  };\n\n  // -------------- Events ------------------------\n\n  const pointerKeyDown = (evt: KeyboardEvent) => {\n    if(disabled) return;\n\n    switch (evt.key) {\n      case 'ArrowLeft': {\n        evt.preventDefault();\n        if(typeof arrowLeft === 'function'){\n          arrowLeft(index);\n        }\n        break;\n      }\n\n      case 'ArrowRight': {\n        evt.preventDefault();\n        if(typeof arrowRight === 'function'){\n          arrowRight(index);\n        }\n        break;\n      }\n\n      case 'ArrowUp': {\n        evt.preventDefault();\n        if(typeof arrowUp === 'function'){\n          arrowUp(index);\n        }\n        break;\n      }\n\n      case 'ArrowDown': {\n        evt.preventDefault();\n        if(typeof arrowDown === 'function'){\n          arrowDown(index);\n        }\n        break;\n      }\n    }\n\n    sendOnKeyDownEvent($component, evt);\n  };\n\n  const pointerClicked = () => {\n    if(disabled) return;\n    sendPointerClickedEvent($component, $pointer);\n  };\n\n  // ---------- Lifecycle ------------------------\n\n  (() => {\n    $pointer.className = `pointer pointer-${ index }`;\n\n    $pointer.addEventListener('keydown', pointerKeyDown);\n    $pointer.addEventListener('click', pointerClicked);\n  })();\n\n  const destroy = () => {\n    $pointer.removeEventListener('keydown', pointerKeyDown);\n    $pointer.removeEventListener('click', pointerClicked);\n    $pointer.remove();\n  };\n\n  return {\n    $pointer,\n\n    get percent() {\n      return percent;\n    },\n\n    get disabled() {\n      return disabled;\n    },\n\n    set disabled(_disabled) {\n      setDisabled(_disabled);\n    },\n\n    updatePosition,\n\n    isClicked,\n    setCallbacks,\n    setAttr,\n    getAttr,\n\n    destroy,\n  };\n};\n\n", "import { Pointer } from '../ui/pointer';\nimport * as AttributesEnum from '../enums/attributes-enum';\n\nexport const createPointer2 = ($component: HTMLElement, $pointer1: HTMLElement) => {\n  const $pointer2 = $pointer1.cloneNode(true) as HTMLElement;\n  $pointer1.after($pointer2);\n  return Pointer($component, $pointer2, 2);\n}\n\nexport const removeFocus = () => {\n  if(!document.activeElement) return;\n\n  try{\n    (document.activeElement as HTMLElement)?.blur();\n  }\n  catch(ex){\n    // no exception\n  }\n};\n\nexport const getExternalCSSList = ($component: HTMLElement) => {\n  if(!$component) return null;\n\n  const str = $component.getAttribute(AttributesEnum.CSSLinks);\n  if(!str) return null;\n\n  const parts = str.split(';');\n  const cssList: string[] = [];\n\n  for(const part of parts){\n    if(part.trim() === '') continue;\n    cssList.push(part.trim());\n  }\n\n  return cssList;\n};", "import { IPlugin, IPluginGetters, IPluginSetters, IPluginUpdateData } from './interfaces';\n\ndeclare global {\n  interface Window {\n    tcRangeSliderPlugins: (() => IPlugin)[];\n    tcRangeSliderObservedAttr: string[];\n  }\n}\n\nexport interface IPluginsManager {\n  init: () => void;\n\n  update: (data: IPluginUpdateData) => void;\n\n  onAttrChange: (attrName: string, oldValue: string, newValue: string) =>  void;\n}\n\nexport const PluginsManager = (\n  $component: HTMLElement,\n  requestUpdatePlugins: () => void,\n  setters: IPluginSetters,\n  getters: IPluginGetters,\n) : IPluginsManager => {\n\n  const plugins: IPlugin[] = [];\n\n  // ------ APIs ----------------------------\n\n  const update = (data: IPluginUpdateData) => {\n    for(const plugin of plugins){\n      if(plugin.update && typeof plugin.update === 'function'){\n        plugin.update(data);\n      }\n    }\n  };\n\n  const onAttrChange = (_attrName: string, _oldValue: string, _newValue: string) => {\n    for(const plugin of plugins){\n      if(plugin.onAttrChange && typeof plugin.onAttrChange === 'function'){\n        plugin.onAttrChange(\n          _attrName,\n          _oldValue,\n          _newValue\n        );\n      }\n    }\n  };\n\n  const defineSettersGetters = (plugin: IPlugin) => {\n    if(!plugin.gettersAndSetters) return;\n\n    for(const item of plugin.gettersAndSetters){\n      if(!item.name || !item.attributes) continue;\n\n      try{\n        if(!$component.hasOwnProperty(item.name)){\n          Object.defineProperty($component, item.name, item.attributes);\n        }\n      }\n      catch (ex){\n        console.error('defineSettersGetters error:', ex);\n      }\n    }\n  };\n\n  const initStyles = (plugin: IPlugin) => {\n    if(!plugin.css) return;\n\n    const $style = $component.shadowRoot?.querySelector('style');\n    if(!$style) return;\n\n    $style.innerHTML += plugin.css;\n  };\n\n  // ------ initialization ------------------\n  const init = () => {\n    if(!window.tcRangeSliderPlugins) return;\n\n    for(const pluginFunc of window.tcRangeSliderPlugins){\n      const plugin = pluginFunc();\n      plugins.push(plugin);\n\n      if(plugin.init && typeof plugin.init === 'function'){\n\n        // call plugin initialization function\n        plugin.init(\n          $component,\n          requestUpdatePlugins,\n          setters,\n          getters,\n        );\n\n        // if plugin has getters and setters that used for APIs ---> define them\n        defineSettersGetters(plugin);\n\n        // if plugin has css rules defined as plain text ---> they can be added dynamically\n        initStyles(plugin);\n      }\n    }\n  };\n\n  return {\n    init,\n    update,\n    onAttrChange,\n  };\n};", "import { IPointer } from './pointer';\nimport { convertRange, getBoolean, getNumber, isNumber, roundToStep, setDecimalPlaces } from '../domain/math-provider';\nimport * as AttributesEnum from '../enums/attributes-enum';\nimport { TData, TStep } from '../types';\nimport { findValueIndexInData, parseData } from '../dal/data-provider';\nimport * as TypeEnum from '../enums/type-enum';\nimport { IPanelFill, PanelFill } from './panel-fill';\nimport { sendChangeEvent, sendMouseDownEvent, sendMouseUpEvent } from '../domain/events-provider';\nimport { IStyles, Styles } from './styles';\nimport * as CSSVariables from '../enums/css-vars-enum';\nimport * as CssClasses from '../enums/css-classes-enum';\nimport { removeFocus } from '../domain/common-provider';\nimport { IPluginsManager, PluginsManager } from '../plugins/plugins-manager';\n\nexport interface ISlider {\n  readonly pointers: IPointer[];\n  readonly styles: IStyles | null;\n  readonly pluginsManager: IPluginsManager | null;\n\n  pointersOverlap: boolean;\n  pointersMinDistance: number;\n  pointersMaxDistance: number;\n  rangeDragging: boolean;\n\n  readonly min: number | string;\n  readonly max: number | string;\n  readonly step: TStep;\n  readonly data: TData;\n\n  type: string;\n  rightToLeft: boolean;\n  bottomToTop: boolean;\n  disabled: boolean;\n  keyboardDisabled: boolean;\n  round: number;\n  animateOnClick: string | undefined;\n  ariaLabel1: string | undefined;\n  ariaLabel2: string | undefined;\n\n  setMin: (value: number | string | undefined | null) => void;\n  setMax: (value: number | string | undefined | null) => void;\n  setValue: (value: number | string | undefined | null, index: number) => void;\n  setStep: (value: TStep) => void;\n  setData: (value: TData | string | null | number) => void;\n  getTextValue: (_percent: number | undefined) => undefined | string | number;\n\n  destroy: () => void;\n}\n\nexport const MIN_DEFAULT = 0;\nexport const MAX_DEFAULT = 100;\nexport const ROUND_DEFAULT = 2;\n\nexport const Slider = ($component: HTMLElement, $slider: HTMLElement, pointers: IPointer[]) : ISlider => {\n\n  const pointer1 = pointers[0];\n  let pointer2 = pointers[1];\n\n  let selectedPointer: IPointer | null | undefined = null;\n  let panelFill: IPanelFill | null = null;\n  let styles: IStyles | null = null;\n  let pluginsManager: IPluginsManager | null = null;\n\n  let min = MIN_DEFAULT;\n  let max = MAX_DEFAULT;\n  let step: TStep = undefined;\n  let data: TData = undefined;\n  let type: string = TypeEnum.Horizontal;\n  let round: number = ROUND_DEFAULT;\n  let rightToLeft = false;\n  let bottomToTop = false;\n\n  let pointersOverlap = false;\n  let pointersMinDistance = 0;\n  let pointersMaxDistance = Infinity;\n\n  let rangeDragging = false;\n\n  let rangeDraggingStart: number | undefined = undefined;\n  let rangeDraggingDiff: number | undefined = undefined;\n\n  let disabled = false;\n  let keyboardDisabled = false;\n  let animateOnClick: string | undefined = undefined;\n\n  let ariaLabel1: string | undefined = undefined;\n  let ariaLabel2: string | undefined = undefined;\n\n  // -------------- EVENTS --------------------\n\n  const onMouseDown = (evt: MouseEvent) => {\n    if(disabled) return;\n\n    if (evt.preventDefault) {\n      evt.preventDefault();\n    }\n\n    onValueChange(evt);\n\n    window.addEventListener('mousemove', onValueChange);\n    window.addEventListener('mouseup', onMouseUp);\n\n    sendMouseDownEvent($component, evt);\n  };\n\n  const onMouseUp = (evt: MouseEvent) => {\n    if(disabled) return;\n\n    rangeDraggingStart = undefined;\n    rangeDraggingDiff = undefined;\n\n    window.removeEventListener('mousemove', onValueChange);\n    window.removeEventListener('mouseup', onValueChange);\n\n    if(animateOnClick){\n      $slider.classList.add(CssClasses.AnimateOnClick);\n    }\n\n    sendMouseUpEvent($component, evt);\n  };\n\n  const getActivePointer = ($target: HTMLElement, percent: number) => {\n    if(pointers.length <= 0) return;\n\n    // if only 1 pointer exists --> return it\n    if(pointers.length === 1){\n      if(pointers[0].isClicked($target) && animateOnClick){\n        $slider.classList.remove(CssClasses.AnimateOnClick);\n      }\n\n      return pointers[0];\n    }\n\n    const panelFillClicked = isPanelFillClicked($target);\n\n    if(rangeDragging){\n      let _dragPercent = percent;\n      const _step = getRelativeStep(_dragPercent);\n      if(_step !== undefined){\n        _dragPercent = roundToStep(_dragPercent, _step);\n      }\n\n      if(panelFillClicked){\n        rangeDraggingStart = _dragPercent;\n        rangeDraggingDiff = 0;\n      }\n      else{\n        if(rangeDraggingStart !== undefined){\n          rangeDraggingDiff = _dragPercent - rangeDraggingStart;\n          rangeDraggingStart = _dragPercent;\n        }\n      }\n    }\n\n    if(!isPanelClicked($target) && !panelFillClicked){\n\n      // if clicked directly on 1 of the pointers ---> return it\n      for(let pointer of pointers){\n        if(!pointer.isClicked($target)) continue;\n\n        if(animateOnClick){\n          $slider.classList.remove(CssClasses.AnimateOnClick);\n        }\n\n        return pointer;\n      }\n\n      // if already selected pointer ---> return it\n      for(let pointer of pointers){\n        if(selectedPointer === pointer) return pointer;\n      }\n    }\n\n    // find the closest pointer and return it\n    let minDistance = Infinity;\n    let minDistancePointer = null;\n\n    for(let pointer of pointers){\n      const distance = Math.abs(percent - pointer.percent);\n      if(distance < minDistance){\n        minDistance = distance;\n        minDistancePointer = pointer;\n      }\n    }\n\n    return minDistancePointer;\n  };\n\n  const getSelectedPointerIndex = () => {\n    return pointers.findIndex(pointer => selectedPointer === pointer && !pointer.disabled);\n  };\n\n  const onValueChange = (evt: MouseEvent | TouchEvent) => {\n\n    // find the percent [0, 100] of the current mouse position in vertical or horizontal slider\n    let percent;\n\n    if(type === TypeEnum.Vertical){\n      const { height: boxHeight, top: boxTop } = $slider.getBoundingClientRect();\n      const mouseY = evt.type.indexOf('mouse') !== -1 ? (evt as MouseEvent).clientY : (evt as TouchEvent).touches[0].clientY;\n      const top = Math.min(Math.max(0, mouseY - boxTop), boxHeight);\n      percent = (top * 100) / boxHeight;\n    }\n    else{\n      const { width: boxWidth, left: boxLeft } = $slider.getBoundingClientRect();\n      const mouseX = evt.type.indexOf('mouse') !== -1 ? (evt as MouseEvent).clientX : (evt as TouchEvent).touches[0].clientX;\n      const left = Math.min(Math.max(0, mouseX - boxLeft), boxWidth);\n      percent = (left * 100) / boxWidth;\n    }\n\n    if(rightToLeft || bottomToTop){\n      percent = 100 - percent;\n    }\n\n    selectedPointer = getActivePointer(evt.target as HTMLElement, percent);\n\n    // handle range dragging\n    if(rangeDragging && pointers.length > 1 && rangeDraggingDiff !== undefined){\n\n      const firstPointer = pointers[0];\n      const lastPointer = pointers[pointers.length - 1];\n\n      const firstSmallerThanMin = firstPointer.percent + rangeDraggingDiff < 0;\n      const lastGreaterThanMax = lastPointer.percent + rangeDraggingDiff > 100;\n      if(firstSmallerThanMin || lastGreaterThanMax) return;\n\n      setPositions(1, firstPointer.percent + rangeDraggingDiff);\n      setPositions(2, lastPointer.percent + rangeDraggingDiff);\n      return;\n    }\n\n    const foundIndex = getSelectedPointerIndex();\n    if(foundIndex !== -1){\n      setPositions(foundIndex + 1, percent);\n    }\n  };\n\n  const pointerMouseWheel = (evt: WheelEvent) => {\n    if (disabled ||\n      document.activeElement !== $component ||\n      selectedPointer?.disabled) return;\n\n    evt.stopPropagation();\n    evt.preventDefault();\n\n    const scrollTop = evt.deltaY < 0;\n    const rightOrBottom = rightToLeft || bottomToTop;\n    const shouldGoPrev = scrollTop ? !rightOrBottom : rightOrBottom;\n\n    const foundIndex = getSelectedPointerIndex();\n    if(foundIndex === -1) return;\n\n    if(shouldGoPrev){\n      goPrev(foundIndex + 1, pointers[foundIndex].percent);\n    }\n    else{\n      goNext(foundIndex + 1, pointers[foundIndex].percent);\n    }\n  };\n\n  // -------------- Arrows --------------------\n\n  const arrowLeft = (pointerIndex: number) => {\n    if(disabled || keyboardDisabled) return;\n\n    if(type === TypeEnum.Vertical){\n      if(bottomToTop){\n        // jump to the max value\n        setPositions(pointerIndex, 100);\n      }\n      else{\n        // jump to the min value\n        setPositions(pointerIndex, 0);\n      }\n    }\n    else{\n      if(rightToLeft){\n        // go forward\n        goNext(pointerIndex, pointers[pointerIndex - 1].percent);\n      }\n      else{\n        // go backwards\n        goPrev(pointerIndex, pointers[pointerIndex - 1].percent);\n      }\n    }\n  };\n\n  const arrowRight = (pointerIndex: number) => {\n    if(disabled || keyboardDisabled) return;\n\n    if(type === TypeEnum.Vertical){\n      if(bottomToTop){\n        // jump to the min value\n        setPositions(pointerIndex, 0);\n      }\n      else{\n        // jump to the max value\n        setPositions(pointerIndex, 100);\n      }\n    }\n    else{\n      if(rightToLeft){\n        // go backward\n        goPrev(pointerIndex, pointers[pointerIndex - 1].percent);\n      }\n      else{\n        // go forward\n        goNext(pointerIndex, pointers[pointerIndex - 1].percent);\n      }\n    }\n  };\n\n  const arrowUp = (pointerIndex: number) => {\n    if(disabled || keyboardDisabled) return;\n\n    if(type === TypeEnum.Vertical){\n      if(bottomToTop){\n        // go forwards\n        goNext(pointerIndex, pointers[pointerIndex - 1].percent);\n      }\n      else{\n        // go backwards\n        goPrev(pointerIndex, pointers[pointerIndex - 1].percent);\n      }\n    }\n    else{\n      if(rightToLeft){\n        // jump to the max value\n        setPositions(pointerIndex, 100);\n      }\n      else{\n        // jump to the min value\n        setPositions(pointerIndex, 0);\n      }\n    }\n  };\n\n  const arrowDown = (pointerIndex: number) => {\n    if(disabled || keyboardDisabled) return;\n\n    if(type === TypeEnum.Vertical){\n      if(bottomToTop){\n        // go backward\n        goPrev(pointerIndex, pointers[pointerIndex - 1].percent);\n      }\n      else{\n        // go forward\n        goNext(pointerIndex, pointers[pointerIndex - 1].percent);\n      }\n    }\n    else{\n      if(rightToLeft){\n        // jump to the min value\n        setPositions(pointerIndex, 0);\n      }\n      else{\n        // jump to the max value\n        setPositions(pointerIndex, 100);\n      }\n    }\n  };\n\n  // -------------- Helpers ------------------------\n\n  const isPanelClicked = ($target: HTMLElement) => {\n    return $target.classList.contains('panel');\n  };\n\n  const isPanelFillClicked = ($target: HTMLElement) => {\n    return $target.classList.contains('panel-fill');\n  };\n\n  const goPrev = (index: number, _percent: number | undefined) => {\n    if(_percent === undefined) return;\n\n    let step = getRelativeStep(_percent);\n    if(step == undefined){\n      step = 1;\n    }\n\n    _percent -= step;\n\n    if(_percent < 0){\n      _percent = 0;\n    }\n\n    setPositions(index, _percent);\n  };\n\n  const goNext = (index: number, _percent: number | undefined) => {\n    if(_percent === undefined) return;\n\n    let step = getRelativeStep(_percent);\n    if(step == undefined){\n      step = 1;\n    }\n\n    _percent += step;\n\n    if(_percent > 100){\n      _percent = 100;\n    }\n\n    setPositions(index, _percent);\n  };\n\n  const addSecondPointer = () => {\n    // TODO\n  };\n\n  const removeSecondPointer = () => {\n    // TODO\n  };\n\n  const updatePlugins = () => {\n\n    if(!pluginsManager) return;\n    pluginsManager.update({\n      percents: getPercents(),\n      values: getValues(),\n\n      min: getNumericMin(),\n      max: getNumericMax(),\n\n      data: getData(),\n      step: getStep(),\n      round: getRound(),\n      type: getType(),\n\n      textMin: getMin(),\n      textMax: getMax(),\n\n      rightToLeft: isRightToLeft(),\n      bottomToTop: isBottomToTop(),\n\n      pointersOverlap: isPointersOverlap(),\n      pointersMinDistance: getPointersMinDistance(),\n      pointersMaxDistance: getPointersMaxDistance(),\n      rangeDragging: isRangeDraggingEnabled(),\n\n      disabled: isDisabled(),\n      keyboardDisabled: isKeyboardDisabled(),\n    });\n  };\n\n  const requestUpdatePlugins = () => {\n    updatePlugins();\n  };\n\n  const updatePointersFromPlugins = (value1: string | number | undefined, value2: string | number | undefined) => {\n    const val1 = (value1 === null || value1 === undefined) ? null : value1.toString();\n    const val2 = (value2 === null || value2 === undefined) ? null : value2.toString();\n    setInitialPointersValues(val1, val1, val2);\n  };\n\n  // -------------- Getters --------------------\n\n  const getPointerLeftWall = (pointerIndex: number) => {\n    if(pointersOverlap || pointers.length <= 1 || max === min) return undefined;\n\n    if(pointerIndex === 0){\n      // by default 0, but if min distance between pointers is defined --->\n      // then the distance to the next pointer\n      const converted = pointersMaxDistance * 100 / (max - min);\n      return Math.max(0, pointers[pointerIndex + 1].percent - converted);\n    }\n    else{\n      // by default previous pointer, but if min distance between pointers is defined --->\n      // then the distance to the next pointer\n      const converted = pointersMinDistance * 100 / (max - min);\n      return Math.min(pointers[pointerIndex - 1].percent + converted, 100);\n    }\n  };\n\n  const getPointerRightWall = (pointerIndex: number) => {\n    if(pointersOverlap || pointers.length <= 1 || max === min) return undefined;\n\n    if(pointerIndex === pointers.length - 1){\n      // by default 100, but if min distance between pointers is defined --->\n      // then the distance to the previous pointer\n      const converted = pointersMaxDistance * 100 / (max - min);\n      return Math.min(pointers[pointerIndex - 1].percent + converted, 100);\n    }\n    else{\n      // distance to the next pointer\n      const converted = pointersMinDistance * 100 / (max - min);\n      return Math.max(0, pointers[pointerIndex + 1].percent - converted);\n    }\n  };\n\n  const getRelativeStep = (_percent: number) => {\n\n    // round percent to step\n    let _step = typeof step === 'function' ? step(convertRange(0, 100, min, max, _percent), _percent) : step;\n    if(_step !== undefined){\n      _step = convertRange(min, max, 0, 100, _step as number);\n      return _step;\n    }\n\n    return undefined;\n  };\n\n  const getTextValue = (_percent: number | undefined) => {\n    if(_percent === undefined) return undefined;\n\n    const val = convertRange(0, 100, min, max, _percent);\n\n    if(data !== undefined){\n      return data[val];\n    }\n\n    return setDecimalPlaces(val, round);\n  };\n\n  const getMin = () => {\n\n    if(data !== undefined){\n      return data[min];\n    }\n\n    return min;\n  };\n\n  const getMax = () => {\n\n    if(data !== undefined){\n      return data[max];\n    }\n\n    return max;\n  };\n\n  const getStep = () => {\n    return step;\n  };\n\n  const getPointerMin = (index: number) => {\n    if(index < 2 || pointersOverlap) return getMin();\n    return getTextValue(pointer1.percent) ?? '';\n  };\n\n  const getPointerMax = (index: number) => {\n    if(index >= 2 || pointersOverlap) return getMax();\n\n    if(pointer2){\n      return getTextValue(pointer2?.percent) ?? '';\n    }\n    else{\n      return getMax();\n    }\n  };\n\n  const getPercents = () => {\n    return pointers.map(pointer => pointer.percent);\n  };\n\n  const getValues = () => {\n    return pointers.map(pointer => getTextValue(pointer.percent));\n  }\n\n  const getNumericMin = () => {\n    return min;\n  };\n\n  const getNumericMax = () => {\n    return max;\n  };\n\n  const getData = () => {\n    return data;\n  };\n\n  const getType = () => {\n    return type;\n  };\n\n  const getRound = () => {\n    return round;\n  };\n\n  const isRightToLeft = () => {\n    return rightToLeft;\n  };\n\n  const isBottomToTop = () => {\n    return bottomToTop;\n  };\n\n  const isDisabled = () => {\n    return disabled;\n  };\n\n  const isKeyboardDisabled = () => {\n    return keyboardDisabled;\n  };\n\n  const isPointersOverlap = () => {\n    return pointersOverlap;\n  };\n\n  const isRangeDraggingEnabled = () => {\n    return rangeDragging;\n  };\n\n  const getPointersMinDistance = () => {\n    return pointersMinDistance;\n  };\n\n  const getPointersMaxDistance = () => {\n    return pointersMaxDistance;\n  };\n\n  // -------------- Setters --------------------\n\n  const setPositions = (index: number, _percent: number | undefined) => {\n    if(_percent === undefined) return;\n\n    // round percent to step\n    const _step = getRelativeStep(_percent);\n    if(_step !== undefined){\n      _percent = roundToStep(_percent, _step);\n    }\n\n    if(index < 2){\n      pointer1.updatePosition(_percent, getPointerLeftWall(0), getPointerRightWall(0), type, rightToLeft, bottomToTop);\n    }\n    else{\n      pointer2?.updatePosition(_percent, getPointerLeftWall(1), getPointerRightWall(1), type, rightToLeft, bottomToTop);\n    }\n\n    panelFill?.updatePosition(type, pointer1.percent, pointer2?.percent, rightToLeft, bottomToTop);\n\n    const value1text = getTextValue(pointer1.percent);\n    const value2text = getTextValue(pointer2?.percent);\n\n    updatePlugins();\n\n    if(value1text !== undefined){\n      pointer1.setAttr('aria-valuenow', value1text.toString());\n      pointer1.setAttr('aria-valuetext', value1text.toString());\n    }\n\n    if(value2text !== undefined && pointer2){\n      pointer2.setAttr('aria-valuenow', value2text.toString());\n      pointer2.setAttr('aria-valuetext', value2text.toString());\n    }\n\n    setAriaMinMax();\n\n    sendChangeEvent($component, getTextValue(pointer1.percent), getTextValue(pointer2?.percent));\n  };\n\n  /**\n   * on component init, min and max should be initialized together\n   * because their validations depend on each other;\n   */\n  const setMinMax = (_min: number | string | undefined | null, _max: number | string | undefined | null) => {\n\n    min = data !== undefined ? 0 : getNumber(_min, MIN_DEFAULT);\n    max = data !== undefined ? data.length - 1 : getNumber(_max, MAX_DEFAULT);\n\n    // perform validations\n    setMin(min);\n    setMax(max);\n  };\n\n  const setAriaMinMax = () => {\n    if(pointer1){\n      pointer1.setAttr('aria-valuemin', (getPointerMin(1) ?? '').toString());\n      pointer1.setAttr('aria-valuemax', (getPointerMax(1) ?? '').toString());\n    }\n\n    if(pointer2){\n      pointer2.setAttr('aria-valuemin', (getPointerMin(2) ?? '').toString());\n      pointer2.setAttr('aria-valuemax', (getPointerMax(2) ?? '').toString());\n    }\n  };\n\n  const setMin = (_min: number | string | undefined | null) => {\n    min = getNumber(_min, MIN_DEFAULT);\n\n    if(min > max){\n      max = min + MAX_DEFAULT;\n    }\n\n    setPositions(1, pointer1.percent);\n    setPositions(2, pointer2?.percent);\n  };\n\n  const setMax = (_max: number | string | undefined | null) => {\n\n    max = getNumber(_max, MAX_DEFAULT);\n\n    if(max < min){\n      max = min + MAX_DEFAULT;\n    }\n\n    setPositions(1, pointer1.percent);\n    setPositions(2, pointer2?.percent);\n  };\n\n  /**\n   * on component init, value, value1, and value2 should be initialized together\n   * because their validations may depend on each other;\n   */\n  const setInitialPointersValues = (_value: string | null, _value1: string | null, _value2: string | null) => {\n\n    // init initial values with pointers overlap ----------\n    pointersOverlap = true;\n    const val1str = _value1 !== null ? _value1 : _value;\n\n    setValue(val1str, 1);\n    setValue(_value2, 2);\n    pointersOverlap = false;\n\n    // add all required validations ------------------------\n    setValue(val1str, 1);\n    setValue(_value2, 2);\n  };\n\n  const setValue = (_val: number | string | undefined | null, index: number) => {\n\n    let val: number;\n\n    // handle the case when we set value2 and pointer2 doesn't exist,\n    // or the case when we remove the existing second pointer\n    if(index === 2){\n      if(_val !== undefined && _val !== null && !pointer2){\n        addSecondPointer();\n      }\n\n      if((_val === undefined || _val === null) && !!pointer2){\n        removeSecondPointer();\n        setRangeDragging(false);\n      }\n    }\n\n    if(data !== undefined){\n\n      val = (_val === undefined || _val === null) ? 0 : findValueIndexInData(_val, data);\n      if(val === -1){\n        val = 0;\n      }\n    }\n    else{\n      val = getNumber(_val, min);\n\n      if(val < min){\n        val = min;\n      }\n\n      if(val > max){\n        val = max;\n      }\n    }\n\n    // scale a range [min,max] to [a,b]\n    const percent = convertRange(min, max, 0, 100, val);\n\n    setPositions(index, percent);\n    removeFocus();\n  };\n\n  const setStep = (_step: TStep) => {\n    if(_step === null || _step === undefined){\n      step = undefined;\n      return;\n    }\n\n    if (typeof _step === 'function') {\n      step = _step;\n      return;\n    }\n\n    if(isNumber(_step)){\n      step = getNumber(_step, 1);\n\n      const diff = Math.abs(max - min);\n      if (step > diff) {\n        step = undefined;\n      }\n      return;\n    }\n\n    step = undefined;\n  };\n\n  const setPointersOverlap = (_pointersOverlap: boolean) => {\n    pointersOverlap = _pointersOverlap;\n    setPositions(1, pointer1.percent);\n  };\n\n  const setPointersMinDistance = (_pointersMinDistance: number) => {\n    if(!isNumber(_pointersMinDistance) || _pointersMinDistance < 0){\n      _pointersMinDistance = 0;\n    }\n    pointersMinDistance = _pointersMinDistance;\n  };\n\n  const setPointersMaxDistance = (_pointersMaxDistance: number) => {\n    if(!isNumber(_pointersMaxDistance) || _pointersMaxDistance < 0){\n      _pointersMaxDistance = Infinity;\n    }\n    pointersMaxDistance = _pointersMaxDistance;\n  };\n\n  const setDisabled = (_disabled: boolean) => {\n    disabled = _disabled;\n    $slider.classList.toggle('disabled', disabled);\n\n    if(disabled){\n      $slider.setAttribute('aria-disabled', 'true');\n    }\n    else{\n      if ($slider.hasAttribute('aria-disabled')) {\n        $slider.removeAttribute('aria-disabled');\n      }\n    }\n  };\n\n  const setKeyboardDisabled = (_disabled: boolean) => {\n    keyboardDisabled = _disabled;\n  };\n\n  const setData = (_data: TData | string | number | null) => {\n\n    if(_data === null || _data === undefined){\n      data = undefined;\n      return;\n    }\n\n    data = parseData(_data as string);\n    if(data === undefined || data.length <= 0){\n      data = undefined;\n      return;\n    }\n\n    setMin(0);\n    setMax(data.length - 1);\n\n    if(step === undefined){\n      setStep(1);\n    }\n  };\n\n  const setType = (_type: string | null | undefined) => {\n\n    if(typeof _type === 'string'){\n      type = _type.trim().toLowerCase() === TypeEnum.Vertical ? TypeEnum.Vertical : TypeEnum.Horizontal;\n    }\n    else{\n      type = TypeEnum.Horizontal;\n    }\n\n    const $box = $component.shadowRoot?.querySelector('.range-slider-box');\n    if(!$box) return;\n    $box.className = `range-slider-box type-${ type }`;\n\n    // update fill position and pointers positions\n    setPositions(1, pointer1.percent);\n\n    if(pointer2){\n      setPositions(2, pointer2.percent);\n    }\n\n    // update accessibility properties\n    const aria = type === TypeEnum.Vertical ?  'vertical' : 'horizontal';\n    pointer1.setAttr('aria-orientation', aria);\n    pointer2?.setAttr('aria-orientation', aria);\n  };\n\n  const setRightToLeft = (_rightToLeft: boolean) => {\n    rightToLeft = _rightToLeft;\n\n    if(pointer2){\n      // change pointers order\n      if(rightToLeft){\n        // pointer1 should be after pointer2\n        pointer2.$pointer.after(pointer1.$pointer);\n      }\n      else{\n        // pointer2 should be after pointer1\n        pointer1.$pointer.after(pointer2.$pointer);\n      }\n    }\n\n    setPositions(1, pointer1.percent);\n    setPositions(2, pointer2?.percent);\n\n    updatePlugins();\n  };\n\n  const setBottomToTop = (_bottomToTop: boolean) => {\n    bottomToTop = _bottomToTop;\n\n    if(pointer2){\n      // change pointers order\n      if(bottomToTop){\n        // pointer1 should be after pointer2\n        pointer2.$pointer.after(pointer1.$pointer);\n      }\n      else{\n        // pointer2 should be after pointer1\n        pointer1.$pointer.after(pointer2.$pointer);\n      }\n    }\n\n    setPositions(1, pointer1.percent);\n    setPositions(2, pointer2?.percent);\n\n    updatePlugins();\n  };\n\n  const setRound = (_round: number) => {\n    round = getNumber(_round, ROUND_DEFAULT);\n\n    if(round < 0){\n      round = ROUND_DEFAULT;\n    }\n\n    updatePlugins();\n  };\n\n  const setAnimateOnClick = (_animateOnClick: string | null | undefined) => {\n    if(_animateOnClick === null || _animateOnClick === undefined){\n      animateOnClick = undefined;\n      $slider.style.removeProperty(CSSVariables.AnimateOnClick);\n      $slider.classList.remove(CssClasses.AnimateOnClick);\n    }\n    else{\n      animateOnClick = _animateOnClick;\n      $slider.style.setProperty(CSSVariables.AnimateOnClick, animateOnClick);\n      $slider.classList.add(CssClasses.AnimateOnClick);\n    }\n  };\n\n  const setAriaLabel = (_ariaLabel: string | undefined, index: number) => {\n\n    if(index < 2){\n      ariaLabel1 = _ariaLabel;\n      pointer1.setAttr('aria-label', _ariaLabel);\n    }\n    else{\n      ariaLabel2 = _ariaLabel;\n      pointer2?.setAttr('aria-label', _ariaLabel);\n    }\n  };\n\n  const setRangeDragging = (_rangeDragging: boolean) => {\n    rangeDraggingStart = undefined;\n\n    if(!pointer2){\n      rangeDragging = false;\n      $slider.classList.remove(CssClasses.RangeDragging);\n      return;\n    }\n\n    rangeDragging = _rangeDragging;\n    $slider.classList.toggle(CssClasses.RangeDragging, rangeDragging);\n  };\n\n  // initialization ....\n  (() => {\n\n    // init pointers\n    pointer1.setCallbacks(arrowLeft, arrowRight, arrowUp, arrowDown);\n    pointer2?.setCallbacks(arrowLeft, arrowRight, arrowUp, arrowDown);\n\n    // init panel fill\n    const $fill = $component.shadowRoot?.querySelector('.panel-fill') as HTMLElement;\n    if($fill){\n      panelFill = PanelFill($fill);\n    }\n\n    // init main properties from HTML attributes\n    setType($component.getAttribute(AttributesEnum.Type));\n    setRightToLeft(getBoolean($component.getAttribute(AttributesEnum.RightToLeft)));\n    setBottomToTop(getBoolean($component.getAttribute(AttributesEnum.BottomToTop)));\n\n    setMinMax($component.getAttribute(AttributesEnum.Min), $component.getAttribute(AttributesEnum.Max));\n    setStep($component.getAttribute(AttributesEnum.Step));\n    setData($component.getAttribute(AttributesEnum.Data));\n\n    // set value and render the pointers ----------------------\n    setInitialPointersValues(\n      $component.getAttribute(AttributesEnum.Value),\n      $component.getAttribute(AttributesEnum.Value1),\n      $component.getAttribute(AttributesEnum.Value2)\n    );\n\n    // overlaps MUST be defined after the pointer values\n    setPointersOverlap(getBoolean($component.getAttribute(AttributesEnum.PointersOverlap)));\n    setPointersMinDistance(getNumber($component.getAttribute(AttributesEnum.PointersMinDistance), 0));\n    setPointersMaxDistance(getNumber($component.getAttribute(AttributesEnum.PointersMaxDistance), Infinity));\n    setRangeDragging(getBoolean($component.getAttribute(AttributesEnum.RangeDragging)));\n\n    // additional properties -----------------------------\n    setDisabled(getBoolean($component.getAttribute(AttributesEnum.Disabled)));\n    keyboardDisabled = getBoolean($component.getAttribute(AttributesEnum.KeyboardDisabled))\n    pointer1.disabled = getBoolean($component.getAttribute(AttributesEnum.Pointer1Disabled));\n\n    if(pointer2){\n      pointer2.disabled = getBoolean($component.getAttribute(AttributesEnum.Pointer2Disabled));\n    }\n\n    setRound(getNumber($component.getAttribute(AttributesEnum.Round), ROUND_DEFAULT));\n\n    const ariaLabel1 = $component.getAttribute(AttributesEnum.AriaLabel1);\n    if(ariaLabel1 !== null){\n      setAriaLabel(ariaLabel1, 1);\n    }\n\n    const ariaLabel2 = $component.getAttribute(AttributesEnum.AriaLabel2);\n    if(ariaLabel2 !== null && pointer2){\n      setAriaLabel(ariaLabel2, 2);\n    }\n\n    // init styles ---------\n    styles = Styles($component, $slider, pointer2?.$pointer);\n    setAnimateOnClick($component.getAttribute(AttributesEnum.AnimateOnClick));\n\n    // init slider events -------------------------------------\n    $slider.addEventListener('mousedown', onMouseDown);\n    $slider.addEventListener('mouseup', onMouseUp);\n    $slider.addEventListener('touchmove', onValueChange);\n    $slider.addEventListener('touchstart', onValueChange);\n    document.addEventListener('wheel', pointerMouseWheel, { passive: false });\n\n    // init plugins ---------------\n    pluginsManager = PluginsManager(\n      $component,\n      requestUpdatePlugins,\n      {\n        setValues: updatePointersFromPlugins,\n        setMin,\n        setMax,\n        setStep,\n        setPointersOverlap,\n        setPointersMinDistance,\n        setPointersMaxDistance,\n        setDisabled,\n        setType,\n        setRightToLeft,\n        setBottomToTop,\n        setRound,\n        setKeyboardDisabled,\n        setRangeDragging,\n        setData,\n      },\n      {\n        getPercents,\n        getValues,\n\n        getMin: getNumericMin,\n        getMax: getNumericMax,\n\n        getStep,\n        getData,\n        getType,\n        getRound,\n\n        getTextMin: getMin,\n        getTextMax: getMax,\n\n        isRightToLeft,\n        isBottomToTop,\n\n        isDisabled,\n        isKeyboardDisabled,\n\n        isPointersOverlap,\n        isRangeDraggingEnabled,\n        getPointersMinDistance,\n        getPointersMaxDistance,\n      }\n    );\n    pluginsManager.init();\n  })();\n\n  const destroy = () => {\n    $slider.removeEventListener('mousedown', onMouseDown);\n    $slider.removeEventListener('mouseup', onMouseUp);\n    $slider.removeEventListener('touchmove', onValueChange);\n    $slider.removeEventListener('touchstart', onValueChange);\n    document.removeEventListener('wheel', pointerMouseWheel);\n\n    pointer1.destroy();\n    pointer2?.destroy();\n  };\n\n  return {\n    get pointers() {\n      return pointers;\n    },\n\n    get styles() {\n      return styles;\n    },\n\n    get pluginsManager() {\n      return pluginsManager;\n    },\n\n    get min() {\n      return getMin();\n    },\n\n    get max() {\n      return getMax();\n    },\n\n    get step() {\n      return getStep();\n    },\n\n    get pointersOverlap() {\n      return isPointersOverlap();\n    },\n\n    set pointersOverlap(_pointersOverlap) {\n      setPointersOverlap(_pointersOverlap);\n    },\n\n    get pointersMinDistance() {\n      return getPointersMinDistance();\n    },\n\n    set pointersMinDistance(_pointersMinDistance) {\n      setPointersMinDistance(_pointersMinDistance);\n    },\n\n    get pointersMaxDistance() {\n      return getPointersMaxDistance();\n    },\n\n    set pointersMaxDistance(_pointersMaxDistance) {\n      setPointersMaxDistance(_pointersMaxDistance);\n    },\n\n    get disabled() {\n      return isDisabled();\n    },\n\n    set disabled(_disabled) {\n      setDisabled(_disabled);\n    },\n\n    get data() {\n      return getData();\n    },\n\n    get type() {\n      return getType();\n    },\n\n    set type(_type) {\n      setType(_type);\n    },\n\n    get rightToLeft() {\n      return isRightToLeft();\n    },\n\n    set rightToLeft(_rightToLeft) {\n      setRightToLeft(_rightToLeft);\n    },\n\n    get bottomToTop() {\n      return isBottomToTop();\n    },\n\n    set bottomToTop(_bottomToTop) {\n      setBottomToTop(_bottomToTop);\n    },\n\n    get round() {\n      return getRound();\n    },\n\n    set round(_round) {\n      setRound(_round);\n    },\n\n    get animateOnClick() {\n      return animateOnClick;\n    },\n\n    set animateOnClick(_animateOnClick) {\n      setAnimateOnClick(_animateOnClick);\n    },\n\n    get keyboardDisabled() {\n      return isKeyboardDisabled();\n    },\n\n    set keyboardDisabled(_keyboardDisabled){\n      setKeyboardDisabled(_keyboardDisabled);\n    },\n\n    get ariaLabel1(){\n      return ariaLabel1;\n    },\n\n    set ariaLabel1(_ariaLabel1){\n      setAriaLabel(_ariaLabel1, 1);\n    },\n\n    get ariaLabel2(){\n      return ariaLabel2;\n    },\n\n    set ariaLabel2(_ariaLabel2){\n      setAriaLabel(_ariaLabel2, 2);\n    },\n\n    get rangeDragging() {\n      return isRangeDraggingEnabled();\n    },\n\n    set rangeDragging(_rangeDragging) {\n      setRangeDragging(_rangeDragging);\n    },\n\n    setMin,\n    setMax,\n    setValue,\n    setStep,\n    setData,\n    getTextValue,\n    destroy,\n  };\n};\n\n", "import * as AttributesEnum from '../enums/attributes-enum';\nimport { ISlider, ROUND_DEFAULT } from '../ui/slider';\nimport { getBoolean, getNumber } from './math-provider';\nimport { stylePropertiesList } from '../ui/styles';\n\nexport const observedAttributes = [\n  AttributesEnum.Value,\n  AttributesEnum.Value1,\n  AttributesEnum.Value2,\n\n  AttributesEnum.PointersOverlap,\n  AttributesEnum.PointersMinDistance,\n  AttributesEnum.PointersMaxDistance,\n\n  AttributesEnum.Data,\n  AttributesEnum.Min,\n  AttributesEnum.Max,\n  AttributesEnum.Step,\n  AttributesEnum.Round,\n  AttributesEnum.Type,\n  AttributesEnum.Theme,\n  AttributesEnum.RightToLeft,\n  AttributesEnum.BottomToTop,\n\n  AttributesEnum.Disabled,\n  AttributesEnum.KeyboardDisabled,\n  AttributesEnum.Pointer1Disabled,\n  AttributesEnum.Pointer2Disabled,\n  AttributesEnum.RangeDragging,\n\n  AttributesEnum.SliderWidth,\n  AttributesEnum.SliderHeight,\n  AttributesEnum.SliderRadius,\n\n  AttributesEnum.SliderBg,\n  AttributesEnum.SliderBgHover,\n  AttributesEnum.SliderBgFill,\n\n  AttributesEnum.PointerWidth,\n  AttributesEnum.PointerHeight,\n  AttributesEnum.PointerRadius,\n  AttributesEnum.PointerShape,\n  AttributesEnum.PointerBg,\n  AttributesEnum.PointerBgHover,\n  AttributesEnum.PointerBgFocus,\n  AttributesEnum.PointerShadow,\n  AttributesEnum.PointerShadowHover,\n  AttributesEnum.PointerShadowFocus,\n  AttributesEnum.PointerBorder,\n  AttributesEnum.PointerBorderHover,\n  AttributesEnum.PointerBorderFocus,\n\n  AttributesEnum.Pointer2Width,\n  AttributesEnum.Pointer2Height,\n  AttributesEnum.Pointer2Radius,\n  AttributesEnum.Pointer2Shape,\n  AttributesEnum.Pointer2Bg,\n  AttributesEnum.Pointer2BgHover,\n  AttributesEnum.Pointer2BgFocus,\n  AttributesEnum.Pointer2Shadow,\n  AttributesEnum.Pointer2ShadowHover,\n  AttributesEnum.Pointer2ShadowFocus,\n  AttributesEnum.Pointer2Border,\n  AttributesEnum.Pointer2BorderHover,\n  AttributesEnum.Pointer2BorderFocus,\n\n  AttributesEnum.AriaLabel1,\n  AttributesEnum.AriaLabel2,\n\n  AttributesEnum.AnimateOnClick,\n];\n\nif(window.tcRangeSliderObservedAttr){\n  for(const attr of window.tcRangeSliderObservedAttr){\n    observedAttributes.push(attr);\n  }\n}\n\nexport const onAttributesChange = (slider: ISlider, attrName: string, _oldValue: string, newValue: string) => {\n\n  // try to get style property - ['--pointer-width', 'pointer-width', 1, 'pointerWidth']\n  const found = stylePropertiesList.find(([_cssVariableName, _attrName, _index, _apiProperty]) => _attrName === attrName);\n  if(found && slider.styles){\n    const [_cssVariableName, _attrName, _index, _apiProperty] = found;\n    slider.styles.setStyle(_cssVariableName, newValue, _index);\n    return;\n  }\n\n  switch (attrName) {\n\n    case AttributesEnum.Min: {\n      slider.setMin(newValue);\n      break;\n    }\n\n    case AttributesEnum.Max: {\n      slider.setMax(newValue);\n      break;\n    }\n\n    case AttributesEnum.Value: {\n      slider.setValue(newValue, 1);\n      break;\n    }\n\n    case AttributesEnum.Value1: {\n      slider.setValue(newValue, 1);\n      break;\n    }\n\n    case AttributesEnum.Value2: {\n      slider.setValue(newValue, 2);\n      break;\n    }\n\n    case AttributesEnum.Step: {\n      slider.setStep(newValue);\n      break;\n    }\n\n    case AttributesEnum.PointersOverlap: {\n      slider.pointersOverlap = getBoolean(newValue);\n      break;\n    }\n\n    case AttributesEnum.PointersMinDistance: {\n      slider.pointersMinDistance = getNumber(newValue, 0);\n      break;\n    }\n\n    case AttributesEnum.RangeDragging: {\n      slider.rangeDragging = getBoolean(newValue);\n      break;\n    }\n\n    case AttributesEnum.PointersMaxDistance: {\n      slider.pointersMaxDistance = getNumber(newValue, Infinity);\n      break;\n    }\n\n    case AttributesEnum.Disabled: {\n      slider.disabled = getBoolean(newValue);\n      break;\n    }\n\n    case AttributesEnum.KeyboardDisabled: {\n      slider.keyboardDisabled = getBoolean(newValue);\n      break;\n    }\n\n    case AttributesEnum.Pointer1Disabled: {\n      const pointer1 = slider?.pointers[0];\n      if(!pointer1) return;\n\n      pointer1.disabled = getBoolean(newValue);\n      break;\n    }\n\n    case AttributesEnum.Pointer2Disabled: {\n      const pointer2 = slider?.pointers[1];\n      if(!pointer2) return;\n\n      pointer2.disabled = getBoolean(newValue);\n      break;\n    }\n\n    case AttributesEnum.Data: {\n      slider.setData(newValue);\n      break;\n    }\n\n    case AttributesEnum.Type: {\n      slider.type = newValue;\n      break;\n    }\n\n    case AttributesEnum.RightToLeft: {\n      slider.rightToLeft = getBoolean(newValue);\n      break;\n    }\n\n    case AttributesEnum.BottomToTop: {\n      slider.bottomToTop = getBoolean(newValue);\n      break;\n    }\n\n    case AttributesEnum.Round: {\n      slider.round = getNumber(newValue, ROUND_DEFAULT);\n      break;\n    }\n\n    case AttributesEnum.AriaLabel1: {\n      slider.ariaLabel1 = newValue;\n      break;\n    }\n\n    case AttributesEnum.AriaLabel2: {\n      slider.ariaLabel2 = newValue;\n      break;\n    }\n\n    case AttributesEnum.Theme: {\n      if(slider.styles){\n        slider.styles.theme = newValue;\n      }\n      break;\n    }\n\n    case AttributesEnum.PointerShape: {\n      if(slider.styles){\n        slider.styles.pointerShape = newValue;\n      }\n      break;\n    }\n\n    case AttributesEnum.Pointer2Shape: {\n      if(slider.styles){\n        slider.styles.pointer2Shape = newValue;\n      }\n      break;\n    }\n\n    case AttributesEnum.AnimateOnClick: {\n      slider.animateOnClick = newValue;\n      break;\n    }\n  }\n\n  if(!slider || !slider.pluginsManager) return;\n  slider.pluginsManager.onAttrChange(attrName, _oldValue, newValue);\n};", "import mainTemplate from '../templates/main.html.js'; // esbuild custom loader\nimport styles from './styles.pcss';\nimport { observedAttributes, onAttributesChange } from '../domain/attributes-provider';\nimport { ISlider, ROUND_DEFAULT, Slider } from '../ui/slider';\nimport { IPointer, Pointer } from '../ui/pointer';\nimport { TData, TStep } from '../types';\nimport { getBoolean, getNumber, isNumber } from '../domain/math-provider';\nimport * as TypeEnum from '../enums/type-enum';\nimport { createPointer2, getExternalCSSList, removeFocus } from '../domain/common-provider';\n\n/**\n * Usage: <toolcool-range-slider value=\"0\" min=\"0\" max=\"100\"></toolcool-range-slider>\n * Documentation: https://github.com/toolcool-org/toolcool-range-slider\n */\nclass RangeSlider extends HTMLElement {\n\n  /**\n   * the attributes list that are observed by web component;\n   * if attribute changes ---> the web component will update accordingly\n   */\n  static get observedAttributes() {\n    return observedAttributes;\n  }\n\n  public slider: ISlider | undefined;\n\n  private _externalCSSList: string[] | null = [];\n\n  // -------------- APIs --------------------\n\n  public set step(_step: TStep) {\n    if(this.slider){\n      this.slider.setStep(_step);\n    }\n  }\n\n  public get step() {\n    return this.slider?.step;\n  }\n\n  public set disabled(_disabled: boolean) {\n    if(this.slider){\n      this.slider.disabled = _disabled;\n    }\n  }\n\n  public get disabled() {\n    return this.slider?.disabled ?? false;\n  }\n\n  public set value(_value: string | number | undefined) {\n    this.slider?.setValue(_value, 1);\n  }\n\n  public get value() {\n    if(!this.slider) return undefined;\n\n    const pointer1 = this.slider.pointers[0];\n    if(!pointer1) return undefined;\n\n    const val = this.slider.getTextValue(pointer1.percent);\n    return isNumber(val) ? getNumber(val, val) : val;\n  }\n\n  /**\n   * value1 is alias for value\n   */\n  public set value1(val: string | number | undefined) {\n    this.value = val;\n  }\n\n  /**\n   * value1 is alias for value\n   */\n  public get value1() {\n    return this.value;\n  }\n\n  public set value2(_value2: string | number | undefined) {\n    this.slider?.setValue(_value2, 2);\n  }\n\n  public get value2() {\n    if(!this.slider) return undefined;\n\n    const pointer2 = this.slider.pointers[1];\n    if(!pointer2) return undefined;\n\n    const val = this.slider.getTextValue(pointer2.percent);\n    return isNumber(val) ? getNumber(val, val) : val;\n  }\n\n  public set data(_data: TData) {\n    this.slider?.setData(_data);\n  }\n\n  public get data() {\n    return this.slider?.data;\n  }\n\n  public set min(_min: number | string | undefined | null) {\n    this.slider?.setMin(_min);\n  }\n\n  public get min() {\n    return this.slider?.min;\n  }\n\n  public set max(_max: number | string | undefined | null) {\n    this.slider?.setMax(_max);\n  }\n\n  public get max() {\n    return this.slider?.max;\n  }\n\n  public set round(_round: number) {\n    if(!this.slider) return;\n    this.slider.round = _round;\n  }\n\n  public get round() {\n    return this.slider?.round ?? ROUND_DEFAULT;\n  }\n\n  public set type(_type: string | undefined) {\n    if(!this.slider) return;\n    this.slider.type = _type ?? TypeEnum.Horizontal;\n  }\n\n  public get type() {\n    return this.slider?.type || TypeEnum.Horizontal;\n  }\n\n  public set pointersOverlap(_pointersOverlap: boolean) {\n    if(!this.slider) return;\n    this.slider.pointersOverlap = _pointersOverlap;\n  }\n\n  public get pointersOverlap() {\n    return this.slider?.pointersOverlap ?? false;\n  }\n\n  public set pointersMinDistance(_pointersMinDistance: number) {\n    if(!this.slider) return;\n    this.slider.pointersMinDistance = _pointersMinDistance;\n  }\n\n  public get pointersMinDistance() {\n    return this.slider?.pointersMinDistance ?? 0;\n  }\n\n  public set pointersMaxDistance(_pointersMaxDistance: number) {\n    if(!this.slider) return;\n    this.slider.pointersMaxDistance = _pointersMaxDistance;\n  }\n\n  public get pointersMaxDistance() {\n    return this.slider?.pointersMaxDistance ?? Infinity;\n  }\n\n  public set theme(_theme: string | null) {\n    if(!this.slider || !this.slider.styles) return;\n    this.slider.styles.theme = _theme;\n  }\n\n  public get theme() {\n    return this.slider?.styles?.theme ?? null;\n  }\n\n  public set rtl(_rtl: boolean) {\n    if(!this.slider) return;\n    this.slider.rightToLeft = _rtl;\n  }\n\n  public get rtl() {\n    return this.slider?.rightToLeft ?? false;\n  }\n\n  public set btt(_btt: boolean) {\n    if(!this.slider) return;\n    this.slider.bottomToTop = _btt;\n  }\n\n  public get btt() {\n    return this.slider?.bottomToTop ?? false;\n  }\n\n  public set keyboardDisabled(_keyboardDisabled: boolean) {\n    if(!this.slider) return;\n    this.slider.keyboardDisabled = _keyboardDisabled;\n  }\n\n  public get keyboardDisabled() {\n    return this.slider?.keyboardDisabled ?? false;\n  }\n\n  public set animateOnClick(_animateOnClick: string | undefined) {\n    if(!this.slider) return;\n    this.slider.animateOnClick = _animateOnClick;\n  }\n\n  public get animateOnClick() {\n    return this.slider?.animateOnClick;\n  }\n\n  public set pointerShape(_pointerShape: string | null) {\n    if(!this.slider || !this.slider.styles) return;\n    this.slider.styles.pointerShape = _pointerShape;\n  }\n\n  public get pointerShape() {\n    return this.slider?.styles?.pointerShape ?? null;\n  }\n\n  public set pointer2Shape(_pointerShape: string | null) {\n    if(!this.slider || !this.slider.styles) return;\n    this.slider.styles.pointer2Shape = _pointerShape;\n  }\n\n  public get pointer2Shape() {\n    return this.slider?.styles?.pointer2Shape ?? null;\n  }\n\n  public set pointer1Disabled(_pointer1Disabled: boolean) {\n    if(!this.slider) return;\n\n    const pointer1 = this.slider.pointers[0];\n    if(!pointer1) return;\n\n    pointer1.disabled = _pointer1Disabled;\n  }\n\n  public get pointer1Disabled() {\n    const pointer1 = this.slider?.pointers[0];\n    return pointer1?.disabled ?? false;\n  }\n\n  public set pointer2Disabled(_pointer2Disabled: boolean) {\n    if(!this.slider) return;\n\n    const pointer2 = this.slider?.pointers[1];\n    if(!pointer2) return;\n\n    pointer2.disabled = _pointer2Disabled;\n  }\n\n  public get pointer2Disabled() {\n    const pointer2 = this.slider?.pointers[1];\n    return pointer2?.disabled ?? false;\n  }\n\n  public set ariaLabel1(_ariaLabel1: string | undefined) {\n    if(!this.slider) return;\n    this.slider.ariaLabel1 = _ariaLabel1;\n  }\n\n  public get ariaLabel1() {\n    const pointer1 = this.slider?.pointers[0];\n    return pointer1?.getAttr('aria-label') ?? undefined;\n  }\n\n  public set ariaLabel2(_ariaLabel2: string | undefined) {\n    if(!this.slider) return;\n    this.slider.ariaLabel2 = _ariaLabel2;\n  }\n\n  public get ariaLabel2() {\n    const pointer2 = this.slider?.pointers[1];\n    return pointer2?.getAttr('aria-label') ?? undefined;\n  }\n\n  public get rangeDragging(){\n    return this.slider?.rangeDragging ?? false;\n  }\n\n  public set rangeDragging(_rangeDragging: boolean | string | undefined | null) {\n    if(this.slider){\n      this.slider.rangeDragging = getBoolean(_rangeDragging);\n    }\n  }\n\n  public get externalCSSList() {\n    return this._externalCSSList;\n  }\n\n  // ----------------------------------------------\n\n  constructor() {\n    super();\n\n    this.attachShadow({\n      mode: 'open', // 'closed', 'open',\n    });\n  }\n\n  /**\n   * when the custom element connected to DOM\n   */\n  connectedCallback() {\n    if (!this.shadowRoot) return;\n\n    // get optional external CSS list\n    this._externalCSSList = getExternalCSSList(this);\n    this.shadowRoot.innerHTML = mainTemplate(styles, this._externalCSSList);\n\n    // init first pointer\n    const $pointer1 = this.shadowRoot?.querySelector('.pointer') as HTMLElement;\n    const pointer1 = $pointer1 ? Pointer(this, $pointer1, 1) : null;\n    if(!pointer1) return;\n\n    // init second pointer\n    let pointer2: IPointer | null = null;\n    if(this.getAttribute('value2') !== null){\n      pointer2 = createPointer2(this, $pointer1);\n    }\n\n    const pointers: IPointer[] = [];\n    if(pointer1){\n      pointers.push(pointer1);\n    }\n    if(pointer2){\n      pointers.push(pointer2);\n    }\n\n    // init the slider\n    const $slider = this.shadowRoot?.getElementById('range-slider') as HTMLElement;\n    if(!$slider) return;\n    this.slider = Slider(this, $slider, pointers);\n\n    removeFocus();\n  }\n\n  /**\n   * when the custom element disconnected from DOM\n   */\n  disconnectedCallback() {\n    if(!this.slider) return\n\n    this.slider.destroy();\n  }\n\n  attributeChangedCallback(attrName: string, oldValue: string, newValue: string) {\n    if(!this.slider) return;\n\n    onAttributesChange(this.slider, attrName, oldValue, newValue);\n  }\n}\n\nexport default RangeSlider;", "import RangeSlider from './app/range-slider';\n\ndeclare global {\n  interface Window {\n    tcRangeSlider: typeof RangeSlider;\n  }\n}\n\nwindow.tcRangeSlider = RangeSlider;\n\n// register web components\nif (!customElements.get('toolcool-range-slider')) {\n  customElements.define('toolcool-range-slider', RangeSlider);\n}\n\nif (!customElements.get('tc-range-slider')) {\n  customElements.define('tc-range-slider', class extends RangeSlider{});\n}\n\n"],
  "mappings": "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",
  "names": ["main_html_default", "styles", "linkHrefs", "linkHref", "Value", "Value1", "Value2", "PointersOverlap", "PointersMinDistance", "PointersMaxDistance", "RangeDragging", "Data", "Min", "Max", "Step", "Round", "Type", "Theme", "RightToLeft", "BottomToTop", "Disabled", "KeyboardDisabled", "Pointer1Disabled", "Pointer2Disabled", "SliderWidth", "SliderHeight", "SliderRadius", "SliderBg", "SliderBgHover", "SliderBgFill", "PointerWidth", "PointerHeight", "PointerRadius", "PointerShape", "PointerBg", "PointerBgHover", "PointerBgFocus", "PointerShadow", "PointerShadowHover", "PointerShadowFocus", "PointerBorder", "PointerBorderHover", "PointerBorderFocus", "Pointer2Width", "Pointer2Height", "Pointer2Radius", "Pointer2Shape", "Pointer2Bg", "Pointer2BgHover", "Pointer2BgFocus", "Pointer2Shadow", "Pointer2ShadowHover", "Pointer2ShadowFocus", "Pointer2Border", "Pointer2BorderHover", "Pointer2BorderFocus", "AriaLabel1", "AriaLabel2", "AnimateOnClick", "CSSLinks", "convertRange", "min", "max", "a", "b", "x", "temp", "isNumber", "input", "getNumber", "defaultValue", "roundToStep", "num", "step", "setDecimalPlaces", "decimalPlaces", "coeff", "__pow", "getBoolean", "val", "parseData", "dataString", "parts", "list", "allValuesAreNumbers", "i", "part", "isNumber", "item", "findValueIndexInData", "val", "data", "Vertical", "Horizontal", "PanelFill", "$fill", "type", "percent1", "percent2", "rightToLeft", "bottomToTop", "Vertical", "sendPointerClickedEvent", "$component", "$pointer", "sendMouseDownEvent", "evt", "sendMouseUpEvent", "sendOnKeyDownEvent", "sendChangeEvent", "value1", "value2", "detail", "isNumber", "getNumber", "AnimateOnClick", "SliderWidth", "SliderHeight", "SliderRadius", "SliderBg", "SliderBgHover", "SliderBgFill", "PointerWidth", "PointerHeight", "PointerRadius", "PointerBg", "PointerBgHover", "PointerBgFocus", "PointerShadow", "PointerShadowHover", "PointerShadowFocus", "PointerBorder", "PointerBorderHover", "PointerBorderFocus", "stylePropertiesList", "SliderWidth", "SliderHeight", "SliderRadius", "SliderBg", "SliderBgHover", "SliderBgFill", "PointerWidth", "PointerHeight", "PointerRadius", "PointerBg", "PointerBgHover", "PointerBgFocus", "PointerShadow", "PointerShadowHover", "PointerShadowFocus", "PointerBorder", "PointerBorderHover", "PointerBorderFocus", "Pointer2Width", "Pointer2Height", "Pointer2Radius", "Pointer2Bg", "Pointer2BgHover", "Pointer2BgFocus", "Pointer2Shadow", "Pointer2ShadowHover", "Pointer2ShadowFocus", "Pointer2Border", "Pointer2BorderHover", "Pointer2BorderFocus", "Styles", "$component", "$slider", "$pointer2", "theme", "pointerShape", "pointer2Shape", "stylesMap", "removeClassesStartWith", "prefix", "classList", "className", "setTheme", "val", "setPointerShape", "index", "getKey", "key", "setStyle", "value", "getStyle", "item", "cssVariableName", "attrName", "apiProperty", "cssVariableValue", "_val", "ex", "Theme", "PointerShape", "Pointer2Shape", "AnimateOnClick", "RangeDragging", "Pointer", "$component", "$pointer", "index", "percent", "arrowLeft", "arrowRight", "arrowUp", "arrowDown", "disabled", "updatePosition", "_percent", "_leftWall", "_rightWall", "_type", "_rightToLeft", "_bottomToTop", "percentPos", "Vertical", "Horizontal", "isClicked", "$target", "setCallbacks", "_arrowLeft", "_arrowRight", "_arrowUp", "_arrowDown", "setDisabled", "_disabled", "setAttr", "key", "value", "getAttr", "pointerKeyDown", "evt", "sendOnKeyDownEvent", "pointerClicked", "sendPointerClickedEvent", "createPointer2", "$component", "$pointer1", "$pointer2", "Pointer", "removeFocus", "_a", "ex", "getExternalCSSList", "str", "CSSLinks", "parts", "cssList", "part", "PluginsManager", "$component", "requestUpdatePlugins", "setters", "getters", "plugins", "update", "data", "plugin", "onAttrChange", "_attrName", "_oldValue", "_newValue", "defineSettersGetters", "item", "ex", "initStyles", "_a", "$style", "pluginFunc", "MIN_DEFAULT", "MAX_DEFAULT", "ROUND_DEFAULT", "Slider", "$component", "$slider", "pointers", "pointer1", "pointer2", "selectedPointer", "panelFill", "styles", "pluginsManager", "min", "max", "step", "data", "type", "Horizontal", "round", "rightToLeft", "bottomToTop", "pointersOverlap", "pointersMinDistance", "pointersMaxDistance", "rangeDragging", "rangeDraggingStart", "rangeDraggingDiff", "disabled", "keyboardDisabled", "animateOnClick", "ariaLabel1", "ariaLabel2", "onMouseDown", "evt", "onValueChange", "onMouseUp", "sendMouseDownEvent", "AnimateOnClick", "sendMouseUpEvent", "getActivePointer", "$target", "percent", "panelFillClicked", "isPanelFillClicked", "_dragPercent", "_step", "getRelativeStep", "roundToStep", "isPanelClicked", "pointer", "minDistance", "minDistancePointer", "distance", "getSelectedPointerIndex", "Vertical", "boxHeight", "boxTop", "mouseY", "boxWidth", "boxLeft", "mouseX", "firstPointer", "lastPointer", "firstSmallerThanMin", "lastGreaterThanMax", "setPositions", "foundIndex", "pointerMouseWheel", "scrollTop", "rightOrBottom", "shouldGoPrev", "goPrev", "goNext", "arrowLeft", "pointerIndex", "arrowRight", "arrowUp", "arrowDown", "index", "_percent", "addSecondPointer", "removeSecondPointer", "updatePlugins", "getPercents", "getValues", "getNumericMin", "getNumericMax", "getData", "getStep", "getRound", "getType", "getMin", "getMax", "isRightToLeft", "isBottomToTop", "isPointersOverlap", "getPointersMinDistance", "getPointersMaxDistance", "isRangeDraggingEnabled", "isDisabled", "isKeyboardDisabled", "requestUpdatePlugins", "updatePointersFromPlugins", "value1", "value2", "val1", "val2", "setInitialPointersValues", "getPointerLeftWall", "converted", "getPointerRightWall", "convertRange", "getTextValue", "val", "setDecimalPlaces", "getPointerMin", "_a", "getPointerMax", "value1text", "value2text", "setAriaMinMax", "sendChangeEvent", "setMinMax", "_min", "_max", "getNumber", "setMin", "setMax", "_b", "_c", "_d", "_value", "_value1", "_value2", "val1str", "setValue", "_val", "setRangeDragging", "findValueIndexInData", "removeFocus", "setStep", "isNumber", "diff", "setPointersOverlap", "_pointersOverlap", "setPointersMinDistance", "_pointersMinDistance", "setPointersMaxDistance", "_pointersMaxDistance", "setDisabled", "_disabled", "setKeyboardDisabled", "setData", "_data", "parseData", "setType", "_type", "$box", "aria", "setRightToLeft", "_rightToLeft", "setBottomToTop", "_bottomToTop", "setRound", "_round", "setAnimateOnClick", "_animateOnClick", "setAriaLabel", "_ariaLabel", "_rangeDragging", "RangeDragging", "$fill", "PanelFill", "Type", "getBoolean", "RightToLeft", "BottomToTop", "Min", "Max", "Step", "Data", "Value", "Value1", "Value2", "PointersOverlap", "PointersMinDistance", "PointersMaxDistance", "Disabled", "KeyboardDisabled", "Pointer1Disabled", "Pointer2Disabled", "Round", "AriaLabel1", "AriaLabel2", "Styles", "PluginsManager", "_keyboardDisabled", "_ariaLabel1", "_ariaLabel2", "observedAttributes", "Value", "Value1", "Value2", "PointersOverlap", "PointersMinDistance", "PointersMaxDistance", "Data", "Min", "Max", "Step", "Round", "Type", "Theme", "RightToLeft", "BottomToTop", "Disabled", "KeyboardDisabled", "Pointer1Disabled", "Pointer2Disabled", "RangeDragging", "SliderWidth", "SliderHeight", "SliderRadius", "SliderBg", "SliderBgHover", "SliderBgFill", "PointerWidth", "PointerHeight", "PointerRadius", "PointerShape", "PointerBg", "PointerBgHover", "PointerBgFocus", "PointerShadow", "PointerShadowHover", "PointerShadowFocus", "PointerBorder", "PointerBorderHover", "PointerBorderFocus", "Pointer2Width", "Pointer2Height", "Pointer2Radius", "Pointer2Shape", "Pointer2Bg", "Pointer2BgHover", "Pointer2BgFocus", "Pointer2Shadow", "Pointer2ShadowHover", "Pointer2ShadowFocus", "Pointer2Border", "Pointer2BorderHover", "Pointer2BorderFocus", "AriaLabel1", "AriaLabel2", "AnimateOnClick", "attr", "onAttributesChange", "slider", "attrName", "_oldValue", "newValue", "found", "stylePropertiesList", "_cssVariableName", "_attrName", "_index", "_apiProperty", "getBoolean", "getNumber", "pointer1", "pointer2", "ROUND_DEFAULT", "RangeSlider", "__publicField", "observedAttributes", "_step", "_a", "_disabled", "_b", "_value", "pointer1", "val", "isNumber", "getNumber", "_value2", "pointer2", "_data", "_min", "_max", "_round", "ROUND_DEFAULT", "_type", "Horizontal", "_pointersOverlap", "_pointersMinDistance", "_pointersMaxDistance", "_theme", "_c", "_rtl", "_btt", "_keyboardDisabled", "_animateOnClick", "_pointerShape", "_pointer1Disabled", "_pointer2Disabled", "_ariaLabel1", "_ariaLabel2", "_rangeDragging", "getBoolean", "getExternalCSSList", "main_html_default", "styles_default", "$pointer1", "Pointer", "createPointer2", "pointers", "$slider", "Slider", "removeFocus", "attrName", "oldValue", "newValue", "onAttributesChange", "range_slider_default", "range_slider_default"]
}
